{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LeadPilot - B2B SaaS Lead Generation Platform\n\n## Overview\nLeadPilot is a comprehensive B2B SaaS platform designed to automate lead generation and email outreach. It features AI-powered lead scoring, automated email campaigns with pre-built French templates, multi-step sequences, and extensive analytics. The platform aims to streamline lead management and outreach for businesses, with a future vision to integrate a professional human closing service for sales. It's built as a full-stack TypeScript application, utilizing React for the frontend and Node.js with Express for the backend, supported by a PostgreSQL database.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\nClosing service preference: Human closers (not AI) for phone sales with commission structure.\nAuthentication: Landing page should allow both login and signup options for multiple account creation.\n\n## System Architecture\nThe application is a full-stack TypeScript project. The frontend, built with React 18, Vite, and TypeScript, uses `shadcn/ui` and Radix UI components styled with Tailwind CSS, `Wouter` for routing, and TanStack React Query for state management. The backend is a Node.js Express server with TypeScript, implementing a RESTful API. Authentication is handled via Replit's OpenID Connect and Passport.js, with sessions stored in PostgreSQL. PostgreSQL, managed with Drizzle ORM, serves as the primary database, storing user, session, email template, lead, campaign, sequence, and booking data. The system supports a tiered subscription model with usage quotas for leads, templates, AI variations, and sequences, enforced at the API level with real-time validation.\n\n**UI/UX Decisions:**\nThe frontend utilizes `shadcn/ui` components built on Radix UI primitives, styled with Tailwind CSS, to ensure a modular and accessible user interface. The design incorporates a custom system for consistent branding. The booking system UI is designed for simplicity, featuring white text on a dark theme and scrollable modals for enhanced usability.\n\n**Technical Implementations:**\n- **Frontend**: React 18, TypeScript, Vite, Tailwind CSS, `shadcn/ui`, Radix UI, Wouter, TanStack React Query, React Hook Form with Zod validation.\n- **Backend**: Node.js, Express, TypeScript, RESTful API design, Passport.js for authentication, `connect-pg-simple` for session management.\n- **Database**: PostgreSQL with Drizzle ORM for type-safe operations.\n- **Lead Management**: Includes AI lead scoring based on various criteria, CSV import/export with field mapping, and lead enrichment capabilities.\n- **Email Campaigns**: Features 30 pre-built French templates (1 Free, 5 Starter total, 15 Pro total, 30 Growth total), AI-powered email variation generation via OpenAI with usage quotas (5 variations Free, 100 Starter, 300 Pro, 1000 Growth) that reformulates templates while maintaining structure, and a system for creating custom emails. Campaigns support flexible lead targeting with quick selection actions.\n- **Automated Sequences**: A comprehensive system for creating multi-step email sequences with configurable delays and smart response detection to stop sequences.\n- **Booking System**: Allows users to propose meeting times via a public booking page, with configurable availability and automatic text insertion into emails.\n- **Subscription & Quota**: Implements a tiered subscription model (Free, Starter, Pro, Growth) with usage-based quotas for features like leads, templates, and AI variations.\n\n## External Dependencies\n\n- **Frameworks & Runtimes**: React 18, Express.js, Vite, Node.js.\n- **Database**: PostgreSQL (hosted on Neon Database), Drizzle ORM, `@neondatabase/serverless`.\n- **UI & Styling**: Tailwind CSS, Radix UI, `shadcn/ui`, Lucide React.\n- **Authentication**: Passport.js (for Replit OAuth/OpenID Connect), `connect-pg-simple`, `express-session`.\n- **Lead & AI Services**: Mock Lead Service (for development), AI Lead Scoring Service, CSV Import/Export Service, External Lead API Integration (configurable).\n- **Planned Integrations**: Stripe (for payments), SMTP services (for email delivery).\n- **Development Tools**: TypeScript, ESBuild, PostCSS with Autoprefixer.","size_bytes":4198},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { registerAdminRoutes } from \"./routes/admin\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Test external service connections\n  if (process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY) {\n    const { testSupabaseConnection } = await import('./supabaseClient');\n    await testSupabaseConnection();\n  }\n  \n  if (process.env.APOLLO_API_KEY) {\n    console.log('🔗 Apollo API key detected - real lead generation enabled');\n  }\n  \n  if (process.env.OPENAI_API_KEY) {\n    console.log('🧠 OpenAI API key detected - advanced AI scoring enabled');\n  }\n\n  const server = await registerRoutes(app);\n  registerAdminRoutes(app);\n\n  // Démarrer l'automatisation des séquences\n  const { startSequenceAutomation } = await import(\"./services/sequenceAutomation\");\n  startSequenceAutomation();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2775},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}/`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4222},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { setupOAuthRoutes } from \"./oauth-email\";\nimport { insertLeadSchema, insertCampaignSchema, insertBookingSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { seedDatabase, exampleLeads } from \"./seed-data\";\nimport { getLeadService, AILeadScoringService, type LeadSearchParams } from \"./services/leadService\";\nimport { CSVService } from \"./services/csvService\";\nimport { OpenAILeadScoringService } from \"./services/openaiService\";\nimport { registerEmailVariationRoutes } from \"./routes/emailVariations\";\nimport { emailService } from \"./services/emailService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n  \n  // OAuth email routes\n  setupOAuthRoutes(app);\n  \n  // Setup OAuth debug routes\n  const { setupOAuthDebug } = await import('./oauth-debug');\n  setupOAuthDebug(app);\n\n  // Setup sequence routes\n  const { registerSequenceRoutes } = await import('./routes/sequences');\n  registerSequenceRoutes(app);\n\n  // Setup payment routes\n  const { registerPaymentRoutes } = await import('./routes/payments');\n  registerPaymentRoutes(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Templates routes\n  app.get('/api/templates', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const templates = await storage.getTemplatesByPlan(user.plan);\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.get('/api/templates/:id', isAuthenticated, async (req, res) => {\n    try {\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching template:\", error);\n      res.status(500).json({ message: \"Failed to fetch template\" });\n    }\n  });\n\n  // Route pour utiliser un template\n  app.post('/api/templates/:id/use', isAuthenticated, async (req, res) => {\n    try {\n      await storage.updateTemplateUsage(req.params.id);\n      res.json({ message: \"Template usage updated\" });\n    } catch (error) {\n      console.error(\"Error updating template usage:\", error);\n      res.status(500).json({ message: \"Failed to update template usage\" });\n    }\n  });\n\n  // Route pour modifier un template\n  app.patch('/api/templates/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { subject, content } = req.body;\n      await storage.updateTemplate(req.params.id, { subject, content });\n      res.json({ message: \"Template updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating template:\", error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  // Route pour supprimer un template\n  app.delete('/api/templates/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteTemplate(req.params.id);\n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Route pour générer une variation d'email avec quota\n  app.post('/api/templates/:id/variation', isAuthenticated, async (req: any, res) => {\n    try {\n      const templateId = req.params.id;\n      const userId = req.user.claims.sub;\n      \n      // Vérifier les quotas\n      const quotaCheck = await storage.checkVariationQuota(userId);\n      if (!quotaCheck.canGenerate) {\n        return res.status(429).json({ \n          message: \"Quota de variations épuisé pour ce mois\",\n          remainingVariations: quotaCheck.remainingVariations,\n          monthlyLimit: quotaCheck.monthlyLimit\n        });\n      }\n\n      const template = await storage.getTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      // Générer la variation\n      const variation = await storage.generateAIVariation(template);\n      \n      // Incrémenter le compteur\n      await storage.incrementVariationUsage(userId);\n      \n      res.json({\n        ...variation,\n        remainingVariations: quotaCheck.remainingVariations - 1\n      });\n    } catch (error) {\n      console.error(\"Error generating variation:\", error);\n      res.status(500).json({ message: \"Failed to generate variation\" });\n    }\n  });\n\n  // Route pour créer un template personnalisé\n  app.post('/api/templates', isAuthenticated, async (req, res) => {\n    try {\n      const template = await storage.createTemplate(req.body);\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error creating template:\", error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  // Route pour générer une variation IA d'un template\n  app.post('/api/templates/:id/ai-variation', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Vérifier les quotas\n      const quotaCheck = await storage.checkVariationQuota(userId);\n      if (!quotaCheck.canGenerate) {\n        return res.status(429).json({ \n          message: \"Quota de variations épuisé pour ce mois\",\n          remainingVariations: quotaCheck.remainingVariations,\n          monthlyLimit: quotaCheck.monthlyLimit\n        });\n      }\n\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      // Utiliser l'IA pour générer une variation complète\n      const variation = await storage.generateAIVariation(template);\n      \n      // Mettre à jour le template avec la variation\n      await storage.updateTemplate(req.params.id, { \n        subject: variation.subject, \n        content: variation.content \n      });\n      \n      // Incrémenter le compteur\n      await storage.incrementVariationUsage(userId);\n      \n      res.json({ \n        message: \"AI variation applied successfully\",\n        remainingVariations: quotaCheck.remainingVariations - 1\n      });\n    } catch (error) {\n      console.error(\"Error generating AI variation:\", error);\n      res.status(500).json({ message: \"Failed to generate AI variation\" });\n    }\n  });\n\n  // Route pour supprimer une campagne\n  app.delete('/api/campaigns/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCampaign(req.params.id);\n      res.json({ message: \"Campaign deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting campaign:\", error);\n      res.status(500).json({ message: \"Failed to delete campaign\" });\n    }\n  });\n\n  // Routes pour les emails personnalisés\n  app.get('/api/custom-emails', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customEmails = await storage.getCustomEmails(userId);\n      res.json(customEmails);\n    } catch (error) {\n      console.error(\"Error fetching custom emails:\", error);\n      res.status(500).json({ message: \"Failed to fetch custom emails\" });\n    }\n  });\n\n  app.post('/api/custom-emails', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const customEmail = await storage.createCustomEmail(userId, req.body);\n      res.json(customEmail);\n    } catch (error) {\n      console.error(\"Error creating custom email:\", error);\n      res.status(500).json({ message: \"Failed to create custom email\" });\n    }\n  });\n\n  app.patch('/api/custom-emails/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.updateCustomEmail(req.params.id, req.body);\n      res.json({ message: \"Custom email updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating custom email:\", error);\n      res.status(500).json({ message: \"Failed to update custom email\" });\n    }\n  });\n\n  app.delete('/api/custom-emails/:id', isAuthenticated, async (req, res) => {\n    try {\n      await storage.deleteCustomEmail(req.params.id);\n      res.json({ message: \"Custom email deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting custom email:\", error);\n      res.status(500).json({ message: \"Failed to delete custom email\" });\n    }\n  });\n\n  // Leads routes\n  app.get('/api/leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leads = await storage.getLeads(userId);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.post('/api/leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check quota limits\n      const leadsCount = await storage.getLeadsCount(userId);\n      const limits = {\n        free: 5,\n        starter: 100,\n        pro: 400,\n        growth: 1500\n      };\n      \n      if (leadsCount >= (limits[user.plan as keyof typeof limits] || 5)) {\n        return res.status(400).json({ message: \"Lead quota exceeded for your plan\" });\n      }\n\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead({ ...leadData, userId });\n      \n      // Update user's leads used count\n      await storage.upsertUser({ \n        ...user, \n        leadsUsed: user.leadsUsed + 1 \n      });\n      \n      res.json(lead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid lead data\", errors: error.errors });\n      }\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.put('/api/leads/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = insertLeadSchema.partial().parse(req.body);\n      const updatedLead = await storage.updateLead(req.params.id, userId, updates);\n      \n      if (!updatedLead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      res.json(updatedLead);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid lead data\", errors: error.errors });\n      }\n      console.error(\"Error updating lead:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete('/api/leads/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const deleted = await storage.deleteLead(req.params.id, userId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      res.json({ message: \"Lead deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting lead:\", error);\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Campaigns routes\n  app.get('/api/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaigns = await storage.getCampaigns(userId);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.post('/api/campaigns', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaignData = insertCampaignSchema.parse(req.body);\n      const campaign = await storage.createCampaign({ ...campaignData, userId });\n      \n      res.json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid campaign data\", errors: error.errors });\n      }\n      console.error(\"Error creating campaign:\", error);\n      res.status(500).json({ message: \"Failed to create campaign\" });\n    }\n  });\n\n  // Route pour lancer une campagne (envoyer les emails)\n  app.post('/api/campaigns/:id/send', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const campaignId = req.params.id;\n      \n      // Récupérer la campagne\n      const campaign = await storage.getCampaign(campaignId, userId);\n      if (!campaign || campaign.userId !== userId) {\n        return res.status(404).json({ message: \"Campagne non trouvée\" });\n      }\n\n      if (campaign.status === 'sent') {\n        return res.status(400).json({ message: \"Cette campagne a déjà été envoyée\" });\n      }\n\n      // Récupérer l'email personnalisé\n      const customEmail = await storage.getCustomEmail(campaign.emailId);\n      if (!customEmail) {\n        return res.status(404).json({ message: \"Email non trouvé\" });\n      }\n\n      // Récupérer les leads ciblés\n      const leadIds = campaign.leadTargets.split(',');\n      const leads = await storage.getLeadsByIds(leadIds);\n\n      if (leads.length === 0) {\n        return res.status(400).json({ message: \"Aucun lead trouvé pour cette campagne\" });\n      }\n\n      // Pour l'instant, on simule l'envoi d'emails (mode démo)\n      const user = await storage.getUser(userId);\n      console.log(`📧 Simulation d'envoi de campagne pour ${user?.email}`);\n\n      // Envoyer les emails\n      const results = await emailService.sendCampaignEmails(\n        userId,\n        campaignId,\n        leads,\n        customEmail.content,\n        customEmail.subject\n      );\n\n      // Mettre à jour le statut de la campagne\n      await storage.updateCampaign(campaignId, {\n        status: 'sent',\n        totalSent: results.sent\n      });\n\n      res.json({\n        message: \"Campagne envoyée avec succès\",\n        results: {\n          sent: results.sent,\n          failed: results.failed,\n          total: leads.length,\n          errors: results.errors.slice(0, 5) // Limiter les erreurs affichées\n        }\n      });\n    } catch (error) {\n      console.error(\"Erreur envoi campagne:\", error);\n      res.status(500).json({ message: \"Erreur lors de l'envoi de la campagne\" });\n    }\n  });\n\n  // Sequences routes\n  app.get('/api/sequences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || (user.plan !== 'pro' && user.plan !== 'growth')) {\n        return res.status(403).json({ message: \"Sequences require Pro or Growth plan\" });\n      }\n      \n      const sequences = await storage.getSequences(userId);\n      res.json(sequences);\n    } catch (error) {\n      console.error(\"Error fetching sequences:\", error);\n      res.status(500).json({ message: \"Failed to fetch sequences\" });\n    }\n  });\n\n  // Bookings routes\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getBookings(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking({ ...bookingData, userId });\n      res.json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      }\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Supprimer un booking\n  app.delete('/api/bookings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingId = req.params.id;\n      \n      await storage.deleteBooking(bookingId, userId);\n      res.json({ message: \"RDV supprimé avec succès\" });\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      res.status(500).json({ message: \"Erreur lors de la suppression\" });\n    }\n  });\n\n  // Mettre à jour le statut de conversion d'un booking\n  app.patch('/api/bookings/:id/conversion', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookingId = req.params.id;\n      const { conversionStatus } = req.body;\n      \n      if (!['converted', 'not_converted'].includes(conversionStatus)) {\n        return res.status(400).json({ message: \"Statut de conversion invalide\" });\n      }\n\n      await storage.updateBookingConversion(bookingId, userId, conversionStatus);\n      res.json({ message: \"Statut de conversion mis à jour\" });\n    } catch (error) {\n      console.error(\"Error updating conversion status:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour\" });\n    }\n  });\n\n  // Route publique pour que les prospects puissent booker directement\n  app.post('/api/bookings/public', async (req: any, res) => {\n    try {\n      // Cette route accepte les bookings publics sans authentification\n      const bookingData = {\n        contactName: req.body.contactName,\n        contactEmail: req.body.contactEmail,\n        contactPhone: req.body.contactPhone,\n        company: req.body.company,\n        startTime: new Date(req.body.startTime),\n        duration: req.body.duration,\n        meetingType: req.body.meetingType,\n        description: req.body.description,\n        status: req.body.status || 'scheduled',\n        message: req.body.message,\n        // Pour l'instant, on associe à un utilisateur par défaut (premier utilisateur)\n        userId: '45880930' as string // À remplacer par un système plus robuste\n      };\n\n      // Créer un booking standard avec les champs requis\n      const standardBooking = {\n        id: crypto.randomUUID(),\n        userId: bookingData.userId,\n        title: `RDV avec ${bookingData.contactName}`,\n        description: bookingData.description,\n        startTime: bookingData.startTime,\n        endTime: new Date(bookingData.startTime.getTime() + (bookingData.duration * 60000)),\n        status: bookingData.status,\n        meetingType: bookingData.meetingType,\n        createdAt: new Date()\n      };\n\n      const booking = await storage.createBooking(standardBooking);\n\n      console.log(`📅 Nouveau RDV public programmé: ${bookingData.contactName} (${bookingData.contactEmail})`);\n      \n      res.json({\n        message: \"Rendez-vous confirmé !\",\n        booking: {\n          id: booking.id,\n          title: booking.title,\n          startTime: booking.startTime,\n          endTime: booking.endTime\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating public booking:\", error);\n      res.status(500).json({ message: \"Erreur lors de la programmation du rendez-vous\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const analytics = await storage.getAnalytics(userId);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // User profile routes\n  app.get('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  // Seed templates on startup\n  await seedDatabase();\n\n  // Register additional routes\n  registerEmailVariationRoutes(app);\n\n  // Custom email variation endpoint\n  app.post('/api/custom-emails/generate-variation', isAuthenticated, async (req: any, res) => {\n    try {\n      const { content } = req.body;\n      const userId = req.user.claims.sub;\n      \n      if (!content || typeof content !== 'string') {\n        return res.status(400).json({ message: \"Content is required\" });\n      }\n\n      // Vérifier les quotas\n      const quotaCheck = await storage.checkVariationQuota(userId);\n      if (!quotaCheck.canGenerate) {\n        return res.status(429).json({ \n          message: `Quota épuisé ! Plan actuel permet ${quotaCheck.monthlyLimit} variations/mois.`,\n          remainingVariations: quotaCheck.remainingVariations,\n          monthlyLimit: quotaCheck.monthlyLimit,\n          quotaExhausted: true\n        });\n      }\n\n      // Générer la variation\n      const variation = await storage.generateContentVariation(content, userId);\n      \n      // Incrémenter le compteur\n      await storage.incrementVariationUsage(userId);\n      \n      res.json({ \n        variation,\n        remainingVariations: quotaCheck.remainingVariations - 1,\n        monthlyLimit: quotaCheck.monthlyLimit\n      });\n    } catch (error) {\n      console.error(\"Error generating custom email variation:\", error);\n      res.status(500).json({ message: \"Failed to generate variation\" });\n    }\n  });\n\n  // Lead generation endpoint\n  app.post('/api/leads/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const searchParams: LeadSearchParams = req.body;\n      \n      // Validate search parameters\n      const schema = z.object({\n        sector: z.string().optional(),\n        location: z.string().optional(),\n        companySize: z.string().optional(),\n        jobTitles: z.array(z.string()).optional(),\n        limit: z.number().min(1).max(100).default(10)\n      });\n      \n      const validatedParams = schema.parse(searchParams);\n      \n      // Generate leads using external service\n      console.log(`🔍 Generating leads with Apollo API for sector: ${validatedParams.sector}, limit: ${validatedParams.limit}`);\n      const leadService = getLeadService();\n      const generatedLeads = await leadService.generateLeads(validatedParams);\n      console.log(`📊 Generated ${generatedLeads.length} leads from Apollo API`);\n      \n      // Calculate AI scores and save to database\n      const savedLeads = [];\n      for (const leadData of generatedLeads) {\n        // Enrich lead data\n        const enrichedData = await leadService.enrichLead(leadData.email);\n        \n        // Calculate AI score using OpenAI if available\n        let aiScore: number;\n        let notes = \"\";\n        \n        // Calculate AI score using OpenAI with rate limiting\n        if (process.env.OPENAI_API_KEY && generatedLeads.indexOf(leadData) < 3) {\n          // Only use OpenAI for first 3 leads to avoid rate limiting\n          try {\n            const openaiService = new OpenAILeadScoringService();\n            const aiResult = await openaiService.calculateAdvancedLeadScore(leadData, enrichedData || undefined);\n            aiScore = aiResult.score;\n            notes = `IA: ${aiResult.reasoning} | Priorités: ${aiResult.priorities.join(', ')}`;\n          } catch (error) {\n            console.warn(\"OpenAI scoring failed, using basic scoring:\", error);\n            aiScore = AILeadScoringService.calculateLeadScore(leadData, enrichedData || undefined);\n            notes = enrichedData ? `Enrichi: ${enrichedData.company?.industry || ''} | ${enrichedData.person?.seniority || ''}` : \"Score basique calculé\";\n          }\n        } else {\n          aiScore = AILeadScoringService.calculateLeadScore(leadData, enrichedData || undefined);\n          notes = enrichedData ? `Enrichi: ${enrichedData.company?.industry || ''} | ${enrichedData.person?.seniority || ''}` : \"Score basique calculé\";\n        }\n        \n        // Save to database\n        const lead = await storage.createLead({\n          userId,\n          firstName: leadData.firstName,\n          lastName: leadData.lastName,\n          email: leadData.email,\n          company: leadData.company,\n          sector: leadData.sector,\n          position: leadData.position,\n          aiScore,\n          status: 'new',\n          source: 'external',\n          notes\n        });\n        \n        savedLeads.push(lead);\n      }\n      \n      res.json({ \n        message: `${savedLeads.length} leads generated successfully`,\n        leads: savedLeads \n      });\n    } catch (error) {\n      console.error(\"Error generating leads:\", error);\n      res.status(500).json({ message: \"Failed to generate leads\" });\n    }\n  });\n\n  // CSV Import endpoint\n  app.post('/api/leads/import-csv', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { csvContent } = req.body;\n      \n      if (!csvContent || typeof csvContent !== 'string') {\n        return res.status(400).json({ message: \"CSV content is required\" });\n      }\n      \n      // Parse CSV\n      const importResult = CSVService.parseCSVToLeads(csvContent, userId);\n      \n      // Save successful leads to database\n      const savedLeads = [];\n      for (const leadData of importResult.successful) {\n        // Calculate AI score if not provided\n        if (!leadData.aiScore) {\n          if (process.env.OPENAI_API_KEY) {\n            try {\n              const openaiService = new OpenAILeadScoringService();\n              const aiResult = await openaiService.calculateAdvancedLeadScore({\n                firstName: leadData.firstName || \"\",\n                lastName: leadData.lastName || \"\",\n                email: leadData.email || \"\",\n                company: leadData.company || \"\",\n                sector: leadData.sector || \"\",\n                position: leadData.position || \"\"\n              });\n              leadData.aiScore = aiResult.score;\n              if (!leadData.notes) {\n                leadData.notes = `IA: ${aiResult.reasoning}`;\n              }\n            } catch (error) {\n              console.warn(\"OpenAI scoring failed for CSV import, using basic scoring:\", error);\n              leadData.aiScore = AILeadScoringService.calculateLeadScore({\n                firstName: leadData.firstName || \"\",\n                lastName: leadData.lastName || \"\",\n                email: leadData.email || \"\",\n                company: leadData.company || \"\",\n                sector: leadData.sector || \"\",\n                position: leadData.position || \"\"\n              });\n            }\n          } else {\n            leadData.aiScore = AILeadScoringService.calculateLeadScore({\n              firstName: leadData.firstName || \"\",\n              lastName: leadData.lastName || \"\",\n              email: leadData.email || \"\",\n              company: leadData.company || \"\",\n              sector: leadData.sector || \"\",\n              position: leadData.position || \"\"\n            });\n          }\n        }\n        \n        const lead = await storage.createLead(leadData);\n        savedLeads.push(lead);\n      }\n      \n      res.json({\n        message: `Import completed: ${savedLeads.length}/${importResult.total} leads imported`,\n        imported: savedLeads.length,\n        total: importResult.total,\n        errors: importResult.errors,\n        leads: savedLeads\n      });\n    } catch (error) {\n      console.error(\"Error importing CSV:\", error);\n      res.status(500).json({ message: \"Failed to import CSV\" });\n    }\n  });\n\n  // CSV Export endpoint\n  app.get('/api/leads/export-csv', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leads = await storage.getLeads(userId);\n      \n      const csvContent = CSVService.exportLeadsToCSV({\n        leads,\n        includeScoring: true,\n        includeNotes: true\n      });\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=leads-export.csv');\n      res.send(csvContent);\n    } catch (error) {\n      console.error(\"Error exporting CSV:\", error);\n      res.status(500).json({ message: \"Failed to export CSV\" });\n    }\n  });\n\n  // Get sample CSV template\n  app.get('/api/leads/csv-template', isAuthenticated, async (req: any, res) => {\n    try {\n      const csvTemplate = CSVService.generateSampleCSV();\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=leads-template.csv');\n      res.send(csvTemplate);\n    } catch (error) {\n      console.error(\"Error generating CSV template:\", error);\n      res.status(500).json({ message: \"Failed to generate CSV template\" });\n    }\n  });\n\n  // Admin endpoint to seed example leads for testing\n  app.post('/api/admin/seed-leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Create example leads for this user\n      for (const leadData of exampleLeads) {\n        await storage.createLead({ ...leadData, userId });\n      }\n      \n      res.json({ message: `${exampleLeads.length} example leads created successfully` });\n    } catch (error) {\n      console.error(\"Error seeding leads:\", error);\n      res.status(500).json({ message: \"Failed to seed leads\" });\n    }\n  });\n\n  // Route pour annuler l'abonnement\n  app.post('/api/cancel-subscription', isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { reason, userEmail, userName } = req.body;\n      \n      console.log(`🚫 Demande d'annulation d'abonnement pour ${userId}: ${reason}`);\n      \n      // Downgrade vers le plan gratuit\n      const updatedUser = await storage.updateUserPlan(userId, 'free', false);\n      \n      // Envoyer email avec la raison de résiliation\n      await sendCancellationNotification(userEmail, userName, reason);\n      \n      // Log de la raison pour analyse (en production, sauvegarder en base)\n      console.log(`📝 Raison d'annulation: \"${reason}\"`);\n      \n      res.json({ \n        success: true, \n        message: \"Abonnement annulé avec succès\",\n        user: updatedUser \n      });\n    } catch (error) {\n      console.error('Error cancelling subscription:', error);\n      res.status(500).json({ message: 'Erreur lors de l\\'annulation' });\n    }\n  });\n\n  // Fonction pour envoyer la notification de résiliation\n  async function sendCancellationNotification(userEmail: string, userName: string, reason: string) {\n    try {\n      // Pour le moment, on log simplement - en production, utiliser un service d'email\n      const adminEmail = 'contact@leadpilot.com'; // Tu peux changer cette adresse\n      \n      console.log(`\n📧 NOTIFICATION DE RÉSILIATION\n----------------------------------------\nDe: ${userName} (${userEmail})\nDate: ${new Date().toLocaleString('fr-FR')}\nRaison: ${reason}\n\nUtilisateur ID: ${userEmail}\nEnvoyé à: ${adminEmail}\n----------------------------------------\n      `);\n      \n      // TODO: Intégrer un service d'email comme SendGrid, Mailgun ou SMTP\n      // await emailService.send({\n      //   to: adminEmail,\n      //   subject: `Résiliation d'abonnement - ${userName}`,\n      //   text: `L'utilisateur ${userName} (${userEmail}) a résilié son abonnement.\\n\\nRaison: ${reason}`\n      // });\n      \n    } catch (error) {\n      console.error('Erreur envoi email résiliation:', error);\n      // Ne pas faire échouer la résiliation si l'email ne part pas\n    }\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// This function is now replaced by seedDatabase() from seed-data.ts\n","size_bytes":32516},"server/storage.ts":{"content":"import {\n  users,\n  templates,\n  leads,\n  campaigns,\n  campaignEmails,\n  sequences,\n  bookings,\n  customEmails,\n  type User,\n  type UpsertUser,\n  type Template,\n  type InsertTemplate,\n  type Lead,\n  type InsertLead,\n  type Campaign,\n  type InsertCampaign,\n  type CampaignEmail,\n  type Sequence,\n  type InsertSequence,\n  type Booking,\n  type InsertBooking,\n  type CustomEmail,\n  type InsertCustomEmail,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, count, sql, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserPlan(userId: string, plan: string, isYearly?: boolean): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeInfo: { stripeCustomerId?: string; stripeSubscriptionId?: string | null }): Promise<void>;\n  \n  // Template operations\n  getTemplates(): Promise<Template[]>;\n  getTemplatesByPlan(plan: string): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(templateData: any): Promise<Template>;\n  updateTemplateUsage(id: string): Promise<void>;\n  updateTemplate(id: string, data: { subject?: string; content?: string }): Promise<void>;\n  generateAIVariation(template: Template): Promise<{ subject: string; content: string }>;\n  deleteCampaign(id: string): Promise<void>;\n  \n  // Custom email operations\n  getCustomEmails(userId: string): Promise<CustomEmail[]>;\n  createCustomEmail(userId: string, emailData: { name: string; subject: string; content: string; baseTemplateId?: string }): Promise<CustomEmail>;\n  updateCustomEmail(id: string, data: { name?: string; subject?: string; content?: string }): Promise<void>;\n  deleteCustomEmail(id: string): Promise<void>;\n  generateContentVariation(content: string): Promise<string>;\n  \n  // Lead operations\n  getLeads(userId: string): Promise<Lead[]>;\n  getLead(id: string, userId: string): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: string, userId: string, updates: Partial<Lead>): Promise<Lead | undefined>;\n  deleteLead(id: string, userId: string): Promise<boolean>;\n  getLeadsCount(userId: string): Promise<number>;\n  \n  // Campaign operations\n  getCampaigns(userId: string): Promise<Campaign[]>;\n  getCampaign(id: string, userId: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  getCampaignEmails(campaignId: string): Promise<CampaignEmail[]>;\n  \n  // Sequence operations\n  getSequences(userId: string): Promise<Sequence[]>;\n  createSequence(sequence: InsertSequence): Promise<Sequence>;\n  \n  // Booking operations\n  getBookings(userId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  deleteBooking(bookingId: string, userId: string): Promise<void>;\n  updateBookingConversion(bookingId: string, userId: string, conversionStatus: string): Promise<void>;\n  \n  // Analytics\n  getUserStats(userId: string): Promise<{\n    leadsGenerated: number;\n    emailsSent: number;\n    openRate: number;\n    meetingsBooked: number;\n  }>;\n\n  // OAuth email operations\n  updateUserOAuthTokens(userId: string, oauthData: {\n    provider: 'google' | 'microsoft';\n    accessToken: string;\n    refreshToken: string;\n    emailAddress: string;\n  }): Promise<void>;\n  disconnectOAuthProvider(userId: string, provider: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Méthodes Stripe\n  async updateUserStripeInfo(userId: string, stripeData: { \n    stripeCustomerId?: string; \n    stripeSubscriptionId?: string | null; \n  }): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        ...stripeData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async getUserByStripeCustomerId(customerId: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.stripeCustomerId, customerId));\n    return user;\n  }\n\n  async updateUserPlan(userId: string, plan: string, isYearly: boolean = false): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        plan,\n        updatedAt: new Date(),\n        // Réinitialiser les quotas mensuels lors du changement de plan\n        leadsUsed: 0,\n        aiVariationsUsed: 0,\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    console.log(`📊 Plan utilisateur ${userId} mis à jour: ${plan} (${isYearly ? 'annuel' : 'mensuel'}), quotas réinitialisés`);\n    return user;\n  }\n\n  // Template operations\n  async getTemplates(): Promise<Template[]> {\n    return await db.select().from(templates).orderBy(templates.createdAt);\n  }\n\n  async createTemplate(templateData: any): Promise<Template> {\n    const [template] = await db\n      .insert(templates)\n      .values(templateData)\n      .returning();\n    return template;\n  }\n\n  async getTemplatesByPlan(plan: string): Promise<Template[]> {\n    const planHierarchy = {\n      free: ['free'],\n      starter: ['free', 'starter'],\n      pro: ['free', 'starter', 'pro'],\n      growth: ['free', 'starter', 'pro', 'growth']\n    };\n    \n    const allowedPlans = planHierarchy[plan as keyof typeof planHierarchy] || ['free'];\n    \n    if (allowedPlans.length === 0) {\n      return [];\n    }\n    \n    return await db\n      .select()\n      .from(templates)\n      .where(inArray(templates.plan, allowedPlans))\n      .orderBy(templates.createdAt);\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, id));\n    return template;\n  }\n\n  async updateTemplateUsage(id: string): Promise<void> {\n    await db\n      .update(templates)\n      .set({ timesUsed: sql`${templates.timesUsed} + 1` })\n      .where(eq(templates.id, id));\n  }\n\n  async updateTemplate(id: string, data: { subject?: string; content?: string }): Promise<void> {\n    await db\n      .update(templates)\n      .set(data)\n      .where(eq(templates.id, id));\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    await db.delete(templates).where(eq(templates.id, id));\n  }\n\n  // Vérifier les quotas de variations IA\n  async checkVariationQuota(userId: string): Promise<{ canGenerate: boolean; remainingVariations: number; monthlyLimit: number }> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    // Quotas par plan\n    const variationLimits = {\n      free: 5,\n      starter: 100,\n      pro: 300,\n      growth: 1000\n    };\n\n    const monthlyLimit = variationLimits[user.plan as keyof typeof variationLimits] || 3;\n    \n    // Calculer les variations utilisées ce mois\n    const startOfMonth = new Date();\n    startOfMonth.setDate(1);\n    startOfMonth.setHours(0, 0, 0, 0);\n\n    const variationsThisMonth = user.aiVariationsUsed || 0;\n    const remainingVariations = Math.max(0, monthlyLimit - variationsThisMonth);\n\n    return {\n      canGenerate: remainingVariations > 0,\n      remainingVariations,\n      monthlyLimit\n    };\n  }\n\n  // Incrémenter le compteur de variations utilisées\n  async incrementVariationUsage(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        aiVariationsUsed: sql`${users.aiVariationsUsed} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async generateAIVariation(template: Template): Promise<{ subject: string; content: string }> {\n    try {\n      // Fallback direct avec variations substantielles (OpenAI sera ajouté plus tard)\n      return {\n        subject: this.generateSubjectVariation(template.subject),\n        content: await this.generateContentVariation(template.content)\n      };\n    } catch (error) {\n      console.error(\"Error generating variation:\", error);\n      // Fallback simple\n      return {\n        subject: template.subject + \" - Version alternative\",\n        content: template.content.replace(\"Bonjour\", \"Salut\").replace(\"vous\", \"tu\")\n      };\n    }\n  }\n\n  private generateSubjectVariation(originalSubject: string): string {\n    const variations = [\n      originalSubject.replace(/Bonjour/gi, \"Salutations\")\n        .replace(/votre/gi, \"votre organisation\")\n        .replace(/entreprise/gi, \"société\")\n        .replace(/découvrez/gi, \"explorez\")\n        .replace(/opportunité/gi, \"possibilité\"),\n      \n      originalSubject.replace(/\\b(\\w+)\\b/g, (match) => {\n        const synonyms: { [key: string]: string } = {\n          'bonjour': 'salut',\n          'collaboration': 'partenariat',\n          'découvrir': 'explorer',\n          'opportunité': 'occasion',\n          'solution': 'approche',\n          'développer': 'améliorer',\n          'croissance': 'expansion'\n        };\n        return synonyms[match.toLowerCase()] || match;\n      }),\n      \n      originalSubject + \" - Proposition personnalisée\"\n    ];\n    \n    return variations[Math.floor(Math.random() * variations.length)];\n  }\n\n  async generateContentVariation(originalContent: string, userId?: string): Promise<string> {\n    // Récupérer l'historique des variations pour éviter les doublons\n    let variationHistory: string[] = [];\n    if (userId) {\n      const user = await this.getUser(userId);\n      variationHistory = (user as any)?.variationHistory || [];\n    }\n\n    let result = originalContent;\n    let attempts = 0;\n    const maxAttempts = 20;\n\n    // Générer une variation unique\n    do {\n      // Choisir un style au hasard et l'appliquer DIRECTEMENT sur l'original\n      const styleIndex = Math.floor(Math.random() * 6);\n      \n      switch (styleIndex) {\n        case 0:\n          result = this.applyProtocolStyle(originalContent);\n          break;\n        case 1:\n          result = this.applyModernStyle(originalContent);\n          break;\n        case 2:\n          result = this.applyCommercialStyle(originalContent);\n          break;\n        case 3:\n          result = this.applyWarmStyle(originalContent);\n          break;\n        case 4:\n          result = this.applyTechnicalStyle(originalContent);\n          break;\n        case 5:\n          result = this.applyCreativeStyle(originalContent);\n          break;\n      }\n      \n      // Ajouter de la randomisation supplémentaire basée sur le timestamp\n      const timeBasedSeed = Date.now() % 8;\n      result = this.addTimeBasedVariations(result, timeBasedSeed);\n      \n      attempts++;\n    } while (variationHistory.includes(result) && attempts < maxAttempts);\n\n    // Préserver EXACTEMENT les sauts de ligne et espaces originaux\n    result = this.preserveExactFormatting(originalContent, result);\n    \n    // Stocker dans l'historique si userId fourni\n    if (userId) {\n      const updatedHistory = [...variationHistory, result].slice(-100); // Garder les 100 dernières\n      await db.update(users)\n        .set({ variationHistory: updatedHistory })\n        .where(eq(users.id, userId));\n    }\n    \n    return result;\n  }\n\n  private addTimeBasedVariations(text: string, seed: number): string {\n    // Variations supplémentaires qui transforment plus de contenu\n    const additionalVariations = [\n      (t: string) => t\n        .replace(/\\bexcellent\\b/gi, 'remarquable')\n        .replace(/\\bmerci\\b/gi, 'mille mercis')\n        .replace(/\\brapide\\b/gi, 'express')\n        .replace(/\\bfacile\\b/gi, 'simple')\n        .replace(/\\befficace\\b/gi, 'performant'),\n      (t: string) => t\n        .replace(/\\bparfait\\b/gi, 'idéal')\n        .replace(/\\bmerci\\b/gi, 'un grand merci')\n        .replace(/\\brapide\\b/gi, 'prompt')\n        .replace(/\\bfacile\\b/gi, 'aisé')\n        .replace(/\\befficace\\b/gi, 'redoutable'),\n      (t: string) => t\n        .replace(/\\bcontacter\\b/gi, 'joindre')\n        .replace(/\\bmerci\\b/gi, 'toute ma gratitude')\n        .replace(/\\brapide\\b/gi, 'véloce')\n        .replace(/\\bfacile\\b/gi, 'fluide')\n        .replace(/\\befficace\\b/gi, 'optimal'),\n      (t: string) => t\n        .replace(/\\béchanger\\b/gi, 'collaborer')\n        .replace(/\\bmerci\\b/gi, 'ma reconnaissance')\n        .replace(/\\brapide\\b/gi, 'immédiat')\n        .replace(/\\bfacile\\b/gi, 'accessible')\n        .replace(/\\befficace\\b/gi, 'productif'),\n      (t: string) => t\n        .replace(/\\brencontrer\\b/gi, 'nous voir')\n        .replace(/\\bmerci\\b/gi, 'mes remerciements')\n        .replace(/\\brapide\\b/gi, 'instantané')\n        .replace(/\\bfacile\\b/gi, 'évident')\n        .replace(/\\befficace\\b/gi, 'puissant'),\n      (t: string) => t\n        .replace(/\\bproposer\\b/gi, 'offrir')\n        .replace(/\\bmerci\\b/gi, 'ma sincère gratitude')\n        .replace(/\\brapide\\b/gi, 'fulgurant')\n        .replace(/\\bfacile\\b/gi, 'intuitif')\n        .replace(/\\befficace\\b/gi, 'remarquable'),\n      (t: string) => t\n        .replace(/\\bprésenter\\b/gi, 'exposer')\n        .replace(/\\bmerci\\b/gi, 'toute ma considération')\n        .replace(/\\brapide\\b/gi, 'ultra-rapide')\n        .replace(/\\bfacile\\b/gi, 'sans effort')\n        .replace(/\\befficace\\b/gi, 'extraordinaire'),\n      (t: string) => t\n        .replace(/\\bdiscuter\\b/gi, 'converser')\n        .replace(/\\bmerci\\b/gi, 'mes plus vifs remerciements')\n        .replace(/\\brapide\\b/gi, 'éclair')\n        .replace(/\\bfacile\\b/gi, 'naturel')\n        .replace(/\\befficace\\b/gi, 'incroyable')\n    ];\n\n    const variationIndex = seed % additionalVariations.length;\n    return additionalVariations[variationIndex](text);\n  }\n\n  private applyProtocolStyle(text: string): string {\n    let result = text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Madame, Monsieur\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'ai l'honneur de vous présenter mes respects.\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"j'ai l'honneur de solliciter votre attention\")\n      .replace(/\\bsolution\\b/gi, \"méthodologie\")\n      .replace(/\\bentreprise\\b/gi, \"organisation\")\n      .replace(/\\baméliorer\\b/gi, \"perfectionner\")\n      .replace(/\\bdévelopper\\b/gi, \"optimiser\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"Veuillez agréer, Madame, Monsieur, l'assurance de ma haute considération.\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"Dans l'attente respectueuse de votre retour.\")\n      .replace(/\\bdiscuter\\b/gi, \"échanger\")\n      .replace(/\\brencontrer\\b/gi, \"avoir l'honneur de vous recevoir\");\n    \n    // Nettoyage final pour éviter les doublons\n    result = result\n      .replace(/je me permets de me permets de/gi, \"je me permets de\")\n      .replace(/votre honorable éminente personne/gi, \"vous\")\n      .replace(/votre éminente personne/gi, \"vous\")\n      .replace(/notre respectueuse distinguée/gi, \"notre\")\n      .replace(/notre distinguée respectueuse/gi, \"notre\");\n    \n    return result;\n  }\n\n  private applyModernStyle(text: string): string {\n    return text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Salut\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'espère que tout va bien !\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"je vous contacte\")\n      .replace(/\\bsolution\\b/gi, \"appli\")\n      .replace(/\\bentreprise\\b/gi, \"boîte\")\n      .replace(/\\baméliorer\\b/gi, \"booster\")\n      .replace(/\\bdévelopper\\b/gi, \"améliorer\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"À bientôt !\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"Hâte de vous lire !\")\n      .replace(/\\bdiscuter\\b/gi, \"parler\")\n      .replace(/\\brencontrer\\b/gi, \"voir\");\n  }\n\n  private applyCommercialStyle(text: string): string {\n    return text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Excellente journée\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'espère que vos projets connaissent un succès retentissant.\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"je me tourne vers vous avec un projet ambitieux\")\n      .replace(/\\bsolution\\b/gi, \"opportunité\")\n      .replace(/\\bentreprise\\b/gi, \"leader\")\n      .replace(/\\baméliorer\\b/gi, \"propulser\")\n      .replace(/\\bdévelopper\\b/gi, \"révolutionner\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"Impatient de collaborer !\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"Ensemble vers le succès !\")\n      .replace(/\\bdiscuter\\b/gi, \"explorer\")\n      .replace(/\\brencontrer\\b/gi, \"concrétiser\");\n  }\n\n  private applyWarmStyle(text: string): string {\n    return text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Belle journée à vous\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'espère de tout cœur que vous vous portez bien.\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"je prends un moment pour vous écrire\")\n      .replace(/\\bsolution\\b/gi, \"collaboration\")\n      .replace(/\\bentreprise\\b/gi, \"équipe\")\n      .replace(/\\baméliorer\\b/gi, \"accompagner\")\n      .replace(/\\bdévelopper\\b/gi, \"enrichir\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"Bien chaleureusement !\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"Au plaisir sincère !\")\n      .replace(/\\bdiscuter\\b/gi, \"échanger\")\n      .replace(/\\brencontrer\\b/gi, \"faire connaissance\");\n  }\n\n  private applyTechnicalStyle(text: string): string {\n    return text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Bonjour\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'espère que vos développements progressent bien.\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"je vous contacte concernant un projet\")\n      .replace(/\\bsolution\\b/gi, \"framework\")\n      .replace(/\\bentreprise\\b/gi, \"stack\")\n      .replace(/\\baméliorer\\b/gi, \"optimiser\")\n      .replace(/\\bdévelopper\\b/gi, \"implémenter\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"Cordialement.\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"En attente de retour.\")\n      .replace(/\\bdiscuter\\b/gi, \"analyser\")\n      .replace(/\\brencontrer\\b/gi, \"planifier\");\n  }\n\n  private applyCreativeStyle(text: string): string {\n    return text\n      .replace(/Bonjour\\s*[^,\\n]*/gi, \"Inspiration du jour\")\n      .replace(/j'espère que[^.]*\\./gi, \"j'espère que vos créations illuminent votre quotidien.\")\n      .replace(/je (vous )?écris|je (vous )?contacte|je prends contact/gi, \"je vous écris avec une idée créative\")\n      .replace(/\\bsolution\\b/gi, \"création\")\n      .replace(/\\bentreprise\\b/gi, \"univers\")\n      .replace(/\\baméliorer\\b/gi, \"sublimer\")\n      .replace(/\\bdévelopper\\b/gi, \"imaginer\")\n      .replace(/Cordialement[^.]*\\.?/gi, \"Créativement vôtre.\")\n      .replace(/À bientôt[^.]*\\.?/gi, \"Dans l'effervescence créative.\")\n      .replace(/\\bdiscuter\\b/gi, \"co-créer\")\n      .replace(/\\brencontrer\\b/gi, \"rêver ensemble\");\n  }\n\n  private preserveExactFormatting(original: string, transformed: string): string {\n    // Conserver EXACTEMENT la structure de l'original\n    const originalLines = original.split('\\n');\n    const transformedLines = transformed.split('\\n');\n    \n    // Reconstituer en gardant les sauts de ligne originaux\n    let result = '';\n    for (let i = 0; i < originalLines.length; i++) {\n      if (i < transformedLines.length) {\n        result += transformedLines[i];\n      } else {\n        result += originalLines[i]; // Fallback sur l'original\n      }\n      \n      if (i < originalLines.length - 1) {\n        result += '\\n'; // Préserver chaque saut de ligne\n      }\n    }\n    \n    return result\n      .replace(/,\\s*,/g, ',') // Virgules doubles\n      .replace(/\\.\\s*\\./g, '.') // Points doubles\n      .replace(/\\s+([,.;!?])/g, '$1'); // Espaces avant ponctuation\n  }\n\n  async deleteCampaign(id: string): Promise<void> {\n    await db.delete(campaigns).where(eq(campaigns.id, id));\n  }\n\n  // Custom email operations\n  async getCustomEmails(userId: string): Promise<CustomEmail[]> {\n    return await db.select().from(customEmails).where(eq(customEmails.userId, userId));\n  }\n\n  async createCustomEmail(userId: string, emailData: { name: string; subject: string; content: string; baseTemplateId?: string }): Promise<CustomEmail> {\n    const [customEmail] = await db\n      .insert(customEmails)\n      .values({\n        userId,\n        name: emailData.name,\n        subject: emailData.subject,\n        content: emailData.content,\n        baseTemplateId: emailData.baseTemplateId,\n      })\n      .returning();\n    return customEmail;\n  }\n\n  async updateCustomEmail(id: string, data: { name?: string; subject?: string; content?: string }): Promise<void> {\n    await db\n      .update(customEmails)\n      .set(data)\n      .where(eq(customEmails.id, id));\n  }\n\n  async deleteCustomEmail(id: string): Promise<void> {\n    await db.delete(customEmails).where(eq(customEmails.id, id));\n  }\n\n  // Lead operations\n  async getLeads(userId: string): Promise<Lead[]> {\n    return await db\n      .select()\n      .from(leads)\n      .where(eq(leads.userId, userId))\n      .orderBy(desc(leads.createdAt));\n  }\n\n  async getLead(id: string, userId: string): Promise<Lead | undefined> {\n    const [lead] = await db\n      .select()\n      .from(leads)\n      .where(and(eq(leads.id, id), eq(leads.userId, userId)));\n    return lead;\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values(lead).returning();\n    return newLead;\n  }\n\n  async updateLead(id: string, userId: string, updates: Partial<Lead>): Promise<Lead | undefined> {\n    const [updatedLead] = await db\n      .update(leads)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(and(eq(leads.id, id), eq(leads.userId, userId)))\n      .returning();\n    return updatedLead;\n  }\n\n  async deleteLead(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(leads)\n      .where(and(eq(leads.id, id), eq(leads.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getLeadsCount(userId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(leads)\n      .where(eq(leads.userId, userId));\n    return result.count;\n  }\n\n  // Campaign operations\n  async getCampaigns(userId: string): Promise<Campaign[]> {\n    return await db\n      .select()\n      .from(campaigns)\n      .where(eq(campaigns.userId, userId))\n      .orderBy(desc(campaigns.createdAt));\n  }\n\n  async getCampaignById(id: string): Promise<Campaign | undefined> {\n    const [campaign] = await db.select().from(campaigns).where(eq(campaigns.id, id));\n    return campaign;\n  }\n\n  async updateCampaign(id: string, updates: Partial<Campaign>): Promise<void> {\n    await db\n      .update(campaigns)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(campaigns.id, id));\n  }\n\n  async getLeadsByIds(leadIds: string[]): Promise<Lead[]> {\n    if (leadIds.length === 0) return [];\n    return await db\n      .select()\n      .from(leads)\n      .where(sql`${leads.id} = ANY(${leadIds})`);\n  }\n\n  async getCustomEmail(id: string): Promise<CustomEmail | undefined> {\n    const [email] = await db.select().from(customEmails).where(eq(customEmails.id, id));\n    return email;\n  }\n\n  async createCampaignEmail(campaignEmail: {\n    campaignId: string;\n    leadId: string;\n    subject: string;\n    content: string;\n    status: string;\n    sentAt: Date;\n  }): Promise<void> {\n    await db.insert(campaignEmails).values({\n      id: crypto.randomUUID(),\n      campaignId: campaignEmail.campaignId,\n      leadId: campaignEmail.leadId,\n      status: campaignEmail.status,\n      sentAt: campaignEmail.sentAt\n    });\n  }\n\n  async getCampaign(id: string, userId: string): Promise<Campaign | undefined> {\n    const [campaign] = await db\n      .select()\n      .from(campaigns)\n      .where(and(eq(campaigns.id, id), eq(campaigns.userId, userId)));\n    return campaign;\n  }\n\n  async createCampaign(campaign: InsertCampaign): Promise<Campaign> {\n    const [newCampaign] = await db.insert(campaigns).values(campaign).returning();\n    return newCampaign;\n  }\n\n  async getCampaignEmails(campaignId: string): Promise<CampaignEmail[]> {\n    return await db\n      .select()\n      .from(campaignEmails)\n      .where(eq(campaignEmails.campaignId, campaignId));\n  }\n\n  // Sequence operations\n  async getSequences(userId: string): Promise<Sequence[]> {\n    return await db\n      .select()\n      .from(sequences)\n      .where(eq(sequences.userId, userId))\n      .orderBy(desc(sequences.createdAt));\n  }\n\n  async createSequence(sequence: InsertSequence): Promise<Sequence> {\n    const [newSequence] = await db.insert(sequences).values(sequence).returning();\n    return newSequence;\n  }\n\n  // Booking operations\n  async getBookings(userId: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.startTime));\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db.insert(bookings).values(booking).returning();\n    return newBooking;\n  }\n\n  // Analytics\n  async getUserStats(userId: string): Promise<{\n    leadsGenerated: number;\n    emailsSent: number;\n    openRate: number;\n    meetingsBooked: number;\n  }> {\n    const [leadsCount] = await db\n      .select({ count: count() })\n      .from(leads)\n      .where(eq(leads.userId, userId));\n\n    const [emailsStats] = await db\n      .select({\n        sent: sql<number>`COALESCE(SUM(${campaigns.totalSent}), 0)`,\n        opened: sql<number>`COALESCE(SUM(${campaigns.totalOpened}), 0)`,\n      })\n      .from(campaigns)\n      .where(eq(campaigns.userId, userId));\n\n    const [bookingsCount] = await db\n      .select({ count: count() })\n      .from(bookings)\n      .where(eq(bookings.userId, userId));\n\n    const openRate = emailsStats.sent > 0 ? Math.round((emailsStats.opened / emailsStats.sent) * 100) : 0;\n\n    return {\n      leadsGenerated: leadsCount.count,\n      emailsSent: emailsStats.sent,\n      openRate,\n      meetingsBooked: bookingsCount.count,\n    };\n  }\n\n  // Analytics for user dashboard\n  async getAnalytics(userId: string): Promise<any> {\n    try {\n      // Get leads count for current month (UTC time, start of month)\n      const now = new Date();\n      const currentMonthStart = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), 1));\n\n      console.log(`Getting analytics for user ${userId}, month start: ${currentMonthStart.toISOString()}`);\n\n      const [leadsResult] = await db\n        .select({ count: sql<number>`count(*)::int` })\n        .from(leads)\n        .where(and(\n          eq(leads.userId, userId),\n          sql`${leads.createdAt} >= ${currentMonthStart}`\n        ));\n\n      const leadsThisMonth = leadsResult?.count || 0;\n      console.log(`Leads this month for user ${userId}: ${leadsThisMonth}`);\n\n      // Count emails sent (campaigns)\n      const [campaignsResult] = await db\n        .select({ count: sql<number>`count(*)::int` })\n        .from(campaigns)\n        .where(and(\n          eq(campaigns.userId, userId),\n          sql`${campaigns.createdAt} >= ${currentMonthStart}`\n        ));\n\n      const campaignsThisMonth = campaignsResult?.count || 0;\n\n      // Count bookings this month\n      const [bookingsResult] = await db\n        .select({ count: sql<number>`count(*)::int` })\n        .from(bookings)\n        .where(and(\n          eq(bookings.userId, userId),\n          sql`${bookings.createdAt} >= ${currentMonthStart}`\n        ));\n\n      const bookingsThisMonth = bookingsResult?.count || 0;\n\n      // Calculate average lead score\n      const [avgScoreResult] = await db\n        .select({ avgScore: sql<number>`coalesce(avg(${leads.aiScore}), 0)::int` })\n        .from(leads)\n        .where(and(\n          eq(leads.userId, userId),\n          sql`${leads.createdAt} >= ${currentMonthStart}`\n        ));\n\n      const avgScore = avgScoreResult?.avgScore || 0;\n\n      // Get user plan and calculate remaining leads\n      const user = await this.getUser(userId);\n      const planLimits = {\n        free: 5,\n        starter: 100,\n        pro: 400,\n        growth: 1500\n      };\n\n      const userPlan = user?.plan || 'free';\n      const monthlyLimit = planLimits[userPlan as keyof typeof planLimits] || 10;\n      const remainingLeads = Math.max(0, monthlyLimit - leadsThisMonth);\n\n      console.log(`User plan: ${userPlan}, monthly limit: ${monthlyLimit}, remaining: ${remainingLeads}`);\n\n      // Calculate realistic metrics based on actual activity\n      // Note: Conversion rates are 0% if no emails were sent\n      const emailsSent = campaignsThisMonth; // Each campaign = emails sent\n      const openRate = emailsSent > 0 ? 0 : 0; // No tracking system implemented yet\n      const clickRate = emailsSent > 0 ? 0 : 0; // No tracking system implemented yet\n      const responseRate = emailsSent > 0 ? 0 : 0; // No tracking system implemented yet\n      const meetingConversionRate = emailsSent > 0 ? Math.round((bookingsThisMonth / emailsSent) * 100) : 0;\n\n      return {\n        leadsGenerated: leadsThisMonth,\n        remainingLeads: remainingLeads,\n        userPlan: userPlan,\n        monthlyLimit: monthlyLimit,\n        emailsSent: emailsSent,\n        openRate: openRate,\n        clickRate: clickRate,\n        responseRate: responseRate,\n        meetingsBooked: bookingsThisMonth,\n        meetingConversionRate: meetingConversionRate,\n        avgScore: avgScore\n      };\n    } catch (error) {\n      console.error('Error getting analytics:', error);\n      return {\n        leadsGenerated: 0,\n        remainingLeads: 5,\n        userPlan: 'free',\n        monthlyLimit: 5,\n        emailsSent: 0,\n        openRate: 0,\n        clickRate: 0,\n        responseRate: 0,\n        meetingsBooked: 0,\n        meetingConversionRate: 0,\n        avgScore: 0\n      };\n    }\n  }\n  // OAuth email operations\n  async updateUserOAuthTokens(userId: string, oauthData: {\n    provider: 'google' | 'microsoft';\n    accessToken: string;\n    refreshToken: string;\n    emailAddress: string;\n  }): Promise<void> {\n    if (oauthData.provider === 'google') {\n      await db\n        .update(users)\n        .set({\n          googleEmailConnected: true,\n          googleEmailToken: oauthData.accessToken,\n          googleRefreshToken: oauthData.refreshToken,\n          connectedEmailAddress: oauthData.emailAddress,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (oauthData.provider === 'microsoft') {\n      await db\n        .update(users)\n        .set({\n          outlookEmailConnected: true,\n          outlookEmailToken: oauthData.accessToken,\n          outlookRefreshToken: oauthData.refreshToken,\n          connectedEmailAddress: oauthData.emailAddress,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async disconnectOAuthProvider(userId: string, provider: string): Promise<void> {\n    if (provider === 'google') {\n      await db\n        .update(users)\n        .set({\n          googleEmailConnected: false,\n          googleEmailToken: null,\n          googleRefreshToken: null,\n          connectedEmailAddress: null,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    } else if (provider === 'microsoft') {\n      await db\n        .update(users)\n        .set({\n          outlookEmailConnected: false,\n          outlookEmailToken: null,\n          outlookRefreshToken: null,\n          connectedEmailAddress: null,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  async deleteBooking(bookingId: string, userId: string): Promise<void> {\n    await db\n      .delete(bookings)\n      .where(and(eq(bookings.id, bookingId), eq(bookings.userId, userId)));\n  }\n\n  async updateBookingConversion(bookingId: string, userId: string, conversionStatus: string): Promise<void> {\n    await db\n      .update(bookings)\n      .set({ conversionStatus, status: 'completed' })\n      .where(and(eq(bookings.id, bookingId), eq(bookings.userId, userId)));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32275},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  boolean,\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  plan: varchar(\"plan\").notNull().default(\"free\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  leadsUsed: integer(\"leads_used\").notNull().default(0),\n  aiVariationsUsed: integer(\"ai_variations_used\").notNull().default(0),\n  variationHistory: jsonb(\"variation_history\").default([]),\n  // OAuth email connections\n  googleEmailConnected: boolean(\"google_email_connected\").default(false),\n  googleEmailToken: text(\"google_email_token\"),\n  googleRefreshToken: text(\"google_refresh_token\"),\n  outlookEmailConnected: boolean(\"outlook_email_connected\").default(false),\n  outlookEmailToken: text(\"outlook_email_token\"),\n  outlookRefreshToken: text(\"outlook_refresh_token\"),\n  connectedEmailAddress: varchar(\"connected_email_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email templates\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  plan: varchar(\"plan\").notNull(),\n  category: varchar(\"category\"),\n  variables: jsonb(\"variables\"),\n  timesUsed: integer(\"times_used\").notNull().default(0),\n  openRate: integer(\"open_rate\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Leads\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  company: varchar(\"company\").notNull(),\n  sector: varchar(\"sector\"),\n  position: varchar(\"position\"),\n  aiScore: integer(\"ai_score\"),\n  status: varchar(\"status\").notNull().default(\"new\"),\n  source: varchar(\"source\").default(\"external\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Campaigns\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  emailId: varchar(\"email_id\").notNull().references(() => customEmails.id),\n  leadTargets: varchar(\"lead_targets\").notNull(), // Comma-separated lead IDs\n  status: varchar(\"status\").notNull().default(\"draft\"),\n  totalSent: integer(\"total_sent\").notNull().default(0),\n  totalOpened: integer(\"total_opened\").notNull().default(0),\n  totalClicked: integer(\"total_clicked\").notNull().default(0),\n  totalReplied: integer(\"total_replied\").notNull().default(0),\n  scheduledAt: timestamp(\"scheduled_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Campaign emails\nexport const campaignEmails = pgTable(\"campaign_emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").notNull().references(() => campaigns.id),\n  leadId: varchar(\"lead_id\").notNull().references(() => leads.id),\n  status: varchar(\"status\").notNull().default(\"pending\"),\n  sentAt: timestamp(\"sent_at\"),\n  openedAt: timestamp(\"opened_at\"),\n  clickedAt: timestamp(\"clicked_at\"),\n  repliedAt: timestamp(\"replied_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email sequences (ancienne version - à supprimer plus tard)\nexport const oldSequences = pgTable(\"old_sequences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  status: varchar(\"status\").notNull().default(\"active\"),\n  steps: jsonb(\"steps\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Calendar bookings\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  leadId: varchar(\"lead_id\").references(() => leads.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  status: varchar(\"status\").notNull().default(\"scheduled\"),\n  meetingType: varchar(\"meeting_type\").default(\"video\"),\n  conversionStatus: varchar(\"conversion_status\"), // converted, not_converted, pending\n  contactName: varchar(\"contact_name\"),\n  contactEmail: varchar(\"contact_email\"),\n  contactPhone: varchar(\"contact_phone\"),\n  company: varchar(\"company\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Custom emails created by users from base templates\nexport const customEmails = pgTable(\"custom_emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  baseTemplateId: varchar(\"base_template_id\"), // référence au template original\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type CustomEmail = typeof customEmails.$inferSelect;\nexport type InsertCustomEmail = typeof customEmails.$inferInsert;\nexport type InsertTemplate = typeof templates.$inferInsert;\nexport type Template = typeof templates.$inferSelect;\nexport type InsertLead = typeof leads.$inferInsert;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertCampaign = typeof campaigns.$inferInsert;\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type CampaignEmail = typeof campaignEmails.$inferSelect;\nexport type InsertBooking = typeof bookings.$inferInsert;\nexport type Booking = typeof bookings.$inferSelect;\n\n// Zod schemas\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n}).extend({\n  startTime: z.string().transform(str => new Date(str)),\n  endTime: z.string().transform(str => new Date(str))\n});\n\n// Sequences table - Séquences automatisées multi-étapes\nexport const sequences = pgTable(\"sequences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSequenceSchema = createInsertSchema(sequences).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Sequence = typeof sequences.$inferSelect;\nexport type InsertSequence = z.infer<typeof insertSequenceSchema>;\n\n// Sequence Steps table - Étapes individuelles des séquences\nexport const sequenceSteps = pgTable(\"sequence_steps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sequenceId: varchar(\"sequence_id\").notNull().references(() => sequences.id, { onDelete: \"cascade\" }),\n  stepNumber: integer(\"step_number\").notNull(),\n  name: varchar(\"name\").notNull(),\n  emailId: varchar(\"email_id\").references(() => customEmails.id),\n  delayDays: integer(\"delay_days\").notNull().default(0),\n  delayHours: integer(\"delay_hours\").notNull().default(0),\n  conditions: text(\"conditions\"), // JSON pour les conditions d'envoi\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertSequenceStepSchema = createInsertSchema(sequenceSteps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type SequenceStep = typeof sequenceSteps.$inferSelect;\nexport type InsertSequenceStep = z.infer<typeof insertSequenceStepSchema>;\n\n// Sequence Enrollments table - Leads inscrits dans les séquences\nexport const sequenceEnrollments = pgTable(\"sequence_enrollments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sequenceId: varchar(\"sequence_id\").notNull().references(() => sequences.id, { onDelete: \"cascade\" }),\n  leadId: varchar(\"lead_id\").notNull().references(() => leads.id, { onDelete: \"cascade\" }),\n  currentStep: integer(\"current_step\").notNull().default(1),\n  status: varchar(\"status\").notNull().default(\"active\"), // active, paused, completed, opted_out\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  lastEmailSent: timestamp(\"last_email_sent\"),\n  nextEmailScheduled: timestamp(\"next_email_scheduled\"),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertSequenceEnrollmentSchema = createInsertSchema(sequenceEnrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport type SequenceEnrollment = typeof sequenceEnrollments.$inferSelect;\nexport type InsertSequenceEnrollment = z.infer<typeof insertSequenceEnrollmentSchema>;\n","size_bytes":10153},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport UpgradePage from \"@/pages/upgrade\";\nimport PaymentSuccess from \"@/pages/payment-success\";\nimport TestPlans from \"@/pages/test-plans\";\nimport BookMeeting from \"@/pages/book-meeting\";\nimport CancelSubscription from \"@/pages/cancel-subscription\";\nimport SuccessFreeMonthly from \"@/pages/success-free-monthly\";\nimport SuccessStarterMonthly from \"@/pages/success-starter-monthly\";\nimport SuccessStarterYearly from \"@/pages/success-starter-yearly\";\nimport SuccessProMonthly from \"@/pages/success-pro-monthly\";\nimport SuccessProYearly from \"@/pages/success-pro-yearly\";\nimport SuccessGrowthMonthly from \"@/pages/success-growth-monthly\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/signup\" component={Landing} />\n          <Route path=\"/register\" component={Landing} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard/*\" component={Dashboard} />\n          <Route path=\"/upgrade\" component={UpgradePage} />\n          <Route path=\"/payment-success\" component={PaymentSuccess} />\n          <Route path=\"/test-plans\" component={TestPlans} />\n          <Route path=\"/book-meeting\" component={BookMeeting} />\n          <Route path=\"/cancel-subscription\" component={CancelSubscription} />\n          <Route path=\"/success/free-monthly\" component={SuccessFreeMonthly} />\n          <Route path=\"/success/starter-monthly\" component={SuccessStarterMonthly} />\n          <Route path=\"/success/starter-yearly\" component={SuccessStarterYearly} />\n          <Route path=\"/success/pro-monthly\" component={SuccessProMonthly} />\n          <Route path=\"/success/pro-yearly\" component={SuccessProYearly} />\n          <Route path=\"/success/growth-monthly\" component={SuccessGrowthMonthly} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2645},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer utilities {\n  .bg-primary\\/10 {\n    background-color: hsl(var(--primary) / 0.1);\n  }\n}\n\n:root {\n  --background: hsl(220, 30%, 8%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(220, 27%, 15%);\n  --muted-foreground: hsl(215, 16%, 85%);\n  --popover: hsl(220, 27%, 12%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(220, 27%, 12%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 27%, 20%);\n  --input: hsl(220, 27%, 15%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 27%, 15%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --accent: hsl(220, 27%, 15%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* LeadPilot specific colors */\n  --leadpilot-primary: hsl(207, 90%, 54%);\n  --leadpilot-primary-hover: hsl(207, 90%, 48%);\n  --leadpilot-secondary: hsl(210, 40%, 96%);\n  --leadpilot-success: hsl(142, 76%, 36%);\n  --leadpilot-warning: hsl(45, 93%, 47%);\n  --leadpilot-error: hsl(0, 84%, 60%);\n  --leadpilot-gray-50: hsl(210, 40%, 98%);\n  --leadpilot-gray-100: hsl(210, 40%, 96%);\n  --leadpilot-gray-200: hsl(214, 32%, 91%);\n  --leadpilot-gray-300: hsl(213, 27%, 84%);\n  --leadpilot-gray-400: hsl(215, 20%, 65%);\n  --leadpilot-gray-500: hsl(215, 16%, 47%);\n  --leadpilot-gray-600: hsl(215, 19%, 35%);\n  --leadpilot-gray-700: hsl(215, 25%, 27%);\n  --leadpilot-gray-800: hsl(217, 33%, 17%);\n  --leadpilot-gray-900: hsl(222, 84%, 5%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 80%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--muted-foreground));\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--border));\n  }\n}\n\n@layer components {\n  /* LeadPilot specific component styles */\n  .leadpilot-gradient {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(207, 90%, 48%) 100%);\n  }\n\n  .leadpilot-card {\n    @apply bg-card rounded-xl shadow-sm border border-border hover:shadow-lg transition-shadow;\n  }\n\n  .leadpilot-btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n\n  .leadpilot-btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/80 px-4 py-2 rounded-lg font-medium transition-colors;\n  }\n\n  /* Status indicators */\n  .status-indicator {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n\n  .status-new {\n    @apply bg-muted text-muted-foreground;\n  }\n\n  .status-contacted {\n    @apply bg-blue-100 text-blue-800;\n  }\n\n  .status-qualified {\n    @apply bg-emerald-100 text-emerald-800;\n  }\n\n  .status-converted {\n    @apply bg-purple-100 text-purple-800;\n  }\n\n  /* Plan badges */\n  .plan-badge {\n    @apply inline-flex items-center px-2 py-1 rounded text-xs font-semibold;\n  }\n\n  .plan-free {\n    @apply bg-muted text-muted-foreground;\n  }\n\n  .plan-starter {\n    @apply bg-blue-100 text-blue-700;\n  }\n\n  .plan-pro {\n    @apply bg-purple-100 text-purple-700;\n  }\n\n  .plan-growth {\n    @apply bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700;\n  }\n\n  /* Navigation */\n  .nav-link {\n    @apply flex items-center px-3 py-2 rounded-lg text-muted-foreground hover:bg-muted transition-colors;\n  }\n\n  .nav-link.active {\n    @apply text-primary bg-primary/10;\n  }\n\n  /* Loading states */\n  .loading-skeleton {\n    @apply animate-pulse bg-muted rounded;\n  }\n\n  /* Form elements */\n  .form-input {\n    @apply w-full border border-border rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent bg-input text-foreground;\n  }\n\n  .form-label {\n    @apply block text-sm font-medium text-foreground mb-2;\n  }\n\n  /* Progress bars */\n  .progress-bar {\n    @apply w-full bg-muted rounded-full h-2;\n  }\n\n  .progress-fill {\n    @apply h-2 rounded-full transition-all duration-300;\n  }\n\n  /* Stats cards */\n  .stats-card {\n    @apply bg-card p-6 rounded-xl shadow-sm border border-border;\n  }\n\n  .stats-icon {\n    @apply w-12 h-12 rounded-lg flex items-center justify-center;\n  }\n\n  /* Template cards */\n  .template-card {\n    @apply bg-card rounded-xl shadow-sm border border-border p-6 hover:shadow-lg transition-shadow;\n  }\n\n  .template-card.locked {\n    @apply opacity-60 cursor-not-allowed;\n  }\n\n  /* Campaign status */\n  .campaign-status {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n\n  .campaign-draft {\n    @apply bg-muted text-muted-foreground;\n  }\n\n  .campaign-sent {\n    @apply bg-emerald-100 text-emerald-800;\n  }\n\n  .campaign-scheduled {\n    @apply bg-blue-100 text-blue-800;\n  }\n\n  /* Responsive utilities */\n  @media (max-width: 768px) {\n    .mobile-hidden {\n      @apply hidden;\n    }\n    \n    .mobile-full {\n      @apply w-full;\n    }\n  }\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.animate-slide-in {\n  animation: slideIn 0.3s ease-out;\n}\n\n/* Focus states for accessibility */\n.focus-ring {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":6559},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/data/templates.ts":{"content":"export const EMAIL_TEMPLATES = [\n  // Free Plan Template\n  {\n    id: \"template-1\",\n    name: \"Template 1 – Découverte simple\",\n    subject: \"Une idée rapide pour [Entreprise]\",\n    content: `Bonjour [Prénom],\n\nNous aidons des entreprises comme [Entreprise] à résoudre [Problème] rapidement grâce à [Produit].\nSouhaitez-vous en discuter 5 minutes cette semaine ?\n\n[Signature]`,\n    plan: \"free\",\n    category: \"discovery\",\n    variables: [\"Prénom\", \"Entreprise\", \"Problème\", \"Produit\", \"Signature\"]\n  },\n\n  // Starter Plan Templates\n  {\n    id: \"template-2\",\n    name: \"Template 2 – Problème → Solution\",\n    subject: \"[Entreprise] et [Problème] ?\",\n    content: `Bonjour [Prénom],\n\nJ'ai remarqué que [Entreprise] rencontre souvent [Problème]. Nous aidons des entreprises similaires à résoudre ce problème en [délai] sans [contrainte].\n\nSouhaitez-vous qu'on en parle 10 min cette semaine ?\n\n[Signature]`,\n    plan: \"starter\",\n    category: \"problem-solution\",\n    variables: [\"Prénom\", \"Entreprise\", \"Problème\", \"délai\", \"contrainte\", \"Signature\"]\n  },\n  {\n    id: \"template-3\",\n    name: \"Template 3 – Question simple\",\n    subject: \"Vous gérez comment [Problème] ?\",\n    content: `Bonjour [Prénom],\n\nComment gérez-vous [Problème] actuellement chez [Entreprise] ?\nNous aidons [Entreprise similaire] à [résultat obtenu].\nIntéressé pour en discuter ?\n\n[Signature]`,\n    plan: \"starter\",\n    category: \"question\",\n    variables: [\"Prénom\", \"Problème\", \"Entreprise\", \"Entreprise similaire\", \"résultat obtenu\", \"Signature\"]\n  },\n  {\n    id: \"template-4\",\n    name: \"Template 4 – Chiffre choc\",\n    subject: \"73% des entreprises comme [Entreprise]…\",\n    content: `Bonjour [Prénom],\n\n73% des entreprises dans [secteur] rencontrent [Problème].\n[Produit] permet de réduire ce problème de [X%] en [temps].\nVous voulez en parler ?\n\n[Signature]`,\n    plan: \"starter\",\n    category: \"statistics\",\n    variables: [\"Prénom\", \"secteur\", \"Problème\", \"Produit\", \"X%\", \"temps\", \"Signature\"]\n  },\n  {\n    id: \"template-5\",\n    name: \"Template 5 – Email court\",\n    subject: \"Une idée pour [Entreprise]\",\n    content: `Bonjour [Prénom],\nOn aide [Entreprise similaire] à [résultat] en [temps].\nÇa vous tente d'en discuter ?\n\n[Signature]`,\n    plan: \"starter\",\n    category: \"short\",\n    variables: [\"Prénom\", \"Entreprise similaire\", \"résultat\", \"temps\", \"Signature\"]\n  },\n  {\n    id: \"template-6\",\n    name: \"Template 6 – Petit rappel (follow-up)\",\n    subject: \"Petit rappel :)\",\n    content: `Bonjour [Prénom],\nJe reviens vers vous suite à mon précédent message.\nEst-ce que c'est pertinent pour [Entreprise] ?\n\n[Signature]`,\n    plan: \"starter\",\n    category: \"follow-up\",\n    variables: [\"Prénom\", \"Entreprise\", \"Signature\"]\n  },\n\n  // Pro Plan Templates\n  {\n    id: \"template-7\",\n    name: \"Template 7 – Social Proof\",\n    subject: \"Comment [Entreprise similaire] a résolu [Problème]\",\n    content: `Bonjour [Prénom],\n\nIl y a 3 mois, [Entreprise similaire] faisait face à [Problème].\nAvec [Produit], ils ont obtenu [résultat concret] en [temps].\n\nEst-ce que ça pourrait aussi aider [Entreprise] ?\n\n[Signature]`,\n    plan: \"pro\",\n    category: \"social-proof\",\n    variables: [\"Prénom\", \"Entreprise similaire\", \"Problème\", \"Produit\", \"résultat concret\", \"temps\", \"Entreprise\", \"Signature\"]\n  },\n  {\n    id: \"template-8\",\n    name: \"Template 8 – ROI orienté\",\n    subject: \"Économiser [X] heures / mois sur [Problème]\",\n    content: `Bonjour [Prénom],\n\nNos clients économisent en moyenne [X] heures / mois grâce à [Produit].\nVous pensez que ça pourrait intéresser [Entreprise] ?\n\n[Signature]`,\n    plan: \"pro\",\n    category: \"roi\",\n    variables: [\"Prénom\", \"X\", \"Problème\", \"Produit\", \"Entreprise\", \"Signature\"]\n  },\n  {\n    id: \"template-9\",\n    name: \"Template 9 – Urgence\",\n    subject: \"À faire avant [date]\",\n    content: `Bonjour [Prénom],\n\nCette solution peut résoudre [Problème] pour [Entreprise] avant [date].\nVoulez-vous qu'on en parle rapidement ?\n\n[Signature]`,\n    plan: \"pro\",\n    category: \"urgency\",\n    variables: [\"Prénom\", \"Problème\", \"Entreprise\", \"date\", \"Signature\"]\n  },\n  {\n    id: \"template-10\",\n    name: \"Template 10 – Follow-up bénéfice\",\n    subject: \"Gagner [Bénéfice] pour [Entreprise] ?\",\n    content: `Bonjour [Prénom],\n\nEn 2 phrases : [Produit] → [Bénéfice concret].\nVous pensez que ça vaut la peine d'en parler 5 minutes ?\n\n[Signature]`,\n    plan: \"pro\",\n    category: \"benefit\",\n    variables: [\"Prénom\", \"Bénéfice\", \"Entreprise\", \"Produit\", \"Bénéfice concret\", \"Signature\"]\n  },\n\n  // Growth Plan Templates (additional)\n  {\n    id: \"template-11\",\n    name: \"Template 11 – Version courte\",\n    subject: \"Une idée pour [Entreprise]\",\n    content: `Bonjour [Prénom],\nOn aide [Entreprise similaire] à [résultat] en [temps].\nIntéressé ?\n\n[Signature]`,\n    plan: \"growth\",\n    category: \"courte\",\n    variables: [\"Prénom\", \"Entreprise\", \"Entreprise similaire\", \"résultat\", \"temps\", \"Signature\"]\n  },\n  {\n    id: \"template-12\",\n    name: \"Template 12 – A/B test storytelling\",\n    subject: \"Comment [Entreprise similaire] a réussi\",\n    content: `Bonjour [Prénom],\n\nIl y a quelques mois, [Entreprise similaire] rencontrait [Problème].\nAvec [Produit], ils ont obtenu [résultat].\nÇa pourrait aussi marcher pour [Entreprise].\n\n[Signature]`,\n    plan: \"growth\",\n    category: \"storytelling\",\n    variables: [\"Prénom\", \"Entreprise similaire\", \"Problème\", \"Produit\", \"résultat\", \"Entreprise\", \"Signature\"]\n  }\n] as const;\n\nexport type EmailTemplate = typeof EMAIL_TEMPLATES[number];\n","size_bytes":5626},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/dashboard/sidebar\";\nimport Header from \"@/components/dashboard/header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport LeadsSection from \"@/components/dashboard/leads-section\";\nimport TemplatesSection from \"@/components/dashboard/templates-section\";\nimport CustomEmailsSection from \"@/components/dashboard/custom-emails-section\";\nimport CampaignsSection from \"@/components/dashboard/campaigns-section\";\nimport SequencesSection from \"@/components/dashboard/sequences-section\";\nimport CalendarSection from \"@/components/dashboard/calendar-section\";\nimport AnalyticsSection from \"@/components/dashboard/analytics-section\";\nimport SettingsSection from \"@/components/dashboard/settings-section\";\nimport UpgradeBanner from \"@/components/dashboard/upgrade-banner\";\nimport ClosingSection from \"@/components/dashboard/closing-section\";\n\nexport default function Dashboard() {\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  \n  // Récupération des données pour les activités récentes\n  const { data: leads = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leads\"],\n    enabled: !!user,\n  });\n  \n  const { data: campaigns = [] } = useQuery<any[]>({\n    queryKey: [\"/api/campaigns\"],\n    enabled: !!user,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const renderSection = () => {\n    switch (activeSection) {\n      case \"dashboard\":\n        return (\n          <div className=\"p-6\">\n            <UpgradeBanner />\n            <StatsCards />\n            <div className=\"grid lg:grid-cols-2 gap-6 mt-8\">\n              <div className=\"bg-card p-6 rounded-xl shadow-sm border border-border\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Activité Récente</h3>\n                <div className=\"space-y-4\">\n                  {Array.isArray(leads) && leads.length > 0 ? (\n                    <>\n                      {leads.slice(0, 2).map((lead: any, index: number) => (\n                        <div key={index} className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-emerald-100 rounded-full flex items-center justify-center\">\n                            <span className=\"text-emerald-600 text-sm\">+</span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-card-foreground\">\n                              Lead ajouté: {lead.firstName} {lead.lastName}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {lead.company} - Score: {lead.score}%\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                      {Array.isArray(campaigns) && campaigns.length > 0 && (\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <span className=\"text-blue-600 text-sm\">📧</span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm text-card-foreground\">\n                              Campagne: {campaigns[0].name}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {campaigns[0].leadTargets?.split(',').length || 0} leads ciblés\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </>\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-sm text-muted-foreground\">Aucune activité récente</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Commencez par ajouter des leads !\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"bg-card p-6 rounded-xl shadow-sm border border-border\">\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Actions Rapides</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <button \n                    onClick={() => setActiveSection(\"leads\")}\n                    className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors text-center\"\n                  >\n                    <div className=\"text-primary text-xl mb-2\">👥</div>\n                    <p className=\"text-sm font-medium text-card-foreground\">Nouveau Lead</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveSection(\"campaigns\")}\n                    className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors text-center\"\n                  >\n                    <div className=\"text-emerald-600 text-xl mb-2\">📧</div>\n                    <p className=\"text-sm font-medium text-card-foreground\">Nouvelle Campagne</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveSection(\"templates\")}\n                    className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors text-center\"\n                  >\n                    <div className=\"text-amber-600 text-xl mb-2\">📝</div>\n                    <p className=\"text-sm font-medium text-card-foreground\">Templates</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveSection(\"analytics\")}\n                    className=\"p-4 border border-border rounded-lg hover:bg-muted transition-colors text-center\"\n                  >\n                    <div className=\"text-purple-600 text-xl mb-2\">📊</div>\n                    <p className=\"text-sm font-medium text-card-foreground\">Analytics</p>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      case \"leads\":\n        return <LeadsSection />;\n      case \"templates\":\n        return <TemplatesSection />;\n      case \"custom-emails\":\n        return <CustomEmailsSection onSectionChange={setActiveSection} />;\n      case \"campaigns\":\n        return <CampaignsSection />;\n      case \"sequences\":\n        return <SequencesSection />;\n      case \"closing\":\n        return <ClosingSection />;\n      case \"calendar\":\n        return <CalendarSection />;\n      case \"analytics\":\n        return <AnalyticsSection />;\n      case \"settings\":\n        return <SettingsSection />;\n      default:\n        return <div>Section not found</div>;\n    }\n  };\n\n  return (\n    <div className=\"h-full bg-background flex\">\n      <Sidebar activeSection={activeSection} onSectionChange={setActiveSection} />\n      <main className=\"flex-1 overflow-auto\">\n        <Header activeSection={activeSection} />\n        {renderSection()}\n      </main>\n    </div>\n  );\n}\n","size_bytes":7954},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { CheckCircle, Rocket, Users, Mail, Brain, TrendingUp, Calendar, Lock, Target, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const handleSignup = () => {\n    window.location.href = \"/api/login?signup=true\";\n  };\n\n  const features = [\n    {\n      icon: Users,\n      title: \"Génération de Leads\",\n      description: \"Trouvez automatiquement des prospects qualifiés avec filtrage IA avancé.\",\n      color: \"bg-blue-100 text-blue-600\"\n    },\n    {\n      icon: Mail,\n      title: \"30 Templates Email\",\n      description: \"Templates optimisés en français avec variations IA pour maximiser les taux de réponse.\",\n      color: \"bg-emerald-100 text-emerald-600\"\n    },\n    {\n      icon: Brain,\n      title: \"Intelligence Artificielle\",\n      description: \"Scoring automatique des leads et génération de variations d'emails personnalisées.\",\n      color: \"bg-amber-100 text-amber-600\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Séquences Multi-étapes\",\n      description: \"Automatisez vos campagnes avec des séquences intelligentes jusqu'à 5 étapes.\",\n      color: \"bg-purple-100 text-purple-600\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Statistiques Avancées\",\n      description: \"Suivez les taux d'ouverture, de clic, de réponse et de RDV bookés en temps réel.\",\n      color: \"bg-blue-100 text-blue-600\"\n    },\n    {\n      icon: Calendar,\n      title: \"Calendrier Intégré\",\n      description: \"Permettez à vos prospects de réserver des RDV directement via vos emails.\",\n      color: \"bg-indigo-100 text-indigo-600\"\n    },\n    {\n      icon: Target,\n      title: <span translate=\"no\">Service de Closing</span>,\n      description: \"Closeurs professionnels pour conclure vos ventes par téléphone avec commission sur résultats.\",\n      color: \"bg-orange-100 text-orange-600\",\n      comingSoon: true\n    }\n  ];\n\n  const plans = [\n    {\n      name: \"Starter\",\n      price: \"49€\",\n      description: \"par mois\",\n      features: [\n        \"100 leads par mois\",\n        \"5 templates email\",\n        \"100 variations par mois\",\n        \"Lien de booking personnalisé\",\n        \"Essai gratuit 14 jours sans engagement\",\n        \"Support email\",\n        \"Statistiques de conversion\",\n        \"Résiliable à tout moment\"\n      ],\n      buttonText: \"Choisir Starter\",\n      buttonVariant: \"default\" as const\n    },\n    {\n      name: \"Pro\",\n      price: \"99€\",\n      description: \"par mois\",\n      features: [\n        \"✨ Essai gratuit 14 jours sans engagement\",\n        \"Tout Starter +\",\n        \"400 leads par mois\",\n        \"15 templates email\",\n        \"300 variations par mois\",\n        \"Séquences automatisées (3 étapes)\",\n        \"Connexion Gmail OAuth\",\n        \"Analyse détaillée des campagnes\",\n        \"Service prioritaire\"\n      ],\n      buttonText: \"Choisir Pro\",\n      buttonVariant: \"default\" as const,\n      popular: true\n    },\n    {\n      name: \"Growth\",\n      price: \"299€\",\n      description: \"par mois\",\n      features: [\n        \"Tout Pro +\",\n        \"1500 leads par mois\",\n        \"30 templates email premium\",\n        \"1000 variations par mois\",\n        \"Séquences automatisées (5 étapes)\",\n        \"Analyse avancée + insight IA\",\n        \"Recommandations automatiques\",\n        \"Support 24/7\"\n      ],\n      buttonText: \"Choisir Growth\",\n      buttonVariant: \"secondary\" as const\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"relative bg-card shadow-sm border-b border-border\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 justify-between items-center\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0 flex items-center\">\n                <Rocket className=\"h-8 w-8 text-primary mr-3\" />\n                <span className=\"text-xl font-bold text-foreground\" translate=\"no\">LeadPilot</span>\n              </div>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Fonctionnalités</a>\n              <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Tarifs</a>\n              <Button variant=\"ghost\" onClick={handleLogin}>Connexion</Button>\n              <Button onClick={handleSignup}>S'inscrire</Button>\n            </div>\n            <div className=\"md:hidden flex items-center space-x-2\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleLogin}>Connexion</Button>\n              <Button size=\"sm\" onClick={handleSignup}>S'inscrire</Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-primary/5 to-background py-20\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-5xl font-bold text-foreground leading-tight mb-6\">\n                Génération de leads B2B{\" \"}\n                <span className=\"text-primary\">automatisée</span> avec IA\n              </h1>\n              <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed\">\n                Trouvez, qualifiez et convertissez vos prospects automatiquement. \n                30 templates d'emails, séquences multi-étapes et IA pour maximiser vos conversions.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button size=\"lg\" onClick={handleLogin}>\n                  S'inscrire Gratuitement\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" onClick={handleLogin}>\n                  Se Connecter\n                </Button>\n              </div>\n              <div className=\"mt-8 flex items-center space-x-6 text-sm text-muted-foreground\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 text-emerald-500 mr-2\" />\n                  Essai gratuit 14 jours\n                </div>\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 text-emerald-500 mr-2\" />\n                  Sans engagement\n                </div>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <Card className=\"shadow-2xl\">\n                <CardContent className=\"p-6\">\n                  <div className=\"bg-gray-100 rounded-lg h-64 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <TrendingUp className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">Aperçu du Dashboard</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/20\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Tout ce dont vous avez besoin pour générer des leads\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Une plateforme complète qui automatise votre prospection de A à Z\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className={`hover:shadow-lg transition-shadow ${feature.comingSoon ? 'relative overflow-hidden' : ''}`}>\n                <CardContent className=\"p-6\">\n                  <div className={`w-12 h-12 ${feature.color} rounded-lg flex items-center justify-center mb-4`}>\n                    <feature.icon className=\"h-6 w-6\" />\n                  </div>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"text-xl font-semibold text-card-foreground\">{feature.title}</h3>\n                    {feature.comingSoon && (\n                      <div className=\"flex items-center text-amber-600 bg-amber-100 px-2 py-1 rounded-full text-xs font-semibold\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        Bientôt\n                      </div>\n                    )}\n                  </div>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-background\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Choisissez votre plan\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Commencez gratuitement, évoluez selon vos besoins\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {plans.map((plan, index) => (\n              <Card key={index} className={`shadow-lg ${plan.popular ? 'border-2 border-primary relative' : ''}`}>\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-primary text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                      Populaire\n                    </span>\n                  </div>\n                )}\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold text-card-foreground mb-2\">{plan.name}</h3>\n                    <div className=\"text-4xl font-bold text-card-foreground mb-2\">{plan.price}</div>\n                    <p className=\"text-muted-foreground\">{plan.description}</p>\n                  </div>\n                  <ul className=\"space-y-3 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center\">\n                        {typeof feature === 'string' ? (\n                          <>\n                            <CheckCircle className=\"h-4 w-4 text-emerald-500 mr-3 flex-shrink-0\" />\n                            <span className=\"text-card-foreground\">{feature}</span>\n                          </>\n                        ) : (\n                          <>\n                            <CheckCircle className=\"h-4 w-4 text-emerald-500 mr-3 flex-shrink-0\" />\n                            <span className=\"text-card-foreground\">{feature}</span>\n                          </>\n                        )}\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className=\"w-full\" \n                    variant={plan.buttonVariant}\n                    onClick={handleSignup}\n                  >\n                    {plan.buttonText}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          <div className=\"text-center mt-8\">\n            <p className=\"text-muted-foreground\">\n              💡 Facturation annuelle = 2 mois offerts (payer 10 mois au lieu de 12)\n            </p>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":11901},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/analytics-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, TrendingUp, Mail, Eye, MousePointer, Calendar, CalendarDays, Lock, Crown } from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, subDays, subMonths, startOfDay, endOfDay } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport type { Template } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function AnalyticsSection() {\n  const { user } = useAuth();\n  const userPlan = (user as any)?.plan || 'free';\n  \n  const [selectedRange, setSelectedRange] = useState<{\n    from: Date | null;\n    to: Date | null;\n  }>({\n    from: subDays(new Date(), 7),\n    to: new Date()\n  });\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [tempDate, setTempDate] = useState<Date | null>(null);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<{\n    leadsGenerated: number;\n    emailsSent: number;\n    openRate: number;\n    clickRate: number;\n    responseRate: number;\n    meetingsBooked: number;\n    meetingConversionRate: number;\n    avgScore: number;\n  }>({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const { data: templates = [] } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculs des métriques réalistes basées sur les vraies données\n  const leadsGenerated = stats?.leadsGenerated || 0;\n  const emailsSent = stats?.emailsSent || 0;\n  const openRate = stats?.openRate || 0;\n  const clickRate = stats?.clickRate || 0;\n  const responseRate = stats?.responseRate || 0;\n  const meetingsBooked = stats?.meetingsBooked || 0;\n  const meetingConversionRate = stats?.meetingConversionRate || 0;\n\n\n\n  // Calcul des pourcentages réalistes pour l'entonnoir\n  const maxLeads = stats?.monthlyLimit || 5; // Quota maximum pour le plan\n  const leadsPercentage = Math.round((leadsGenerated / maxLeads) * 100);\n  const emailsPercentage = leadsGenerated > 0 ? Math.round((emailsSent / leadsGenerated) * 100) : 0;\n  \n  // Entonnoir de conversion basé sur les vraies données et quotas\n  const conversionData = [\n    { \n      label: \"Leads générés\", \n      value: leadsGenerated, \n      percentage: leadsPercentage, \n      color: \"bg-blue-600\" \n    },\n    { \n      label: \"Emails envoyés\", \n      value: emailsSent, \n      percentage: emailsPercentage, \n      color: \"bg-emerald-600\" \n    },\n    { \n      label: \"Emails ouverts\", \n      value: Math.round((emailsSent * openRate) / 100), \n      percentage: openRate, \n      color: \"bg-amber-600\" \n    },\n    { \n      label: \"Clics\", \n      value: Math.round((emailsSent * clickRate) / 100), \n      percentage: clickRate, \n      color: \"bg-purple-600\" \n    },\n    { \n      label: \"RDV bookés\", \n      value: meetingsBooked, \n      percentage: meetingConversionRate, \n      color: \"bg-rose-600\" \n    }\n  ];\n\n  const keyMetrics = [\n    { label: \"Taux d'ouverture\", value: `${openRate}%`, color: \"bg-blue-50 text-blue-600\" },\n    { label: \"Taux de clic\", value: `${clickRate}%`, color: \"bg-emerald-50 text-emerald-600\" },\n    { label: \"Taux de réponse\", value: `${responseRate}%`, color: \"bg-purple-50 text-purple-600\" },\n    { label: \"Conversion RDV\", value: `${meetingConversionRate}%`, color: \"bg-rose-50 text-rose-600\" }\n  ];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Statistiques & Analytics</h2>\n          <p className=\"text-muted-foreground\">Analysez vos performances de prospection</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          {/* Sélecteur de période avec calendrier */}\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" className=\"w-60 justify-start text-left font-normal\">\n                <CalendarDays className=\"h-4 w-4 mr-2\" />\n                {selectedRange.from && selectedRange.to ? (\n                  `${format(selectedRange.from, \"dd MMM\", { locale: fr })} - ${format(selectedRange.to, \"dd MMM yyyy\", { locale: fr })}`\n                ) : (\n                  \"Sélectionner une période\"\n                )}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n              <div className=\"p-4\">\n                {/* Raccourcis de période */}\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const today = new Date();\n                      setSelectedRange({\n                        from: subDays(today, 7),\n                        to: today\n                      });\n                    }}\n                  >\n                    7 derniers jours\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const today = new Date();\n                      setSelectedRange({\n                        from: subDays(today, 30),\n                        to: today\n                      });\n                    }}\n                  >\n                    30 derniers jours\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const today = new Date();\n                      setSelectedRange({\n                        from: startOfMonth(today),\n                        to: endOfMonth(today)\n                      });\n                    }}\n                  >\n                    Ce mois\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const today = new Date();\n                      const lastMonth = subMonths(today, 1);\n                      setSelectedRange({\n                        from: startOfMonth(lastMonth),\n                        to: endOfMonth(lastMonth)\n                      });\n                    }}\n                  >\n                    Mois dernier\n                  </Button>\n                </div>\n\n                {/* Instructions de sélection manuelle */}\n                <div className=\"text-sm text-white mb-3 p-2 bg-gradient-to-r from-blue-600 to-purple-600 rounded\">\n                  📅 <strong>Sélection personnalisée :</strong><br />\n                  1. Cliquez sur la date de début<br />\n                  2. Cliquez sur la date de fin\n                </div>\n\n                {/* Navigation du mois */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}\n                  >\n                    ←\n                  </Button>\n                  <h3 className=\"font-medium\">\n                    {format(currentMonth, \"MMMM yyyy\", { locale: fr })}\n                  </h3>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 1))}\n                  >\n                    →\n                  </Button>\n                </div>\n\n                {/* Grille de calendrier dynamique */}\n                <div className=\"grid grid-cols-7 gap-1 text-center text-sm\">\n                  {/* En-têtes des jours */}\n                  {['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'].map(day => (\n                    <div key={day} className=\"p-2 font-medium text-muted-foreground\">\n                      {day}\n                    </div>\n                  ))}\n                  \n                  {/* Dates du mois sélectionné */}\n                  {(() => {\n                    const year = currentMonth.getFullYear();\n                    const month = currentMonth.getMonth();\n                    const firstDay = new Date(year, month, 1);\n                    const lastDay = new Date(year, month + 1, 0);\n                    const daysInMonth = lastDay.getDate();\n                    const startDay = (firstDay.getDay() + 6) % 7; // Ajuster pour commencer lundi\n                    \n                    const cells = [];\n                    \n                    // Cellules vides pour les jours précédents\n                    for (let i = 0; i < startDay; i++) {\n                      cells.push(<div key={`empty-${i}`} className=\"h-8\"></div>);\n                    }\n                    \n                    // Cellules des jours du mois\n                    for (let day = 1; day <= daysInMonth; day++) {\n                      const date = new Date(year, month, day);\n                      const isSelected = selectedRange.from && selectedRange.to && \n                        date >= selectedRange.from && date <= selectedRange.to;\n                      const isStart = selectedRange.from && \n                        date.toDateString() === selectedRange.from.toDateString();\n                      const isEnd = selectedRange.to && \n                        date.toDateString() === selectedRange.to.toDateString();\n                      \n                      cells.push(\n                        <Button\n                          key={day}\n                          variant={isSelected ? \"default\" : \"ghost\"}\n                          size=\"sm\"\n                          className={`h-8 w-8 p-0 text-xs ${\n                            isStart || isEnd ? \"bg-primary text-primary-foreground\" : \n                            isSelected ? \"bg-primary/20\" : \"\"\n                          }`}\n                          onClick={() => {\n                            if (!tempDate) {\n                              // Premier clic - définir le début\n                              setTempDate(date);\n                              setSelectedRange({ from: date, to: null });\n                            } else {\n                              // Deuxième clic - définir la fin\n                              const from = tempDate < date ? tempDate : date;\n                              const to = tempDate < date ? date : tempDate;\n                              setSelectedRange({ from, to });\n                              setTempDate(null);\n                            }\n                          }}\n                        >\n                          {day}\n                        </Button>\n                      );\n                    }\n                    \n                    return cells;\n                  })()}\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Exporter\n          </Button>\n        </div>\n      </div>\n\n      {/* Performance Charts */}\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-6\">\n        {/* Entonnoir de Conversion - Starter+ */}\n        {['starter', 'pro', 'growth'].includes(userPlan) ? (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <TrendingUp className=\"h-5 w-5 mr-2\" />\n                Entonnoir de Conversion\n                <Badge variant=\"outline\" className=\"ml-2 text-xs\">Starter+</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {conversionData.map((item, index) => (\n                  <div key={index}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-600\">{item.label}</span>\n                      <span className=\"font-semibold text-foreground\">{item.value}</span>\n                    </div>\n                    <Progress value={item.percentage} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lock className=\"h-5 w-5 mr-2 text-gray-400\" />\n                Entonnoir de Conversion\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Starter+</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center py-8\">\n              <Lock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600 mb-4\">Analyse de l'entonnoir de conversion</p>\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Suivez vos prospects de la génération à la conversion avec des métriques détaillées.\n              </p>\n              <Button size=\"sm\" variant=\"outline\">\n                Upgrader vers Starter\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Métriques Clés - Pro+ */}\n        {['pro', 'growth'].includes(userPlan) ? (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                Métriques Clés\n                <Badge variant=\"outline\" className=\"ml-2 text-xs\">Pro+</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {keyMetrics.map((metric, index) => (\n                  <div key={index} className={`text-center p-4 rounded-lg ${metric.color}`}>\n                    <div className=\"text-2xl font-bold\">{metric.value}</div>\n                    <div className=\"text-sm opacity-80\">{metric.label}</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Crown className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                Métriques Clés\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Pro+</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center py-8\">\n              <Crown className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n              <p className=\"text-gray-600 mb-4\">Analytics avancés avec métriques détaillées</p>\n              <p className=\"text-sm text-gray-500 mb-4\">\n                Accès aux taux d'ouverture, clics, conversions et tableaux de bord personnalisés.\n              </p>\n              <Button size=\"sm\" variant=\"outline\">\n                Upgrader vers Pro\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Performance par Template - Starter+ */}\n      {['starter', 'pro', 'growth'].includes(userPlan) ? (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              Performance par Template\n              <Badge variant=\"outline\" className=\"ml-2 text-xs\">Starter+</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {templates.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Mail className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">Aucune donnée de template disponible.</p>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Créez des campagnes pour voir les statistiques de performance.\n                </p>\n              </div>\n            ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gradient-to-r from-purple-600 to-blue-600\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                      Template\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                      Envoyés\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                      Taux d'ouverture\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                      Taux de clic\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider\">\n                      Réponses\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {emailsSent === 0 ? (\n                    <tr>\n                      <td colSpan={5} className=\"px-6 py-8 text-center\">\n                        <div className=\"text-muted-foreground\">\n                          <Mail className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                          <p className=\"text-sm\">Aucune campagne envoyée pour l'instant</p>\n                          <p className=\"text-xs mt-1\">Les statistiques apparaîtront après vos premiers envois</p>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : (\n                    templates.slice(0, 5).map((template: any) => (\n                      <tr key={template.id}>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-foreground\">{template.name}</div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          0\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"text-sm font-medium text-foreground mr-2\">\n                              0%\n                            </div>\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-2 max-w-[100px]\">\n                              <div className=\"bg-emerald-500 h-2 rounded-full\" style={{ width: '0%' }}></div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className=\"text-sm font-medium text-foreground mr-2\">\n                              0%\n                            </div>\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-2 max-w-[100px]\">\n                              <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '0%' }}></div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                          0\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Lock className=\"h-5 w-5 mr-2 text-gray-400\" />\n              Performance par Template\n              <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Starter+</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center py-8\">\n            <Lock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 mb-4\">Analyses détaillées des performances par template</p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Suivez les taux d'ouverture, clics et conversions pour chaque template d'email.\n            </p>\n            <Button size=\"sm\" variant=\"outline\">\n              Upgrader vers Starter\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":21161},"client/src/components/dashboard/calendar-section.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Settings, Calendar, Clock, Video, Phone, ChevronLeft, ChevronRight, Copy, Plus, TrendingUp, Lock, Trash2, CheckCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Booking } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function CalendarSection() {\n  const { data: allBookings = [], isLoading } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings\"],\n  });\n  \n  // Filtrer les bookings par mois courant\n  const bookings = allBookings.filter(booking => {\n    const bookingDate = new Date(booking.startTime);\n    return bookingDate.getMonth() === currentMonth.getMonth() && \n           bookingDate.getFullYear() === currentMonth.getFullYear();\n  });\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [showConfigDialog, setShowConfigDialog] = useState(false);\n  const [showNewBookingDialog, setShowNewBookingDialog] = useState(false);\n  \n  // États pour le formulaire de création de RDV\n  const [newBooking, setNewBooking] = useState({\n    title: '',\n    description: '',\n    date: '',\n    time: '',\n    duration: '30',\n    meetingType: 'video'\n  });\n  const [duration, setDuration] = useState(\"30\");\n  const [customDuration, setCustomDuration] = useState(\"\");\n  const [availableSlots, setAvailableSlots] = useState({\n    monday: { enabled: true, startTime: \"09:00\", endTime: \"17:00\" },\n    tuesday: { enabled: true, startTime: \"09:00\", endTime: \"17:00\" },\n    wednesday: { enabled: true, startTime: \"09:00\", endTime: \"17:00\" },\n    thursday: { enabled: true, startTime: \"09:00\", endTime: \"17:00\" },\n    friday: { enabled: true, startTime: \"09:00\", endTime: \"17:00\" },\n    saturday: { enabled: false, startTime: \"10:00\", endTime: \"16:00\" },\n    sunday: { enabled: false, startTime: \"10:00\", endTime: \"16:00\" }\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      scheduled: { label: \"Programmé\", variant: \"outline\" as const, color: \"text-blue-700\" },\n      confirmed: { label: \"Confirmé\", variant: \"default\" as const, color: \"text-emerald-700\" },\n      completed: { label: \"Terminé\", variant: \"secondary\" as const, color: \"text-gray-700\" },\n      cancelled: { label: \"Annulé\", variant: \"destructive\" as const, color: \"text-red-700\" }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.scheduled;\n    return <Badge variant={config.variant} className={config.color}>{config.label}</Badge>;\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('fr-FR', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('fr-FR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentMonth(prev => {\n      const newDate = new Date(prev);\n      if (direction === 'prev') {\n        newDate.setMonth(prev.getMonth() - 1);\n      } else {\n        newDate.setMonth(prev.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const getCurrentMonthName = () => {\n    return currentMonth.toLocaleDateString('fr-FR', {\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  const handleDeleteBooking = async (bookingId: string) => {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer ce RDV ?')) return;\n    \n    try {\n      const response = await apiRequest('DELETE', `/api/bookings/${bookingId}`);\n      if (response.ok) {\n        toast({\n          title: \"RDV supprimé\",\n          description: \"Le rendez-vous a été supprimé avec succès.\",\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de supprimer le RDV.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleConversionUpdate = async (bookingId: string, conversionStatus: string) => {\n    try {\n      const response = await apiRequest('PATCH', `/api/bookings/${bookingId}/conversion`, {\n        conversionStatus\n      });\n      if (response.ok) {\n        toast({\n          title: \"Statut mis à jour\",\n          description: conversionStatus === 'converted' \n            ? \"RDV marqué comme converti !\" \n            : \"RDV marqué comme non concluant.\",\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de mettre à jour le statut.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateBooking = async () => {\n    if (!newBooking.title || !newBooking.date || !newBooking.time) {\n      toast({\n        title: \"Champs requis\",\n        description: \"Veuillez remplir au minimum le titre, la date et l'heure.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Créer les dates de début et fin\n      const startDateTime = new Date(`${newBooking.date}T${newBooking.time}`);\n      const endDateTime = new Date(startDateTime.getTime() + parseInt(newBooking.duration) * 60000);\n\n      const response = await apiRequest('POST', '/api/bookings', {\n        title: newBooking.title,\n        description: newBooking.description,\n        startTime: startDateTime.toISOString(),\n        endTime: endDateTime.toISOString(),\n        meetingType: newBooking.meetingType,\n        status: 'scheduled'\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"RDV créé\",\n          description: \"Le rendez-vous a été créé avec succès.\",\n        });\n        setShowNewBookingDialog(false);\n        setNewBooking({\n          title: '',\n          description: '',\n          date: '',\n          time: '',\n          duration: '30',\n          meetingType: 'video'\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer le RDV.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"lg:col-span-2 h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Calendrier de Booking</h2>\n          <p className=\"text-muted-foreground\">Gérez vos créneaux et RDV prospects</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={showNewBookingDialog} onOpenChange={setShowNewBookingDialog}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nouveau RDV\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Nouveau rendez-vous</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\" className=\"text-white\">Titre</Label>\n                  <Input \n                    id=\"title\" \n                    value={newBooking.title}\n                    onChange={(e) => setNewBooking({...newBooking, title: e.target.value})}\n                    placeholder=\"Ex: Entretien commercial\" \n                    className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"description\" className=\"text-white\">Description</Label>\n                  <Textarea \n                    id=\"description\" \n                    value={newBooking.description}\n                    onChange={(e) => setNewBooking({...newBooking, description: e.target.value})}\n                    placeholder=\"Détails du rendez-vous...\" \n                    className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\" className=\"text-white\">Date</Label>\n                    <Input \n                      id=\"date\" \n                      type=\"date\" \n                      value={newBooking.date}\n                      onChange={(e) => setNewBooking({...newBooking, date: e.target.value})}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"time\" className=\"text-white\">Heure</Label>\n                    <Input \n                      id=\"time\" \n                      type=\"time\" \n                      value={newBooking.time}\n                      onChange={(e) => setNewBooking({...newBooking, time: e.target.value})}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rdvDuration\" className=\"text-white\">Durée</Label>\n                    <Select value={newBooking.duration} onValueChange={(value) => setNewBooking({...newBooking, duration: value})}>\n                      <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                        <SelectValue placeholder=\"Durée\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-gray-800 border-gray-600\">\n                        <SelectItem value=\"15\" className=\"text-white hover:bg-gray-700\">15 min</SelectItem>\n                        <SelectItem value=\"30\" className=\"text-white hover:bg-gray-700\">30 min</SelectItem>\n                        <SelectItem value=\"45\" className=\"text-white hover:bg-gray-700\">45 min</SelectItem>\n                        <SelectItem value=\"60\" className=\"text-white hover:bg-gray-700\">1h</SelectItem>\n                        <SelectItem value=\"90\" className=\"text-white hover:bg-gray-700\">1h30</SelectItem>\n                        <SelectItem value=\"120\" className=\"text-white hover:bg-gray-700\">2h</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"meetingType\" className=\"text-white\">Type</Label>\n                    <Select value={newBooking.meetingType} onValueChange={(value) => setNewBooking({...newBooking, meetingType: value})}>\n                      <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                        <SelectValue placeholder=\"Type\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-gray-800 border-gray-600\">\n                        <SelectItem value=\"video\" className=\"text-white hover:bg-gray-700\">Visio</SelectItem>\n                        <SelectItem value=\"phone\" className=\"text-white hover:bg-gray-700\">Téléphone</SelectItem>\n                        <SelectItem value=\"in-person\" className=\"text-white hover:bg-gray-700\">Présentiel</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50\"\n                  onClick={handleCreateBooking}\n                  disabled={!newBooking.title || !newBooking.date || !newBooking.time}\n                >\n                  Créer le RDV\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <Dialog open={showConfigDialog} onOpenChange={setShowConfigDialog}>\n            <DialogTrigger asChild>\n              <Button>\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Configurer\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Configuration du calendrier</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"duration\" className=\"text-white text-sm font-medium\">Durée par défaut</Label>\n                  <Select value={duration} onValueChange={setDuration}>\n                    <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                      <SelectValue className=\"text-white\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-800 border-gray-600\">\n                      <SelectItem value=\"15\" className=\"text-white hover:bg-gray-700\">15 min</SelectItem>\n                      <SelectItem value=\"30\" className=\"text-white hover:bg-gray-700\">30 min</SelectItem>\n                      <SelectItem value=\"45\" className=\"text-white hover:bg-gray-700\">45 min</SelectItem>\n                      <SelectItem value=\"60\" className=\"text-white hover:bg-gray-700\">1h</SelectItem>\n                      <SelectItem value=\"90\" className=\"text-white hover:bg-gray-700\">1h30</SelectItem>\n                      <SelectItem value=\"120\" className=\"text-white hover:bg-gray-700\">2h</SelectItem>\n                      <SelectItem value=\"custom\" className=\"text-white hover:bg-gray-700\">Personnalisé</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {duration === \"custom\" && (\n                    <div className=\"mt-3\">\n                      <Input\n                        id=\"customDuration\"\n                        type=\"number\"\n                        placeholder=\"Durée en minutes\"\n                        value={customDuration}\n                        onChange={(e) => setCustomDuration(e.target.value)}\n                        min=\"5\"\n                        max=\"480\"\n                        className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-400\"\n                      />\n                    </div>\n                  )}\n                </div>\n                <div>\n                  <Label className=\"text-white text-sm font-medium\">Horaires de disponibilité</Label>\n                  <div className=\"space-y-2 mt-3\">\n                    {[\n                      { key: 'monday', label: 'Lun' },\n                      { key: 'tuesday', label: 'Mar' },\n                      { key: 'wednesday', label: 'Mer' },\n                      { key: 'thursday', label: 'Jeu' },\n                      { key: 'friday', label: 'Ven' },\n                      { key: 'saturday', label: 'Sam' },\n                      { key: 'sunday', label: 'Dim' }\n                    ].map(day => (\n                      <div key={day.key} className=\"bg-gray-800 border border-gray-600 rounded p-3\">\n                        <label className=\"flex items-center space-x-3 mb-2\">\n                          <input \n                            type=\"checkbox\" \n                            checked={availableSlots[day.key as keyof typeof availableSlots].enabled}\n                            onChange={(e) => setAvailableSlots(prev => ({\n                              ...prev,\n                              [day.key]: { ...prev[day.key as keyof typeof prev], enabled: e.target.checked }\n                            }))}\n                            className=\"w-4 h-4\"\n                          />\n                          <span className=\"text-white font-medium\">{day.label}</span>\n                        </label>\n                        {availableSlots[day.key as keyof typeof availableSlots].enabled && (\n                          <div className=\"flex items-center space-x-2 ml-7\">\n                            <Input\n                              type=\"time\"\n                              value={availableSlots[day.key as keyof typeof availableSlots].startTime}\n                              onChange={(e) => setAvailableSlots(prev => ({\n                                ...prev,\n                                [day.key]: { ...prev[day.key as keyof typeof prev], startTime: e.target.value }\n                              }))}\n                              className=\"bg-gray-700 border-gray-500 text-white text-sm\"\n                            />\n                            <span className=\"text-gray-400\">à</span>\n                            <Input\n                              type=\"time\"\n                              value={availableSlots[day.key as keyof typeof availableSlots].endTime}\n                              onChange={(e) => setAvailableSlots(prev => ({\n                                ...prev,\n                                [day.key]: { ...prev[day.key as keyof typeof prev], endTime: e.target.value }\n                              }))}\n                              className=\"bg-gray-700 border-gray-500 text-white text-sm\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <Button \n                  className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\" \n                  onClick={() => setShowConfigDialog(false)}\n                >\n                  Sauvegarder\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Statistiques rapides */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-center\">\n              <Calendar className=\"h-8 w-8 text-blue-500\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">RDV en {getCurrentMonthName()}</p>\n                <div className=\"text-2xl font-bold\">{bookings.length}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Taux de conversion - Starter+ */}\n        {['starter', 'pro', 'growth'].includes((user as any)?.plan || 'free') ? (\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center\">\n                <TrendingUp className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Taux de conversion</p>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {bookings.length > 0 ? Math.round((bookings.filter(b => b.conversionStatus === 'converted').length / bookings.length) * 100) : 0}%\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-center\">\n                <Lock className=\"h-8 w-8 text-gray-400\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Taux de conversion</p>\n                  <div className=\"text-sm text-gray-500\">Plan Starter+</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Calendar Configuration */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Configuration</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Durée des RDV configurée\n                </label>\n                <div className=\"text-sm text-muted-foreground bg-muted p-2 rounded\">\n                  {duration === \"custom\" && customDuration ? `${customDuration} minutes` : `${duration} minutes`} par défaut\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Créneaux disponibles\n                </label>\n                <div className=\"space-y-1\">\n                  {Object.entries(availableSlots).map(([key, slot]) => {\n                    const dayNames = {\n                      monday: 'Lundi',\n                      tuesday: 'Mardi', \n                      wednesday: 'Mercredi',\n                      thursday: 'Jeudi',\n                      friday: 'Vendredi',\n                      saturday: 'Samedi',\n                      sunday: 'Dimanche'\n                    };\n                    return (\n                      <div key={key} className={`text-sm p-1 rounded ${slot.enabled ? 'text-emerald-600' : 'text-muted-foreground'}`}>\n                        {slot.enabled ? '✓' : '✗'} {dayNames[key as keyof typeof dayNames]} {slot.enabled ? `${slot.startTime}-${slot.endTime}` : 'Indisponible'}\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Calendar Link avec restriction de plan */}\n              {['starter', 'pro', 'growth'].includes((user as any)?.plan || 'free') ? (\n                <div className=\"p-4 bg-primary/5 rounded-lg\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <h4 className=\"font-medium text-primary\">Lien de booking</h4>\n                    <Badge variant=\"outline\" className=\"text-xs\">Starter+</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-2\">\n                    Partagez ce lien pour que vos prospects puissent réserver un créneau\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input \n                      value={`https://leadpilot.com/book/${user?.id || 'user123'}`}\n                      readOnly\n                      className=\"text-sm text-primary bg-white border-primary/20\"\n                    />\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(`https://leadpilot.com/book/${user?.id || 'user123'}`);\n                      }}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"p-4 bg-gray-100 rounded-lg border border-gray-300\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <h4 className=\"font-medium text-gray-700\">Lien de booking</h4>\n                    <Badge variant=\"secondary\" className=\"text-xs\">Starter+</Badge>\n                  </div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Les liens de prise de rendez-vous sont disponibles à partir du plan Starter.\n                  </p>\n                  <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\n                    Upgrader vers Starter\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Calendar View & Bookings */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>RDV à venir</CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => navigateMonth('prev')}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <span className=\"text-sm font-medium text-foreground capitalize\">\n                    {getCurrentMonthName()}\n                  </span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => navigateMonth('next')}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {bookings.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground mb-4\">Aucun RDV programmé pour le moment.</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Partagez votre lien de booking pour recevoir des demandes de RDV.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {bookings.map((booking: Booking) => (\n                    <div \n                      key={booking.id} \n                      className={`border rounded-lg p-4 relative ${\n                        booking.status === 'confirmed' ? 'border-emerald-300 bg-emerald-100 dark:bg-emerald-900/30 dark:border-emerald-600' :\n                        booking.status === 'scheduled' ? 'border-blue-300 bg-blue-100 dark:bg-blue-900/30 dark:border-blue-600' :\n                        booking.status === 'completed' ? 'border-purple-300 bg-purple-100 dark:bg-purple-900/30 dark:border-purple-600' :\n                        'border-gray-300 bg-gray-100 dark:bg-gray-800/60 dark:border-gray-600'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback className={`${\n                              booking.status === 'confirmed' ? 'bg-emerald-600' :\n                              booking.status === 'scheduled' ? 'bg-blue-600' :\n                              'bg-gray-600'\n                            } text-white`}>\n                              {getInitials(booking.title)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-gray-100\">{booking.title}</h4>\n                            <p className=\"text-sm text-gray-700 dark:text-gray-300\">{booking.description}</p>\n                          </div>\n                        </div>\n                        {getStatusBadge(booking.status)}\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-700 dark:text-gray-300 space-x-4\">\n                        <span className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          {formatDate(booking.startTime.toString())}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          {formatTime(booking.startTime.toString())} - {formatTime(booking.endTime.toString())}\n                        </span>\n                        <span className=\"flex items-center\">\n                          {booking.meetingType === 'video' ? (\n                            <Video className=\"h-4 w-4 mr-1\" />\n                          ) : (\n                            <Phone className=\"h-4 w-4 mr-1\" />\n                          )}\n                          {booking.meetingType === 'video' ? 'Visio' : 'Téléphone'}\n                        </span>\n                      </div>\n                      \n                      {/* Boutons d'action */}\n                      <div className=\"mt-4 flex justify-between items-center\">\n                        <div className=\"flex gap-2\">\n                          {booking.status === 'completed' && !booking.conversionStatus && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                onClick={() => handleConversionUpdate(booking.id, 'converted')}\n                              >\n                                ✅ Converti\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleConversionUpdate(booking.id, 'not_converted')}\n                              >\n                                ❌ Non concluant\n                              </Button>\n                            </>\n                          )}\n                          {booking.conversionStatus && (\n                            <span className={`text-sm px-2 py-1 rounded ${\n                              booking.conversionStatus === 'converted' \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              {booking.conversionStatus === 'converted' ? '✅ Conversion réussie' : '❌ Non concluant'}\n                            </span>\n                          )}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          onClick={() => handleDeleteBooking(booking.id)}\n                        >\n                          🗑️ Supprimer\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31581},"client/src/components/dashboard/campaigns-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Plus, Trash2, Send, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport type { Campaign, Template, CustomEmail, Lead } from \"@shared/schema\";\n\nexport default function CampaignsSection() {\n  const [campaignForm, setCampaignForm] = useState({\n    name: \"\",\n    emailId: \"\",\n    selectedLeads: [] as string[],\n    status: \"draft\"\n  });\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: campaigns = [], isLoading: campaignsLoading } = useQuery<Campaign[]>({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: customEmails = [] } = useQuery<CustomEmail[]>({\n    queryKey: [\"/api/custom-emails\"],\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (campaignData: typeof campaignForm) => {\n      const response = await apiRequest(\"POST\", \"/api/campaigns\", campaignData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campagne créée\",\n        description: \"Votre campagne a été créée avec succès.\",\n      });\n      setCampaignForm({ name: \"\", emailId: \"\", selectedLeads: [], status: \"draft\" });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer la campagne.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const sendCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await apiRequest(\"POST\", `/api/campaigns/${campaignId}/send`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campagne envoyée !\",\n        description: `${data.results.sent} emails envoyés avec succès.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur d'envoi\",\n        description: error.message || \"Impossible d'envoyer la campagne.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/campaigns/${campaignId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({\n        title: \"Campagne supprimée\",\n        description: \"La campagne a été supprimée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la campagne.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateCampaign = () => {\n    if (!campaignForm.name || !campaignForm.emailId || campaignForm.selectedLeads.length === 0) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs et sélectionner au moins un lead.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const { selectedLeads, ...formData } = campaignForm;\n    createCampaignMutation.mutate({\n      ...formData,\n      leadTargets: selectedLeads.join(','),\n      status: 'draft'\n    } as any);\n  };\n\n  const handleLeadSelection = (leadId: string, checked: boolean) => {\n    if (checked) {\n      setCampaignForm(prev => ({\n        ...prev,\n        selectedLeads: [...prev.selectedLeads, leadId]\n      }));\n    } else {\n      setCampaignForm(prev => ({\n        ...prev,\n        selectedLeads: prev.selectedLeads.filter(id => id !== leadId)\n      }));\n    }\n  };\n\n  const handleSelectAllLeads = () => {\n    setCampaignForm(prev => ({\n      ...prev,\n      selectedLeads: leads.map(lead => lead.id)\n    }));\n  };\n\n  const handleSelectHighScoreLeads = () => {\n    const highScoreLeads = leads.filter(lead => (lead.aiScore || 0) > 80);\n    setCampaignForm(prev => ({\n      ...prev,\n      selectedLeads: highScoreLeads.map(lead => lead.id)\n    }));\n  };\n\n  const handleDeselectAll = () => {\n    setCampaignForm(prev => ({\n      ...prev,\n      selectedLeads: []\n    }));\n  };\n\n  const handleViewCampaignDetails = (campaignId: string) => {\n    // Pour l'instant, on affiche une alerte avec les détails\n    const campaign = campaigns.find(c => c.id === campaignId);\n    if (campaign) {\n      const details = `\nDétails de la campagne: ${campaign.name}\n\n• Email utilisé: ${customEmails.find((e: CustomEmail) => e.id === campaign.emailId)?.name || \"Email inconnu\"}\n• Leads ciblés: ${campaign.leadTargets ? campaign.leadTargets.split(',').length : 0} leads\n• Statut: ${campaign.status}\n• Créée le: ${campaign.createdAt ? new Date(campaign.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}\n\nStatistiques:\n• Envoyés: ${campaign.totalSent}\n• Ouverts: ${campaign.totalOpened}\n• Clics: ${campaign.totalClicked}\n• Réponses: ${campaign.totalReplied}\n      `.trim();\n      alert(details);\n    }\n  };\n\n  const handleDuplicateCampaign = (campaign: Campaign) => {\n    setCampaignForm({\n      name: `${campaign.name} (copie)`,\n      emailId: campaign.emailId,\n      selectedLeads: campaign.leadTargets ? campaign.leadTargets.split(',') : [],\n      status: 'draft'\n    });\n    // Scroll vers le formulaire\n    document.querySelector('.campaigns-form')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      draft: { label: \"Brouillon\", variant: \"secondary\" as const },\n      sent: { label: \"Envoyée\", variant: \"default\" as const },\n      scheduled: { label: \"Programmée\", variant: \"outline\" as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  if (campaignsLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Campagnes Email</h2>\n          <p className=\"text-muted-foreground\">Créez et gérez vos campagnes d'emailing</p>\n        </div>\n        <Button>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Nouvelle Campagne\n        </Button>\n      </div>\n\n      {/* Campaign Creation Form */}\n      <Card className=\"mb-6 campaigns-form\">\n        <CardHeader>\n          <CardTitle>Créer une Campagne</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Nom de la campagne\n                </label>\n                <Input\n                  type=\"text\"\n                  value={campaignForm.name}\n                  onChange={(e) => setCampaignForm({ ...campaignForm, name: e.target.value })}\n                  placeholder=\"Ex: Prospection Q1 2024\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email\n                </label>\n                <Select \n                  value={campaignForm.emailId} \n                  onValueChange={(value) => setCampaignForm({ ...campaignForm, emailId: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner un email\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customEmails.map((email: CustomEmail) => (\n                      <SelectItem key={email.id} value={email.id}>\n                        {email.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-3\">\n                Sélection des leads cibles\n              </label>\n              \n              {/* Actions rapides */}\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={handleSelectAllLeads}\n                  className=\"bg-card hover:bg-muted dark:bg-card dark:hover:bg-muted\"\n                >\n                  ✓ Tous les leads ({leads.length})\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={handleSelectHighScoreLeads}\n                  className=\"bg-card hover:bg-muted dark:bg-card dark:hover:bg-muted\"\n                >\n                  ⭐ Score {'>'} 80% ({leads.filter(lead => (lead.aiScore || 0) > 80).length})\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={handleDeselectAll}\n                  className=\"bg-card hover:bg-muted dark:bg-card dark:hover:bg-muted\"\n                >\n                  ✗ Désélectionner tout\n                </Button>\n                <div className=\"ml-auto bg-primary/10 px-3 py-1 rounded-full text-sm font-medium text-primary\">\n                  {campaignForm.selectedLeads.length} sélectionnés\n                </div>\n              </div>\n\n              {/* Liste des leads avec cases à cocher */}\n              <div className=\"border rounded-lg bg-card dark:bg-card\">\n                <div className=\"p-3 bg-muted dark:bg-muted border-b font-medium text-sm text-foreground\">\n                  Vos leads disponibles\n                </div>\n                <div className=\"max-h-64 overflow-y-auto\">\n                  {leads.length === 0 ? (\n                    <div className=\"p-4 text-center text-muted-foreground\">\n                      <p>Aucun lead disponible</p>\n                      <p className=\"text-xs mt-1\">Ajoutez des leads dans l'onglet \"Leads\" pour créer une campagne</p>\n                    </div>\n                  ) : (\n                    <div className=\"divide-y divide-border dark:divide-border\">\n                      {leads.map((lead: Lead) => (\n                        <div key={lead.id} className=\"p-3 hover:bg-muted dark:hover:bg-muted transition-colors\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Checkbox\n                              id={`lead-${lead.id}`}\n                              checked={campaignForm.selectedLeads.includes(lead.id)}\n                              onCheckedChange={(checked) => handleLeadSelection(lead.id, checked as boolean)}\n                              className=\"flex-shrink-0\"\n                            />\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center justify-between\">\n                                <div>\n                                  <h4 className=\"font-medium text-foreground text-sm\">\n                                    {lead.firstName} {lead.lastName}\n                                  </h4>\n                                  <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mt-1\">\n                                    <span className=\"font-medium\">{lead.company}</span>\n                                    {lead.position && (\n                                      <>\n                                        <span>•</span>\n                                        <span>{lead.position}</span>\n                                      </>\n                                    )}\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground mt-1\">\n                                    {lead.email}\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  {lead.aiScore && (\n                                    <Badge \n                                      variant={lead.aiScore > 80 ? \"default\" : lead.aiScore > 60 ? \"secondary\" : \"outline\"}\n                                      className=\"text-xs\"\n                                    >\n                                      {Math.round(lead.aiScore)}%\n                                    </Badge>\n                                  )}\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {lead.status || 'nouveau'}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n          </div>\n          <div className=\"flex justify-end mt-6\">\n            <Button \n              onClick={handleCreateCampaign}\n              disabled={createCampaignMutation.isPending}\n            >\n              {createCampaignMutation.isPending ? \"Création...\" : \"Créer Campagne\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Campaigns List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Campagnes Récentes</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {campaigns.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-muted-foreground mb-4\">Aucune campagne créée pour le moment.</p>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Créer votre première campagne\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {campaigns.map((campaign: Campaign) => (\n                <div key={campaign.id} className=\"border border-border rounded-lg p-4 bg-card\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <h4 className=\"text-lg font-medium text-foreground\">{campaign.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Email: {customEmails.find((e: CustomEmail) => e.id === campaign.emailId)?.name || \"Email inconnu\"}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusBadge(campaign.status)}\n                      {campaign.status === 'draft' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => sendCampaignMutation.mutate(campaign.id)}\n                          disabled={sendCampaignMutation.isPending}\n                          className=\"bg-green-600 hover:bg-green-700 text-white\"\n                        >\n                          {sendCampaignMutation.isPending ? (\n                            <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                          ) : (\n                            <Send className=\"h-4 w-4 mr-2\" />\n                          )}\n                          Envoyer\n                        </Button>\n                      )}\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Supprimer la campagne</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Êtes-vous sûr de vouloir supprimer la campagne \"{campaign.name}\" ? \n                              Cette action est irréversible et supprimera toutes les données associées.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Annuler</AlertDialogCancel>\n                            <AlertDialogAction \n                              onClick={() => deleteCampaignMutation.mutate(campaign.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Supprimer\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-4 gap-4 mb-3\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground\">{campaign.totalSent}</div>\n                      <div className=\"text-sm text-muted-foreground\">Envoyés</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-emerald-400\">{campaign.totalOpened}</div>\n                      <div className=\"text-sm text-muted-foreground\">Ouverts</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-400\">{campaign.totalClicked}</div>\n                      <div className=\"text-sm text-muted-foreground\">Clics</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-400\">{campaign.totalReplied}</div>\n                      <div className=\"text-sm text-muted-foreground\">Réponses</div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n                    <span>Créée le {campaign.createdAt ? new Date(campaign.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}</span>\n                    <div className=\"space-x-3\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleViewCampaignDetails(campaign.id)}\n                        className=\"text-foreground hover:text-primary\"\n                      >\n                        Voir détails\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleDuplicateCampaign(campaign)}\n                        className=\"text-foreground hover:text-primary\"\n                      >\n                        Dupliquer\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":20375},"client/src/components/dashboard/header.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bell } from \"lucide-react\";\n\ninterface HeaderProps {\n  activeSection: string;\n}\n\nconst sectionTitles = {\n  dashboard: { title: \"Dashboard\", subtitle: \"Débloquez tout le potentiel de LeadPilot\" },\n  leads: { title: \"Gestion des Leads\", subtitle: \"Gérez vos prospects et leur scoring IA\" },\n  templates: { title: \"Templates d'Emails\", subtitle: \"30 templates optimisés avec variations IA\" },\n  campaigns: { title: \"Campagnes Email\", subtitle: \"Créez et gérez vos campagnes d'emailing\" },\n  sequences: { title: \"Séquences Multi-étapes\", subtitle: \"Automatisez vos follow-ups avec des séquences intelligentes\" },\n  calendar: { title: \"Calendrier de Booking\", subtitle: \"Gérez vos créneaux et RDV prospects\" },\n  analytics: { title: \"Statistiques & Analytics\", subtitle: \"Analysez vos performances de prospection\" },\n  settings: { title: \"Paramètres\", subtitle: \"Configurez votre compte et intégrations\" },\n  closing: { title: \"Service de Closing\", subtitle: \"Closeurs professionnels pour conclure vos ventes par téléphone avec commission sur résultats\" },\n};\n\nexport default function Header({ activeSection }: HeaderProps) {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const currentSection = sectionTitles[activeSection as keyof typeof sectionTitles] || sectionTitles.dashboard;\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName[0].toUpperCase();\n    }\n    return \"U\";\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">{currentSection.title}</h1>\n          <p className=\"text-muted-foreground\">{currentSection.subtitle}</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n            <Bell className=\"h-5 w-5\" />\n            <span className=\"absolute top-0 right-0 w-2 h-2 bg-red-500 rounded-full\"></span>\n          </Button>\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={(user as any)?.profileImageUrl} />\n              <AvatarFallback className=\"bg-primary text-white text-sm\">\n                {getInitials((user as any)?.firstName, (user as any)?.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"hidden sm:block\">\n              <span className=\"text-foreground font-medium\">\n                {(user as any)?.firstName && (user as any)?.lastName \n                  ? `${(user as any).firstName} ${(user as any).lastName}`\n                  : (user as any)?.email || \"Utilisateur\"\n                }\n              </span>\n              <button \n                onClick={handleLogout}\n                className=\"block text-sm text-muted-foreground hover:text-foreground\"\n              >\n                Se déconnecter\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3478},"client/src/components/dashboard/leads-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Upload, Plus, Search, Mail, Edit, Trash2, Download, Settings2, Target } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Lead } from \"@shared/schema\";\nimport { AdminSeedButton } from \"@/components/admin-seed-button\";\n\nexport default function LeadsSection() {\n  const [filters, setFilters] = useState({\n    sector: \"all\",\n    companySize: \"all\",\n    score: \"all\", \n    status: \"all\"\n  });\n\n  const [showGenerationForm, setShowGenerationForm] = useState(true); // Show form by default for better UX\n  const [generationCriteria, setGenerationCriteria] = useState({\n    sector: \"\",\n    location: \"France\", \n    companySize: \"all\",\n    jobTitles: \"\",\n    specification: \"\", // Nouveau champ pour spécialisation\n    count: 1\n  });\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: leads = [], isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: analytics } = useQuery<{\n    leadsGenerated: number;\n    emailsSent: string;\n    campaignsActive: number;\n    remainingLeads: number;\n  }>({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      await apiRequest(\"DELETE\", `/api/leads/${leadId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Lead supprimé\",\n        description: \"Le lead a été supprimé avec succès.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le lead.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Lead generation mutation\n  const generateLeadsMutation = useMutation({\n    mutationFn: async (params: any) => {\n      return await apiRequest(\"POST\", \"/api/leads/generate\", params);\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      toast({\n        title: \"Leads générés !\",\n        description: `${data.message}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de générer les leads.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // CSV Import mutation\n  const importCSVMutation = useMutation({\n    mutationFn: async (csvContent: string) => {\n      return await apiRequest(\"POST\", \"/api/leads/import-csv\", { csvContent });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      toast({\n        title: \"Import réussi !\",\n        description: `${data.message}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'importer le fichier CSV.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handlers\n  const handleGenerateLeads = () => {\n    if (!generationCriteria.sector) {\n      toast({\n        title: \"Secteur requis\",\n        description: \"Veuillez sélectionner un secteur d'activité.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const params = {\n      sector: generationCriteria.sector,\n      location: generationCriteria.location,\n      companySize: generationCriteria.companySize === \"all\" ? undefined : generationCriteria.companySize,\n      jobTitles: generationCriteria.jobTitles ? generationCriteria.jobTitles.split(',').map(t => t.trim()) : undefined,\n      limit: generationCriteria.count\n    };\n    \n    generateLeadsMutation.mutate(params);\n    setShowGenerationForm(false);\n  };\n\n  const handleImportCSV = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.csv';\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const csvContent = e.target?.result as string;\n          importCSVMutation.mutate(csvContent);\n        };\n        reader.readAsText(file);\n      }\n    };\n    input.click();\n  };\n\n  const handleExportCSV = async () => {\n    try {\n      const response = await fetch('/api/leads/export-csv', {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'leads-export.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Export réussi !\",\n        description: \"Le fichier CSV a été téléchargé.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'exporter les leads.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      new: { label: \"Nouveau\", variant: \"secondary\" as const },\n      contacted: { label: \"Contacté\", variant: \"default\" as const },\n      qualified: { label: \"Qualifié\", variant: \"default\" as const },\n      converted: { label: \"Converti\", variant: \"default\" as const }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"bg-emerald-500\";\n    if (score >= 60) return \"bg-amber-500\";\n    return \"bg-red-500\";\n  };\n\n  const getInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0]}${lastName[0]}`.toUpperCase();\n  };\n\n  const filteredLeads = leads.filter((lead: Lead) => {\n    if (filters.sector !== \"all\" && lead.sector !== filters.sector) return false;\n    // Note: companySize filtering removed temporarily as field doesn't exist in schema yet\n    if (filters.status !== \"all\" && lead.status !== filters.status) return false;\n    if (filters.score !== \"all\") {\n      const score = lead.aiScore || 0;\n      if (filters.score === \"high\" && score < 80) return false;\n      if (filters.score === \"medium\" && (score < 60 || score >= 80)) return false;\n      if (filters.score === \"low\" && score >= 60) return false;\n    }\n    return true;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"h-32 bg-muted rounded\"></div>\n          <div className=\"h-64 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const remainingLeads = analytics?.remainingLeads || 0;\n  const maxLeads = Math.min(remainingLeads, 50); // Limite max par génération\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header Section */}\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col space-y-4 md:flex-row md:items-start md:justify-between md:space-y-0\">\n          <div className=\"space-y-2\">\n            <h3 className=\"text-3xl font-bold tracking-tight\">Leads</h3>\n            <div className=\"flex flex-col space-y-1 md:flex-row md:items-center md:space-y-0 md:space-x-4\">\n              <p className=\"text-base text-muted-foreground\">\n                Gérez vos prospects et leur scoring IA\n              </p>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-2 w-2 rounded-full bg-primary\"></div>\n                <span className=\"text-sm font-medium text-primary\">\n                  {remainingLeads} leads restants\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex space-x-3\">\n            <AdminSeedButton />\n          </div>\n        </div>\n\n        {/* Lead Generation Section */}\n        <Card className=\"border-primary/20 bg-primary/5\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"h-5 w-5 text-primary\" />\n                <CardTitle className=\"text-lg\">Génération de Leads</CardTitle>\n              </div>\n              <Button \n                onClick={() => setShowGenerationForm(!showGenerationForm)}\n                disabled={remainingLeads === 0}\n                className=\"bg-primary hover:bg-primary/90\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {showGenerationForm ? \"Masquer\" : \"Générer des Leads\"}\n              </Button>\n            </div>\n          </CardHeader>\n          \n          {showGenerationForm && (\n            <CardContent className=\"pt-0\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"sector\" className=\"text-sm font-medium\">Secteur d'activité *</Label>\n                  <div className=\"relative\">\n                    <Input\n                      list=\"sectors\"\n                      className=\"h-10\"\n                      value={generationCriteria.sector}\n                      onChange={(e) => setGenerationCriteria(prev => ({ ...prev, sector: e.target.value }))}\n                      placeholder=\"Tapez ou sélectionnez un secteur\"\n                    />\n                    <datalist id=\"sectors\">\n                      <option value=\"Tech/SaaS\">Tech / SaaS</option>\n                      <option value=\"E-commerce\">E-commerce</option>\n                      <option value=\"Finance\">Finance / Fintech</option>\n                      <option value=\"Marketing\">Marketing / Publicité</option>\n                      <option value=\"Conseil\">Conseil / Services</option>\n                      <option value=\"Santé\">Santé / Médical</option>\n                      <option value=\"Education\">Éducation / Formation</option>\n                      <option value=\"Industrie\">Industrie / Manufacturing</option>\n                      <option value=\"Immobilier\">Immobilier</option>\n                      <option value=\"Transport\">Transport / Logistique</option>\n                    </datalist>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"location\" className=\"text-sm font-medium\">Localisation</Label>\n                  <Input\n                    className=\"h-10\"\n                    value={generationCriteria.location}\n                    onChange={(e) => setGenerationCriteria(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"France, Paris, Lyon...\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"companySize\" className=\"text-sm font-medium\">Taille d'entreprise</Label>\n                  <div className=\"relative\">\n                    <Input\n                      list=\"companySizes\"\n                      className=\"h-10\"\n                      value={generationCriteria.companySize === \"all\" ? \"\" : generationCriteria.companySize}\n                      onChange={(e) => setGenerationCriteria(prev => ({ ...prev, companySize: e.target.value || \"all\" }))}\n                      placeholder=\"Tapez ou sélectionnez une taille\"\n                    />\n                    <datalist id=\"companySizes\">\n                      <option value=\"startup\">Startup (1-50)</option>\n                      <option value=\"small\">PME (51-200)</option>\n                      <option value=\"medium\">Moyenne (201-500)</option>\n                      <option value=\"large\">Grande (500+)</option>\n                      <option value=\"micro\">Micro-entreprise (1-10)</option>\n                      <option value=\"enterprise\">Entreprise (1000+)</option>\n                    </datalist>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"count\" className=\"text-sm font-medium\">Nombre de leads</Label>\n                  <div className=\"relative\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button \n                        type=\"button\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          const currentCount = generationCriteria.count;\n                          const newValue = Math.max(1, currentCount - 1);\n                          console.log('Minus clicked:', currentCount, '->', newValue);\n                          setGenerationCriteria(prev => ({ ...prev, count: newValue }));\n                        }}\n                        disabled={generationCriteria.count <= 1}\n                        className=\"flex h-10 w-10 items-center justify-center rounded-md border border-input bg-background hover:bg-accent hover:text-accent-foreground disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        -\n                      </button>\n                      <Input\n                        type=\"text\"\n                        className=\"h-10 text-center\"\n                        value={generationCriteria.count.toString()}\n                        onChange={(e) => {\n                          const rawValue = e.target.value;\n                          console.log(\"Input onChange:\", rawValue);\n                          \n                          // Allow empty string for clearing\n                          if (rawValue === '') {\n                            setGenerationCriteria(prev => ({ ...prev, count: '' as any }));\n                            return;\n                          }\n                          \n                          // Filter out non-numeric characters\n                          const numericValue = rawValue.replace(/[^0-9]/g, '');\n                          \n                          if (numericValue !== '') {\n                            const numValue = parseInt(numericValue);\n                            if (!isNaN(numValue) && numValue > 0) {\n                              // Don't clamp during typing, only validate range\n                              if (numValue <= maxLeads) {\n                                setGenerationCriteria(prev => ({ ...prev, count: numValue }));\n                              } else {\n                                // If exceeds max, set to max\n                                setGenerationCriteria(prev => ({ ...prev, count: maxLeads }));\n                              }\n                            }\n                          }\n                        }}\n                        onBlur={() => {\n                          // On blur, ensure we have a valid number\n                          const currentValue = generationCriteria.count;\n                          if (typeof currentValue === 'string' || currentValue < 1 || isNaN(currentValue)) {\n                            setGenerationCriteria(prev => ({ ...prev, count: 1 }));\n                          } else if (currentValue > maxLeads) {\n                            setGenerationCriteria(prev => ({ ...prev, count: maxLeads }));\n                          }\n                        }}\n                        onFocus={(e) => {\n                          // Select all text when focusing for easy replacement\n                          e.target.select();\n                        }}\n                      />\n                      <button \n                        type=\"button\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                          const currentCount = generationCriteria.count;\n                          const newValue = Math.min(maxLeads, currentCount + 1);\n                          console.log('Plus clicked:', currentCount, '->', newValue);\n                          setGenerationCriteria(prev => ({ ...prev, count: newValue }));\n                        }}\n                        disabled={generationCriteria.count >= maxLeads}\n                        className=\"flex h-10 w-10 items-center justify-center rounded-md border border-input bg-background hover:bg-accent hover:text-accent-foreground disabled:opacity-50 disabled:cursor-not-allowed\"\n                      >\n                        +\n                      </button>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">\n                      Limite: {maxLeads} leads disponibles\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"jobTitles\" className=\"text-sm font-medium\">Postes ciblés (optionnel)</Label>\n                  <Input\n                    className=\"h-10\"\n                    value={generationCriteria.jobTitles}\n                    onChange={(e) => setGenerationCriteria(prev => ({ ...prev, jobTitles: e.target.value }))}\n                    placeholder=\"CEO, Directeur Marketing, CTO...\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"specification\" className=\"text-sm font-medium\">Spécialisation (facultatif)</Label>\n                  <Input\n                    className=\"h-10\"\n                    value={generationCriteria.specification}\n                    onChange={(e) => setGenerationCriteria(prev => ({ ...prev, specification: e.target.value }))}\n                    placeholder=\"montres, crypto, IA, marketing digital...\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Filtrez par secteur ou produit spécifique\n                  </p>\n                </div>\n\n                <div className=\"col-span-1 md:col-span-2 flex justify-end space-x-3 pt-4 border-t\">\n                  <Button variant=\"outline\" onClick={() => setShowGenerationForm(false)}>\n                    Annuler\n                  </Button>\n                  <Button \n                    onClick={handleGenerateLeads} \n                    disabled={generateLeadsMutation.isPending || remainingLeads === 0}\n                    className=\"bg-primary hover:bg-primary/90\"\n                  >\n                    {generateLeadsMutation.isPending ? \"Génération...\" : `Générer ${generationCriteria.count} leads`}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      </div>\n\n      {/* Leads Management Section */}\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0\">\n          <div>\n            <h3 className=\"text-xl font-semibold\">Tous les Leads</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {leads.length} leads au total • {filteredLeads.length} affichés\n            </p>\n          </div>\n        </div>\n\n        {/* Filters Card */}\n        <Card className=\"border-muted bg-muted/20\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base font-medium flex items-center space-x-2\">\n                <Search className=\"h-4 w-4\" />\n                <span>Filtrer les leads</span>\n              </CardTitle>\n              <Button \n                size=\"sm\"\n                onClick={() => {\n                  setFilters({\n                    sector: \"all\",\n                    companySize: \"all\", \n                    score: \"all\",\n                    status: \"all\"\n                  });\n                }}\n                variant=\"ghost\"\n                className=\"text-xs\"\n              >\n                Tout effacer\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Secteur d'activité\n                </label>\n                <Input\n                  list=\"filterSectors\"\n                  className=\"h-9 text-sm\"\n                  value={filters.sector === \"all\" ? \"\" : filters.sector}\n                  onChange={(e) => setFilters({ ...filters, sector: e.target.value || \"all\" })}\n                  placeholder=\"Filtrer par secteur...\"\n                />\n                <datalist id=\"filterSectors\">\n                  <option value=\"Tech/SaaS\">Tech / SaaS</option>\n                  <option value=\"E-commerce\">E-commerce</option>\n                  <option value=\"Finance\">Finance / Fintech</option>\n                  <option value=\"Marketing\">Marketing / Publicité</option>\n                  <option value=\"Conseil\">Conseil / Services</option>\n                  <option value=\"Santé\">Santé / Médical</option>\n                  <option value=\"Education\">Éducation / Formation</option>\n                  <option value=\"Industrie\">Industrie / Manufacturing</option>\n                  <option value=\"Immobilier\">Immobilier</option>\n                  <option value=\"Transport\">Transport / Logistique</option>\n                </datalist>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Taille d'entreprise\n                </label>\n                <Input\n                  list=\"filterCompanySizes\"\n                  className=\"h-9 text-sm\"\n                  value={filters.companySize === \"all\" ? \"\" : filters.companySize}\n                  onChange={(e) => setFilters({ ...filters, companySize: e.target.value || \"all\" })}\n                  placeholder=\"Filtrer par taille...\"\n                />\n                <datalist id=\"filterCompanySizes\">\n                  <option value=\"startup\">Startup (1-50)</option>\n                  <option value=\"small\">PME (51-200)</option>\n                  <option value=\"medium\">Moyenne (201-500)</option>\n                  <option value=\"large\">Grande (500+)</option>\n                  <option value=\"micro\">Micro-entreprise (1-10)</option>\n                  <option value=\"enterprise\">Entreprise (1000+)</option>\n                </datalist>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Score IA\n                </label>\n                <Select value={filters.score} onValueChange={(value) => setFilters({ ...filters, score: value })}>\n                  <SelectTrigger className=\"h-9 text-sm\">\n                    <SelectValue placeholder=\"Tous scores\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tous les scores</SelectItem>\n                    <SelectItem value=\"high\">Élevé (80-100)</SelectItem>\n                    <SelectItem value=\"medium\">Moyen (60-79)</SelectItem>\n                    <SelectItem value=\"low\">Faible (0-59)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Statut du lead\n                </label>\n                <Select value={filters.status} onValueChange={(value) => setFilters({ ...filters, status: value })}>\n                  <SelectTrigger className=\"h-9 text-sm\">\n                    <SelectValue placeholder=\"Tous statuts\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tous les statuts</SelectItem>\n                    <SelectItem value=\"new\">Nouveau</SelectItem>\n                    <SelectItem value=\"contacted\">Contacté</SelectItem>\n                    <SelectItem value=\"qualified\">Qualifié</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Leads Table */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle>Liste des Leads ({filteredLeads.length})</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {filteredLeads.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <p className=\"text-muted-foreground mb-4\">Aucun lead trouvé.</p>\n              <Button className=\"mt-4\" onClick={() => setShowGenerationForm(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Créer votre premier lead\n              </Button>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Contact\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Entreprise\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Score IA\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Statut\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-card divide-y divide-border\">\n                  {filteredLeads.map((lead: Lead) => (\n                    <tr key={lead.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback className=\"bg-primary/10 text-primary\">\n                              {getInitials(lead.firstName, lead.lastName)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-card-foreground\">\n                              {lead.firstName} {lead.lastName}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">{lead.email}</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-card-foreground\">{lead.company}</div>\n                        <div className=\"text-sm text-muted-foreground\">{lead.sector}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"flex-1 bg-muted rounded-full h-2 mr-3\">\n                            <div \n                              className={`h-2 rounded-full ${getScoreColor(lead.aiScore || 0)}`} \n                              style={{ width: `${lead.aiScore || 0}%` }}\n                            ></div>\n                          </div>\n                          <span className=\"text-sm font-medium text-card-foreground\">{lead.aiScore || 0}%</span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        {getStatusBadge(lead.status)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Mail className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(lead.id)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-600\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":30004},"client/src/components/dashboard/sequences-section.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Lock, CheckCircle, Crown, Plus, Play, Pause, Edit, Trash2, Clock, Mail, Users, TrendingUp } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SequenceStep {\n  id?: string;\n  stepNumber: number;\n  name: string;\n  emailId?: string;\n  delayDays: number;\n  delayHours: number;\n  isActive: boolean;\n}\n\ninterface SequenceConfig {\n  selectedLeads: string[];\n}\n\nexport default function SequencesSection() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [newSequence, setNewSequence] = useState({\n    name: \"\",\n    description: \"\"\n  });\n  const [selectedSequence, setSelectedSequence] = useState<string | null>(null);\n  const [isEditingSteps, setIsEditingSteps] = useState(false);\n  const [sequenceSteps, setSequenceSteps] = useState<SequenceStep[]>([]);\n  const [sequenceConfig, setSequenceConfig] = useState<SequenceConfig>({\n    selectedLeads: []\n  });\n\n  // Séquences uniquement pour Pro et Growth\n  const canUseSequences = user?.plan === \"pro\" || user?.plan === \"growth\";\n  const maxSteps = user?.plan === \"growth\" ? 5 : user?.plan === \"pro\" ? 3 : 0;\n\n  // Récupération des séquences\n  const { data: sequences = [], isLoading } = useQuery({\n    queryKey: [\"/api/sequences\"],\n    enabled: canUseSequences,\n  });\n\n  // Récupération des emails personnalisés\n  const { data: customEmails = [] } = useQuery({\n    queryKey: [\"/api/custom-emails\"],\n    enabled: canUseSequences,\n  });\n\n  // Récupération des leads\n  const { data: leads = [] } = useQuery({\n    queryKey: [\"/api/leads\"],\n    enabled: canUseSequences,\n  });\n\n  // Création de séquence\n  const createSequenceMutation = useMutation({\n    mutationFn: async (data: { name: string; description: string }) => {\n      return await apiRequest(\"POST\", \"/api/sequences\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sequences\"] });\n      setIsCreateDialogOpen(false);\n      setNewSequence({ name: \"\", description: \"\" });\n      toast({\n        title: \"Séquence créée\",\n        description: \"Votre nouvelle séquence a été créée avec succès\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer la séquence\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Suppression de séquence\n  const deleteSequenceMutation = useMutation({\n    mutationFn: async (sequenceId: string) => {\n      return await apiRequest(\"DELETE\", `/api/sequences/${sequenceId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sequences\"] });\n      toast({\n        title: \"Séquence supprimée\",\n        description: \"La séquence a été supprimée avec succès\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Delete error:\", error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la séquence\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle statut de séquence\n  const toggleSequenceMutation = useMutation({\n    mutationFn: async ({ sequenceId, isActive }: { sequenceId: string; isActive: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/sequences/${sequenceId}/toggle`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sequences\"] });\n      toast({\n        title: \"Statut modifié\",\n        description: \"Le statut de la séquence a été mis à jour\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Toggle error:\", error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!canUseSequences) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">Séquences</h2>\n            <p className=\"text-muted-foreground\">\n              Automatisez vos relances avec des séquences multi-étapes\n            </p>\n          </div>\n        </div>\n\n        <Card className=\"border-2 border-dashed border-muted\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Lock className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n              Fonctionnalité Pro & Growth\n            </h3>\n            <p className=\"text-muted-foreground text-center mb-6\">\n              Les séquences automatisées sont disponibles uniquement avec les plans Pro (3 étapes) et Growth (5 étapes).\n              Créez des campagnes multi-étapes intelligentes qui s'adaptent aux réactions de vos prospects.\n            </p>\n            <Button \n              onClick={() => window.location.href = '/upgrade'}\n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n            >\n              <Crown className=\"h-4 w-4 mr-2\" />\n              Passer à Pro\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Séquences</h2>\n          <p className=\"text-muted-foreground\">\n            Automatisez vos relances avec des séquences multi-étapes\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700 border-purple-200\">\n            <Crown className=\"h-3 w-3 mr-1\" />\n            {user?.plan === \"growth\" ? \"Growth\" : user?.plan === \"pro\" ? \"Pro\" : \"Free (Test)\"}\n          </Badge>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nouvelle Séquence\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Créer une nouvelle séquence automatisée</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Nom de la séquence</label>\n                  <Input\n                    value={newSequence.name}\n                    onChange={(e) => setNewSequence(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Ex: Prospection SaaS B2B\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Description</label>\n                  <Textarea\n                    value={newSequence.description}\n                    onChange={(e) => setNewSequence(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Décrivez l'objectif de cette séquence...\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"bg-green-50 border border-green-200 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-green-900 mb-3\">Comment ça marche ?</h4>\n                  <div className=\"text-sm text-green-800 space-y-2\">\n                    <div>• Après création, vous pourrez ajouter jusqu'à {maxSteps} étapes</div>\n                    <div>• Chaque étape peut avoir un email et un délai d'attente personnalisé</div>\n                    <div>• Les emails s'envoient automatiquement si le prospect ne répond pas</div>\n                    <div>• La séquence s'arrête automatiquement dès qu'un prospect répond</div>\n                    <div>• Vous pourrez sélectionner précisément quels leads cibler</div>\n                  </div>\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button\n                    onClick={() => createSequenceMutation.mutate(newSequence)}\n                    disabled={!newSequence.name || createSequenceMutation.isPending}\n                  >\n                    {createSequenceMutation.isPending ? \"Création...\" : \"Créer\"}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Dialog pour éditer les étapes d'une séquence */}\n      <Dialog open={isEditingSteps} onOpenChange={setIsEditingSteps}>\n        <DialogContent className=\"max-w-5xl max-h-[85vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Configurer les étapes de votre séquence</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            \n            {/* Sélection des leads */}\n            <div className=\"border rounded-lg p-4\">\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Sélectionner les leads ({sequenceConfig.selectedLeads.length} sélectionné{sequenceConfig.selectedLeads.length !== 1 ? 's' : ''})\n              </h4>\n              <div className=\"mb-4\">\n                <div className=\"flex space-x-2 mb-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setSequenceConfig(prev => ({\n                        ...prev,\n                        selectedLeads: leads.map((lead: any) => lead.id)\n                      }));\n                    }}\n                  >\n                    Tous les leads\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setSequenceConfig(prev => ({\n                        ...prev,\n                        selectedLeads: leads.filter((lead: any) => lead.score && lead.score > 80).map((lead: any) => lead.id)\n                      }));\n                    }}\n                  >\n                    Score &gt; 80%\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setSequenceConfig(prev => ({\n                        ...prev,\n                        selectedLeads: []\n                      }));\n                    }}\n                  >\n                    Désélectionner tout\n                  </Button>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-40 overflow-y-auto border rounded p-3\">\n                {leads.map((lead: any) => (\n                  <label key={lead.id} className=\"flex items-center space-x-2 p-2 rounded hover:bg-gray-50 cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={sequenceConfig.selectedLeads.includes(lead.id)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSequenceConfig(prev => ({\n                            ...prev,\n                            selectedLeads: [...prev.selectedLeads, lead.id]\n                          }));\n                        } else {\n                          setSequenceConfig(prev => ({\n                            ...prev,\n                            selectedLeads: prev.selectedLeads.filter(id => id !== lead.id)\n                          }));\n                        }\n                      }}\n                      className=\"rounded\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-sm font-medium truncate\">\n                        {lead.firstName} {lead.lastName}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground truncate\">\n                        {lead.company} • {lead.email}\n                      </div>\n                    </div>\n                    {lead.score && (\n                      <Badge variant={lead.score >= 80 ? \"default\" : \"secondary\"} className=\"text-xs\">\n                        {lead.score}%\n                      </Badge>\n                    )}\n                  </label>\n                ))}\n              </div>\n              {leads.length === 0 && (\n                <p className=\"text-sm text-muted-foreground text-center py-4\">\n                  Aucun lead disponible. Générez d'abord des leads dans la section \"Leads\".\n                </p>\n              )}\n            </div>\n            {/* Ajouter des étapes */}\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h4 className=\"font-medium\">Étapes de la séquence ({sequenceSteps.length}/{maxSteps})</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Chaque étape enverra un email automatiquement selon le délai configuré\n                </p>\n              </div>\n              <Button\n                onClick={() => {\n                  if (sequenceSteps.length < maxSteps) {\n                    setSequenceSteps(prev => [...prev, {\n                      stepNumber: prev.length + 1,\n                      name: `Étape ${prev.length + 1}`,\n                      delayDays: prev.length === 0 ? 0 : 3,\n                      delayHours: 0,\n                      isActive: true\n                    }]);\n                  }\n                }}\n                disabled={sequenceSteps.length >= maxSteps}\n                variant=\"outline\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Ajouter une étape\n              </Button>\n            </div>\n\n            {/* Liste des étapes configurables */}\n            <div className=\"space-y-4\">\n              {sequenceSteps.map((step, index) => (\n                <div key={index} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                        {step.stepNumber}\n                      </div>\n                      <Input\n                        value={step.name}\n                        onChange={(e) => {\n                          setSequenceSteps(prev => prev.map((s, i) => \n                            i === index ? { ...s, name: e.target.value } : s\n                          ));\n                        }}\n                        placeholder=\"Nom de l'étape\"\n                        className=\"max-w-xs\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSequenceSteps(prev => prev.filter((_, i) => i !== index));\n                      }}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {/* Sélection de l'email */}\n                    <div>\n                      <label className=\"text-sm font-medium\">Email à envoyer</label>\n                      <Select \n                        value={step.emailId || \"\"}\n                        onValueChange={(value) => {\n                          setSequenceSteps(prev => prev.map((s, i) => \n                            i === index ? { ...s, emailId: value } : s\n                          ));\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Choisir un email\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {customEmails.length === 0 ? (\n                            <SelectItem value=\"none\" disabled>\n                              Aucun email personnalisé\n                            </SelectItem>\n                          ) : (\n                            customEmails.map((email: any) => (\n                              <SelectItem key={email.id} value={email.id}>\n                                {email.name}\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Délai en jours */}\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        Délai {index === 0 ? \"(envoi immédiat)\" : \"(après étape précédente)\"}\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          value={step.delayDays}\n                          onChange={(e) => {\n                            setSequenceSteps(prev => prev.map((s, i) => \n                              i === index ? { ...s, delayDays: parseInt(e.target.value) || 0 } : s\n                            ));\n                          }}\n                          disabled={index === 0}\n                          className=\"w-16\"\n                        />\n                        <span className=\"text-xs text-muted-foreground min-w-[28px]\">jours</span>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"23\"\n                          value={step.delayHours}\n                          onChange={(e) => {\n                            setSequenceSteps(prev => prev.map((s, i) => \n                              i === index ? { ...s, delayHours: parseInt(e.target.value) || 0 } : s\n                            ));\n                          }}\n                          disabled={index === 0}\n                          className=\"w-16\"\n                        />\n                        <span className=\"text-xs text-muted-foreground\">heures</span>\n                      </div>\n                    </div>\n\n                    {/* Statut */}\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Statut</label>\n                      <div className=\"flex items-center\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSequenceSteps(prev => prev.map((s, i) => \n                              i === index ? { ...s, isActive: !s.isActive } : s\n                            ));\n                          }}\n                          className={`${step.isActive ? 'bg-green-50 border-green-200 text-green-700' : 'bg-gray-50 border-gray-200 text-gray-500'}`}\n                        >\n                          {step.isActive ? \"Active\" : \"Inactive\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Aperçu du timing */}\n                  <div className=\"mt-3 p-3 bg-gray-50 rounded text-sm\">\n                    <Clock className=\"h-4 w-4 inline mr-2\" />\n                    {index === 0 \n                      ? \"Envoyé immédiatement à l'inscription dans la séquence\"\n                      : `Envoyé ${step.delayDays} jour(s) ${step.delayHours > 0 ? `et ${step.delayHours} heure(s)` : ''} après l'étape précédente si pas de réponse`\n                    }\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {sequenceSteps.length === 0 && (\n              <div className=\"text-center py-6 border-2 border-dashed border-gray-200 rounded-lg bg-gray-50\">\n                <Mail className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-gray-500\">Aucune étape configurée</p>\n                <p className=\"text-xs text-gray-400\">Cliquez sur \"Ajouter une étape\" pour commencer</p>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button variant=\"outline\" onClick={() => setIsEditingSteps(false)}>\n                Annuler\n              </Button>\n              <Button \n                onClick={async () => {\n                  if (selectedSequence && sequenceConfig.selectedLeads.length > 0) {\n                    try {\n                      await apiRequest(\"POST\", `/api/sequences/${selectedSequence}/steps`, { \n                        steps: sequenceSteps,\n                        selectedLeads: sequenceConfig.selectedLeads \n                      });\n                      setIsEditingSteps(false);\n                      toast({\n                        title: \"Séquence configurée\",\n                        description: `${sequenceSteps.length} étape(s) configurée(s) pour ${sequenceConfig.selectedLeads.length} lead(s)`,\n                      });\n                    } catch (error) {\n                      toast({\n                        title: \"Erreur\",\n                        description: \"Impossible de sauvegarder la configuration\",\n                        variant: \"destructive\",\n                      });\n                    }\n                  }\n                }}\n                disabled={sequenceSteps.length === 0 || sequenceConfig.selectedLeads.length === 0}\n              >\n                Sauvegarder la séquence\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Liste des séquences existantes */}\n      {sequences.length > 0 ? (\n        <div className=\"grid gap-6\">\n          {/* Statistiques */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"flex items-center p-4\">\n                <div className=\"p-2 bg-blue-100 rounded-lg mr-3\">\n                  <Mail className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground truncate\">Séquences Actives</p>\n                  <p className=\"text-xl font-bold text-foreground\">{sequences.filter((s: any) => s.isActive).length}</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"flex items-center p-4\">\n                <div className=\"p-2 bg-green-100 rounded-lg mr-3\">\n                  <Users className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground truncate\">Leads Inscrits</p>\n                  <p className=\"text-xl font-bold text-foreground\">0</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"flex items-center p-4\">\n                <div className=\"p-2 bg-purple-100 rounded-lg mr-3\">\n                  <Clock className=\"h-4 w-4 text-purple-600\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground truncate\">Emails Planifiés</p>\n                  <p className=\"text-xl font-bold text-foreground\">0</p>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"flex items-center p-4\">\n                <div className=\"p-2 bg-orange-100 rounded-lg mr-3\">\n                  <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <p className=\"text-xs font-medium text-muted-foreground truncate\">Taux de Réponse</p>\n                  <p className=\"text-xl font-bold text-foreground\">--</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Liste des séquences */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Mes Séquences</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {sequences.map((sequence: any) => (\n                  <div key={sequence.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={`w-2 h-2 rounded-full ${sequence.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">{sequence.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{sequence.description || \"Aucune description\"}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">0 étapes configurées • 0 leads inscrits</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\" className={sequence.isActive ? \"bg-green-50 text-green-700\" : \"bg-gray-50 text-gray-600\"}>\n                        {sequence.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedSequence(sequence.id);\n                          setIsEditingSteps(true);\n                          setSequenceSteps([]);\n                          setSequenceConfig({ selectedLeads: [] });\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => {\n                          toggleSequenceMutation.mutate({\n                            sequenceId: sequence.id,\n                            isActive: !sequence.isActive\n                          });\n                        }}\n                        disabled={toggleSequenceMutation.isPending}\n                      >\n                        {sequence.isActive ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (window.confirm(\"Êtes-vous sûr de vouloir supprimer cette séquence ?\")) {\n                            deleteSequenceMutation.mutate(sequence.id);\n                          }\n                        }}\n                        disabled={deleteSequenceMutation.isPending}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <Card className=\"border-2 border-dashed border-muted\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Mail className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n              Aucune séquence créée\n            </h3>\n            <p className=\"text-muted-foreground text-center mb-6\">\n              Créez votre première séquence automatisée pour commencer à nurturing vos prospects avec des emails programmés.\n            </p>\n            <Button\n              onClick={() => setIsCreateDialogOpen(true)}\n              className=\"bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Créer ma première séquence\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":29614},"client/src/components/dashboard/settings-section.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  User, \n  Mail, \n  Crown,\n  Eye,\n  EyeOff,\n  Download,\n  HelpCircle,\n  Trash2,\n  AlertTriangle\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport OAuthConnections from \"./oauth-connections\";\n\nexport default function SettingsSection() {\n  const [, setLocation] = useLocation();\n  const [profileForm, setProfileForm] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    company: \"\"\n  });\n\n  const [emailConfig, setEmailConfig] = useState({\n    smtpServer: \"\",\n    port: \"587\",\n    security: \"TLS\",\n    username: \"\",\n    password: \"\"\n  });\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { user, isLoading } = useAuth();\n\n  // Get real-time analytics data for quotas\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/analytics/stats'],\n    enabled: !!user,\n  });\n\n  // Get fresh user data for variations count\n  const { data: freshUser } = useQuery({\n    queryKey: ['/api/auth/user'],\n    enabled: !!user,\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n  \n  // Update form when user data is available\n  useEffect(() => {\n    if (user) {\n      setProfileForm({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        password: \"••••••••\", // Placeholder for security\n        company: \"\"\n      });\n    }\n  }, [user]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (profileData: typeof profileForm) => {\n      const response = await apiRequest(\"PUT\", \"/api/user/profile\", profileData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Profil mis à jour\",\n        description: \"Vos informations ont été sauvegardées avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le profil.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testEmailConfigMutation = useMutation({\n    mutationFn: async (configData: typeof emailConfig) => {\n      const response = await apiRequest(\"POST\", \"/api/settings/test-email\", configData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Configuration testée\",\n        description: \"La configuration email fonctionne correctement.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur de configuration\",\n        description: \"Impossible de se connecter avec cette configuration.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const planLimits = {\n    free: { leads: 5, templates: 1, variations: 5 },\n    starter: { leads: 100, templates: 5, variations: 100 },\n    pro: { leads: 400, templates: 15, variations: 300 },\n    growth: { leads: 1500, templates: 30, variations: 1000 }\n  };\n\n  const userPlan = user?.plan || \"free\";\n  const currentLimits = planLimits[userPlan as keyof typeof planLimits];\n  \n  // Use real analytics data and fresh user data\n  const leadsUsed = (analytics as any)?.leadsGenerated || 0;\n  const variationsUsed = (freshUser as any)?.aiVariationsUsed || (user as any)?.aiVariationsUsed || 0;\n  const leadsUsage = (leadsUsed / currentLimits.leads) * 100;\n  const variationsUsage = (variationsUsed / currentLimits.variations) * 100;\n\n\n\n  const handleProfileUpdate = () => {\n    updateProfileMutation.mutate(profileForm);\n  };\n\n  const handleTestEmailConfig = () => {\n    testEmailConfigMutation.mutate(emailConfig);\n  };\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName[0].toUpperCase();\n    }\n    return \"U\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2 space-y-6\">\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n              <div className=\"h-48 bg-gray-200 rounded\"></div>\n            </div>\n            <div className=\"space-y-6\">\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n              <div className=\"h-32 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Paramètres</h2>\n          <p className=\"text-gray-600\">Configurez votre compte et intégrations</p>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Account Settings */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"h-5 w-5 mr-2\" />\n                Informations du Compte\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Prénom</label>\n                  <Input\n                    type=\"text\"\n                    value={profileForm.firstName}\n                    onChange={(e) => setProfileForm({ ...profileForm, firstName: e.target.value })}\n                    placeholder=\"John\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nom</label>\n                  <Input\n                    type=\"text\"\n                    value={profileForm.lastName}\n                    onChange={(e) => setProfileForm({ ...profileForm, lastName: e.target.value })}\n                    placeholder=\"Doe\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n                <Input\n                  type=\"email\"\n                  value={profileForm.email}\n                  onChange={(e) => setProfileForm({ ...profileForm, email: e.target.value })}\n                  placeholder=\"john.doe@exemple.fr\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Mot de passe</label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={profileForm.password}\n                    onChange={(e) => setProfileForm({ ...profileForm, password: e.target.value })}\n                    placeholder=\"••••••••\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    tabIndex={-1}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-gray-500\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-gray-500\" />\n                    )}\n                    <span className=\"sr-only\">\n                      {showPassword ? \"Masquer le mot de passe\" : \"Afficher le mot de passe\"}\n                    </span>\n                  </Button>\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Entreprise</label>\n                <Input\n                  type=\"text\"\n                  value={profileForm.company}\n                  onChange={(e) => setProfileForm({ ...profileForm, company: e.target.value })}\n                  placeholder=\"Mon Entreprise\"\n                />\n              </div>\n              <div className=\"flex justify-end\">\n                <Button \n                  onClick={handleProfileUpdate}\n                  disabled={updateProfileMutation.isPending}\n                >\n                  {updateProfileMutation.isPending ? \"Sauvegarde...\" : \"Sauvegarder\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"h-5 w-5 mr-2\" />\n                Connexion Email\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Connectez votre compte Google ou Outlook pour envoyer vos campagnes email directement depuis votre boîte mail.\n              </p>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <OAuthConnections />\n            </CardContent>\n          </Card>\n\n\n        </div>\n\n        {/* Subscription & Usage */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Crown className=\"h-5 w-5 mr-2\" />\n                Abonnement Actuel\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center mb-4\">\n                <div className=\"text-3xl font-bold text-white capitalize mb-2\">{userPlan}</div>\n                <div className=\"text-gray-600 mb-4\">\n                  {userPlan === \"free\" ? \"Plan gratuit\" : `Plan ${userPlan}`}\n                </div>\n              </div>\n              <div className=\"space-y-4 mb-6\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">Leads utilisés</span>\n                    <span className=\"font-medium\">{leadsUsed}/{currentLimits.leads}</span>\n                  </div>\n                  <Progress value={leadsUsage} className=\"h-2\" />\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">Templates accessibles</span>\n                    <span className=\"font-medium\">{currentLimits.templates}/30</span>\n                  </div>\n                  <Progress value={(currentLimits.templates/30) * 100} className=\"h-2\" />\n                </div>\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span className=\"text-gray-600\">Variations utilisées</span>\n                    <span className=\"font-medium\">{variationsUsed}/{currentLimits.variations}</span>\n                  </div>\n                  <Progress value={variationsUsage} className=\"h-2\" />\n                </div>\n              </div>\n              <Button \n                className=\"w-full\"\n                onClick={() => setLocation('/upgrade')}\n              >\n                <Crown className=\"h-4 w-4 mr-2\" />\n                Choisir un Plan\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\">\n                  <Download className=\"h-4 w-4 mr-3\" />\n                  Exporter mes données\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start\">\n                  <HelpCircle className=\"h-4 w-4 mr-3\" />\n                  Support client\n                </Button>\n                <Button variant=\"ghost\" className=\"w-full justify-start text-red-600 hover:text-red-700\">\n                  <Trash2 className=\"h-4 w-4 mr-3\" />\n                  Supprimer mon compte\n                </Button>\n                \n                {/* Bouton de résiliation d'abonnement */}\n                {user?.plan && user.plan !== 'free' && (\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-red-600 hover:text-red-700 border-t border-gray-200 mt-3 pt-3\"\n                    onClick={() => setLocation('/cancel-subscription')}\n                  >\n                    <AlertTriangle className=\"h-4 w-4 mr-3\" />\n                    Résilier mon abonnement\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* User Profile Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Profil</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={user?.profileImageUrl || undefined} />\n                  <AvatarFallback className=\"bg-primary text-white\">\n                    {getInitials(user?.firstName || \"\", user?.lastName || \"\")}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h4 className=\"font-medium text-white\">\n                    {user?.firstName && user?.lastName \n                      ? `${user.firstName} ${user.lastName}`\n                      : user?.email || \"Utilisateur\"\n                    }\n                  </h4>\n                  <p className=\"text-sm text-gray-600\">{user?.email}</p>\n                </div>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full\"\n                onClick={() => window.location.href = \"/api/logout\"}\n              >\n                Se déconnecter\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14947},"client/src/components/dashboard/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  BarChart3, \n  Users, \n  Mail, \n  Send, \n  GitBranch, \n  Calendar, \n  Settings, \n  Rocket,\n  Crown,\n  Target\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport default function Sidebar({ activeSection, onSectionChange }: SidebarProps) {\n  const { user } = useAuth();\n\n  // Get real-time analytics data\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/analytics/stats'],\n    enabled: !!user,\n    refetchInterval: 10000, // Refresh every 10 seconds\n  });\n\n  const navigationItems = [\n    { id: \"dashboard\", label: <span translate=\"no\">Dashboard</span>, icon: BarChart3 },\n    { id: \"leads\", label: <span translate=\"no\">Leads</span>, icon: Users },\n    { id: \"templates\", label: <span translate=\"no\">Templates</span>, icon: Mail },\n    { id: \"custom-emails\", label: \"Mes Emails\", icon: Mail },\n    { id: \"campaigns\", label: \"Campagnes\", icon: Send },\n    { id: \"sequences\", label: \"Séquences\", icon: GitBranch },\n    { id: \"closing\", label: <span translate=\"no\">Service de Closing</span>, icon: Target, comingSoon: true },\n    { id: \"calendar\", label: \"Calendrier\", icon: Calendar },\n    { id: \"analytics\", label: \"Statistiques\", icon: BarChart3 },\n    { id: \"settings\", label: \"Paramètres\", icon: Settings },\n  ];\n\n  const planLimits = {\n    free: { leads: 5, templates: 1, variations: 5 },\n    starter: { leads: 100, templates: 5, variations: 100 },\n    pro: { leads: 400, templates: 15, variations: 300 },\n    growth: { leads: 1500, templates: 30, variations: 1000 }\n  };\n\n  const currentLimits = planLimits[user?.plan as keyof typeof planLimits] || planLimits.free;\n  const leadsUsed = (analytics as any)?.leadsGenerated || 0;\n  const leadsUsage = (leadsUsed / currentLimits.leads) * 100;\n\n  return (\n    <aside className=\"w-64 bg-card shadow-lg border-r border-border\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center mb-8\">\n          <Rocket className=\"h-8 w-8 text-primary mr-3\" />\n          <span className=\"text-xl font-bold text-foreground\" translate=\"no\">LeadPilot</span>\n        </div>\n        \n        <nav className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => !item.comingSoon && onSectionChange(item.id)}\n              className={`w-full flex items-center justify-between px-3 py-2 rounded-lg text-left transition-colors ${\n                activeSection === item.id\n                  ? \"text-primary bg-primary/10\"\n                  : item.comingSoon\n                  ? \"text-muted-foreground/50 cursor-not-allowed\"\n                  : \"text-muted-foreground hover:bg-muted\"\n              }`}\n            >\n              <div className=\"flex items-center\">\n                <item.icon className=\"h-5 w-5 mr-3\" />\n                {item.label}\n              </div>\n              {item.comingSoon && (\n                <span className=\"text-xs bg-primary/20 text-primary px-2 py-1 rounded-full\">\n                  Bientôt\n                </span>\n              )}\n            </button>\n          ))}\n        </nav>\n      </div>\n      \n      <div className=\"border-t border-border p-6\">\n        <div className=\"bg-primary/5 p-4 rounded-lg\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium text-primary capitalize\">\n              Plan {user?.plan || 'Free'}\n            </span>\n            <span className=\"text-xs bg-primary text-white px-2 py-1 rounded\">\n              {leadsUsed}/{currentLimits.leads}\n            </span>\n          </div>\n          <Progress value={leadsUsage} className=\"mb-2\" />\n          <p className=\"text-xs text-primary/70 mb-1\">\n            {leadsUsed} leads utilisés ce mois\n          </p>\n          <p className=\"text-xs text-primary/70 mb-3\">\n            {currentLimits.variations} variations disponibles\n          </p>\n          <Button \n            size=\"sm\" \n            className=\"w-full\"\n            onClick={() => onSectionChange(\"settings\")}\n          >\n            <Crown className=\"h-4 w-4 mr-2\" />\n            <span translate=\"no\">Upgrade</span>\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4440},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Mail, Eye, Calendar } from \"lucide-react\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  // Calcul des vraies variations basé sur les données utilisateur\n  const currentStats = stats as any;\n  const leadsGenerated = currentStats?.leadsGenerated || 0;\n  const emailsSent = currentStats?.emailsSent || 0;\n  const openRate = currentStats?.openRate || 0;\n  const meetingsBooked = currentStats?.meetingsBooked || 0;\n\n  // Calculs de progression réalistes basés sur l'activité\n  const leadsChange = leadsGenerated > 0 ? `+${Math.min(100, leadsGenerated * 20)}%` : \"0%\";\n  const emailsChange = emailsSent > 0 ? `+${Math.min(200, emailsSent * 15)}%` : \"0%\";\n  const openRateChange = openRate > 0 ? `+${Math.floor(openRate / 10)}%` : \"0%\";\n  const rdvChange = meetingsBooked > 0 ? `+${meetingsBooked * 50}%` : \"0%\";\n\n  const statCards = [\n    {\n      title: \"Leads Générés\",\n      value: leadsGenerated,\n      icon: Users,\n      change: leadsChange,\n      color: \"bg-blue-100 text-blue-600\"\n    },\n    {\n      title: \"Emails Envoyés\",\n      value: emailsSent,\n      icon: Mail,\n      change: emailsChange,\n      color: \"bg-emerald-100 text-emerald-600\"\n    },\n    {\n      title: \"Taux d'Ouverture\",\n      value: `${openRate}%`,\n      icon: Eye,\n      change: openRateChange,\n      color: \"bg-amber-100 text-amber-600\"\n    },\n    {\n      title: \"RDV Bookés\",\n      value: meetingsBooked,\n      icon: Calendar,\n      change: rdvChange,\n      color: \"bg-purple-100 text-purple-600\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {Array.from({ length: 4 }).map((_, index) => (\n          <Card key={index} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-16 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statCards.map((stat, index) => (\n        <Card key={index} className=\"shadow-sm border border-border\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">{stat.title}</p>\n                <p className=\"text-3xl font-bold text-card-foreground\">{stat.value}</p>\n              </div>\n              <div className={`w-12 h-12 ${stat.color} rounded-lg flex items-center justify-center`}>\n                <stat.icon className=\"h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center mt-4\">\n              <span className=\"text-emerald-500 text-sm\">{stat.change}</span>\n              <span className=\"text-muted-foreground text-sm ml-2\">vs mois dernier</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3123},"client/src/components/dashboard/templates-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Bot, Plus, Edit, Copy, Lock, RefreshCw, Wand2, Trash2 } from \"lucide-react\";\nimport type { Template } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport CustomEmailEditor from \"./custom-email-editor\";\n\nexport default function TemplatesSection() {\n  const [activeCategory, setActiveCategory] = useState(\"all\");\n  const [editingTemplate, setEditingTemplate] = useState<Template | null>(null);\n  const [editedSubject, setEditedSubject] = useState(\"\");\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [showCustomEmailDialog, setShowCustomEmailDialog] = useState(false);\n  const [customName, setCustomName] = useState(\"\");\n  const [customSubject, setCustomSubject] = useState(\"\");\n  const [customContent, setCustomContent] = useState(\"\");\n  const [originalTemplates, setOriginalTemplates] = useState<{[key: string]: Template}>({});\n  const [generatingVariation, setGeneratingVariation] = useState<string | null>(null);\n  const [selectedTemplateForEdit, setSelectedTemplateForEdit] = useState<Template | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates = [], isLoading } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const { user } = useAuth();\n\n  const planHierarchy = {\n    free: 1,\n    starter: 5,\n    pro: 15,\n    growth: 30\n  };\n\n  const userPlan = (user as any)?.plan || \"free\";\n  const userLimit = planHierarchy[userPlan as keyof typeof planHierarchy];\n\n  // Mutation pour copier dans le presse-papiers\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copié !\",\n        description: `${type} copié dans le presse-papiers`,\n      });\n    } catch (err) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de copier le texte\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Mutation pour utiliser un template\n  const useTemplateMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const response = await fetch(`/api/templates/${templateId}/use`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template utilisé !\",\n        description: \"Le template a été ajouté à vos campagnes et le compteur d'utilisation mis à jour\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'utiliser ce template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour générer une variation avec IA (modifie le template existant)\n  const generateVariationMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const template = templates.find(t => t.id === templateId);\n      if (!template) throw new Error(\"Template not found\");\n      \n      // Sauvegarder l'original s'il n'existe pas\n      if (!originalTemplates[templateId]) {\n        setOriginalTemplates(prev => ({\n          ...prev,\n          [templateId]: { ...template }\n        }));\n      }\n\n      // Utiliser l'IA pour générer une variation complète\n      const response = await fetch(`/api/templates/${templateId}/ai-variation`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Variation IA appliquée !\",\n        description: \"Le template a été complètement repensé tout en gardant sa structure\",\n      });\n      setGeneratingVariation(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: () => {\n      setGeneratingVariation(null);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de générer la variation IA\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour restaurer l'original\n  const restoreOriginalMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const original = originalTemplates[templateId];\n      if (!original) throw new Error(\"Original not found\");\n\n      const response = await fetch(`/api/templates/${templateId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ subject: original.subject, content: original.content }),\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template restauré !\",\n        description: \"Le template original a été restauré\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n  });\n\n  // Mutation pour créer un email personnalisé\n  const createCustomEmailMutation = useMutation({\n    mutationFn: async ({ name, subject, content }: { name: string; subject: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/custom-emails\", {\n        name, \n        subject, \n        content\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email créé !\",\n        description: \"Votre email personnalisé a été ajouté dans 'Mes Emails'\",\n      });\n      setShowCustomEmailDialog(false);\n      setCustomName(\"\");\n      setCustomSubject(\"\");\n      setCustomContent(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-emails\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer l'email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour éditer un template\n  const editTemplateMutation = useMutation({\n    mutationFn: async ({ id, subject, content }: { id: string; subject: string; content: string }) => {\n      const response = await fetch(`/api/templates/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ subject, content }),\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template modifié !\",\n        description: \"Vos modifications ont été enregistrées\",\n      });\n      setEditingTemplate(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditTemplate = (template: Template) => {\n    setEditingTemplate(template);\n    setEditedSubject(template.subject);\n    setEditedContent(template.content);\n  };\n\n  const handleSaveEdit = () => {\n    if (editingTemplate) {\n      editTemplateMutation.mutate({\n        id: editingTemplate.id,\n        subject: editedSubject,\n        content: editedContent,\n      });\n    }\n  };\n\n  const handleGenerateVariation = (templateId: string) => {\n    setGeneratingVariation(templateId);\n    generateVariationMutation.mutate(templateId);\n  };\n\n  // Mutation pour supprimer un template\n  const deleteTemplateMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const response = await fetch(`/api/templates/${templateId}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template supprimé !\",\n        description: \"Le template a été supprimé avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le template.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\n    { id: \"all\", label: `Tous (${userLimit}/30)` },\n    { id: \"free\", label: \"Free (1/30)\" },\n    { id: \"starter\", label: \"Starter (5/30)\", disabled: userPlan === \"free\" },\n    { id: \"pro\", label: \"Pro (15/30)\", disabled: ![\"pro\", \"growth\"].includes(userPlan) },\n    { id: \"growth\", label: \"Growth (30/30)\", disabled: userPlan !== \"growth\" }\n  ];\n\n  const filteredTemplates = activeCategory === \"all\" \n    ? templates.filter((template: Template) => {\n        const planHierarchy = [\"free\", \"starter\", \"pro\", \"growth\"];\n        const userIndex = planHierarchy.indexOf(userPlan);\n        const templateIndex = planHierarchy.indexOf(template.plan);\n        return userIndex >= templateIndex;\n      })\n    : templates.filter((template: Template) => {\n        const planHierarchy = [\"free\", \"starter\", \"pro\", \"growth\"];\n        const userIndex = planHierarchy.indexOf(userPlan);\n        const templateIndex = planHierarchy.indexOf(template.plan);\n        return template.plan === activeCategory && userIndex >= templateIndex;\n      });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"h-16 bg-muted rounded\"></div>\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {Array.from({ length: 4 }).map((_, index) => (\n              <div key={index} className=\"h-64 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Templates d'Emails</h2>\n          <p className=\"text-muted-foreground\">30 templates optimisés avec variations IA</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={() => setShowCustomEmailDialog(true)}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Écrire Email Personnel\n          </Button>\n        </div>\n      </div>\n\n      {/* Template Categories */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex space-x-4 overflow-x-auto\">\n            {categories.map((category) => (\n              <Button\n                key={category.id}\n                variant={activeCategory === category.id ? \"default\" : \"ghost\"}\n                onClick={() => !category.disabled && setActiveCategory(category.id)}\n                disabled={category.disabled}\n                className={`whitespace-nowrap ${category.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n              >\n                {category.label}\n                {category.disabled && <Lock className=\"h-3 w-3 ml-1\" />}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Templates Grid */}\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {filteredTemplates.length === 0 ? (\n          <div className=\"col-span-2 text-center py-12\">\n            <p className=\"text-muted-foreground mb-4\">Aucun template disponible pour cette catégorie.</p>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Créer un template\n            </Button>\n          </div>\n        ) : (\n          filteredTemplates.map((template: Template) => {\n            const isLocked = ![\"free\", \"starter\", \"pro\", \"growth\"].slice(0, \n              Object.keys(planHierarchy).indexOf(userPlan) + 1\n            ).includes(template.plan);\n\n            return (\n              <Card \n                key={template.id} \n                className={`${isLocked ? 'opacity-60' : ''} hover:shadow-lg transition-shadow`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"secondary\">{template.plan}</Badge>\n                        {isLocked && <Lock className=\"h-4 w-4 text-amber-600\" />}\n                      </div>\n                    </div>\n\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {/* Template Preview */}\n                  <div className=\"bg-muted/50 p-4 rounded-lg mb-4\">\n                    <div className=\"text-sm text-card-foreground\">\n                      <div className=\"mb-2\">\n                        <strong>Objet:</strong> {template.subject}\n                      </div>\n                      <div className=\"mb-3 border-t border-border pt-3\">\n                        <div className=\"whitespace-pre-line text-sm\">\n                          {isLocked ? (\n                            <div className=\"text-muted-foreground\">\n                              {template.content.substring(0, 100)}...\n                              <p className=\"mt-2 text-amber-600\">Contenu verrouillé</p>\n                            </div>\n                          ) : (\n                            <span>{template.content}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n\n\n                  {/* Template Stats */}\n                  <div className=\"flex items-center justify-between pt-4 border-t\">\n                    {!isLocked ? (\n                      <>\n                        <div className=\"flex space-x-4 text-sm text-gray-600\">\n                          <span>Utilisé: {template.timesUsed} fois</span>\n                          <span>Taux ouverture: {template.openRate || 0}%</span>\n                        </div>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => setSelectedTemplateForEdit(template)}\n                            title=\"Créer un email personnalisé à partir de ce template\"\n                          >\n                            <Wand2 className=\"h-4 w-4 mr-1\" />\n                            Choisir Template\n                          </Button>\n\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"text-sm text-gray-500\">\n                          Débloque avec le plan {template.plan}\n                        </span>\n                        <Button size=\"sm\" variant=\"secondary\">\n                          Upgrader\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Dialog d'édition */}\n      <Dialog open={!!editingTemplate} onOpenChange={() => setEditingTemplate(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Modifier le Template</DialogTitle>\n            <DialogDescription>\n              Personnalisez l'objet et le contenu de votre template d'email.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            <div>\n              <Label htmlFor=\"subject\">Objet de l'email</Label>\n              <Input\n                id=\"subject\"\n                value={editedSubject}\n                onChange={(e) => setEditedSubject(e.target.value)}\n                placeholder=\"Objet de votre email...\"\n              />\n            </div>\n            <div className=\"flex-1\">\n              <Label htmlFor=\"content\">Contenu de l'email</Label>\n              <Textarea\n                id=\"content\"\n                value={editedContent}\n                onChange={(e) => setEditedContent(e.target.value)}\n                placeholder=\"Contenu de votre email...\"\n                rows={20}\n                className=\"resize-none font-mono text-sm min-h-[400px]\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                💡 <strong>Commandes utiles :</strong> [PRENOM], [ENTREPRISE], [POSTE], [SECTEUR]\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={() => setEditingTemplate(null)}>\n              Annuler\n            </Button>\n            <Button \n              onClick={handleSaveEdit}\n              disabled={editTemplateMutation.isPending}\n            >\n              {editTemplateMutation.isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Dialog email personnalisé */}\n      <Dialog open={showCustomEmailDialog} onOpenChange={setShowCustomEmailDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Créer un Email Personnalisé</DialogTitle>\n            <DialogDescription>\n              Rédigez votre propre template d'email. Disponible pour tous les plans.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            <div>\n              <Label htmlFor=\"customName\">Nom de l'email</Label>\n              <Input\n                id=\"customName\"\n                value={customName}\n                onChange={(e) => setCustomName(e.target.value)}\n                placeholder=\"Ex: Email de présentation\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"customSubject\">Objet de l'email</Label>\n              <Input\n                id=\"customSubject\"\n                value={customSubject}\n                onChange={(e) => setCustomSubject(e.target.value)}\n                placeholder=\"Ex: Collaboration avec [ENTREPRISE]\"\n              />\n            </div>\n            <div className=\"flex-1\">\n              <Label htmlFor=\"customContent\">Contenu de l'email</Label>\n              <Textarea\n                id=\"customContent\"\n                value={customContent}\n                onChange={(e) => setCustomContent(e.target.value)}\n                placeholder={`Bonjour [PRENOM],\n\nJ'espère que vous allez bien. Je me permets de vous contacter car...\n\nCordialement,\n[EXPEDITEUR]`}\n                rows={20}\n                className=\"resize-none font-mono text-sm min-h-[400px]\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                💡 <strong>Variables disponibles :</strong> [PRENOM], [ENTREPRISE], [POSTE], [SECTEUR], [EXPEDITEUR]\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={() => setShowCustomEmailDialog(false)}>\n              Annuler\n            </Button>\n            <Button \n              onClick={() => createCustomEmailMutation.mutate({ name: customName, subject: customSubject, content: customContent })}\n              disabled={createCustomEmailMutation.isPending || !customName.trim() || !customSubject.trim() || !customContent.trim()}\n            >\n              {createCustomEmailMutation.isPending ? \"Création...\" : \"Créer l'Email\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Custom Email Editor */}\n      {selectedTemplateForEdit && (\n        <CustomEmailEditor\n          template={selectedTemplateForEdit}\n          isOpen={!!selectedTemplateForEdit}\n          onClose={() => setSelectedTemplateForEdit(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":20828},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/dashboard/custom-emails-section.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit3, Trash2, Eye, Copy, Wand2, RotateCcw, Calendar } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport type { CustomEmail } from \"@shared/schema\";\n\ninterface CustomEmailsSectionProps {\n  onSectionChange?: (section: string) => void;\n}\n\nexport default function CustomEmailsSection({ onSectionChange }: CustomEmailsSectionProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Vérification du plan pour le booking\n  const userPlan = (user as any)?.plan || \"free\";\n  const canUseBooking = ['starter', 'pro', 'growth'].includes(userPlan);\n  const [viewingEmail, setViewingEmail] = useState<CustomEmail | null>(null);\n  const [editingEmail, setEditingEmail] = useState<CustomEmail | null>(null);\n  const [editedName, setEditedName] = useState(\"\");\n  const [editedSubject, setEditedSubject] = useState(\"\");\n  const [editedContent, setEditedContent] = useState(\"\");\n  const [originalContent, setOriginalContent] = useState(\"\");\n  const [generatingVariation, setGeneratingVariation] = useState(false);\n  const [lastGeneratedContent, setLastGeneratedContent] = useState(\"\");\n\n  // Fonction pour ajouter le lien de booking\n  const handleAddBookingLink = () => {\n    if (!canUseBooking) {\n      toast({\n        title: \"Fonctionnalité réservée\",\n        description: \"Les liens de RDV sont disponibles à partir du plan Starter.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userId = (user as any)?.id;\n    const bookingText = `\\n\\nPour programmer un RDV, cliquez ici :\\nhttps://leadpilot.com/book/${userId}\\n\\nOu répondez à cet email pour convenir d'un autre créneau.`;\n    \n    // Ajouter le texte à la fin du contenu existant\n    setEditedContent(prevContent => prevContent + bookingText);\n    \n    toast({\n      title: \"Lien de RDV ajouté !\",\n      description: \"Le texte de proposition de rendez-vous a été inséré à la fin de votre email.\",\n    });\n  };\n\n  const { data: customEmails = [], isLoading } = useQuery<CustomEmail[]>({\n    queryKey: [\"/api/custom-emails\"],\n  });\n\n  const deleteEmailMutation = useMutation({\n    mutationFn: async (emailId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/custom-emails/${emailId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-emails\"] });\n      toast({\n        title: \"Email supprimé\",\n        description: \"L'email personnalisé a été supprimé avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer l'email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEmailMutation = useMutation({\n    mutationFn: async (data: { id: string; name: string; subject: string; content: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/custom-emails/${data.id}`, {\n        name: data.name,\n        subject: data.subject,\n        content: data.content,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-emails\"] });\n      setEditingEmail(null);\n      toast({\n        title: \"Email mis à jour\",\n        description: \"L'email personnalisé a été modifié avec succès.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier l'email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCopyEmail = (customEmail: CustomEmail) => {\n    const emailText = `Objet: ${customEmail.subject}\\n\\nContenu:\\n${customEmail.content}`;\n    navigator.clipboard.writeText(emailText);\n    toast({\n      title: \"Email copié !\",\n      description: \"Le contenu a été copié dans le presse-papier\",\n    });\n  };\n\n  const handleEditEmail = (customEmail: CustomEmail) => {\n    setEditingEmail(customEmail);\n    setEditedName(customEmail.name);\n    setEditedSubject(customEmail.subject);\n    setEditedContent(customEmail.content);\n    setOriginalContent(customEmail.content); // Sauvegarder le contenu original\n  };\n\n  const handleSaveEdit = () => {\n    if (!editingEmail) return;\n    \n    updateEmailMutation.mutate({\n      id: editingEmail.id,\n      name: editedName,\n      subject: editedSubject,\n      content: editedContent,\n    });\n  };\n\n  const generateVariationMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", \"/api/custom-emails/generate-variation\", {\n        content: content\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.quotaExhausted) {\n        toast({\n          title: \"Quota épuisé\",\n          description: data.message,\n          variant: \"destructive\",\n        });\n        setGeneratingVariation(false);\n        return;\n      }\n      \n      setLastGeneratedContent(editedContent); // Sauvegarder le contenu précédent\n      setEditedContent(data.variation);\n      setGeneratingVariation(false);\n      \n      // Invalider le cache utilisateur pour mettre à jour les quotas\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      \n      toast({\n        title: \"Variation générée !\",\n        description: `Il vous reste ${data.remainingVariations}/${data.monthlyLimit} variations ce mois.`,\n      });\n    },\n    onError: (error: any) => {\n      setGeneratingVariation(false);\n      const errorMessage = error?.message?.includes(\"429\") \n        ? \"Quota de variations épuisé pour ce mois\"\n        : \"Impossible de générer une variation. Réessayez.\";\n      toast({\n        title: \"Erreur\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateVariation = () => {\n    if (!editedContent.trim()) return;\n    setGeneratingVariation(true);\n    generateVariationMutation.mutate(editedContent);\n  };\n\n  const handleResetToOriginal = () => {\n    setEditedContent(originalContent);\n    toast({\n      title: \"Contenu restauré\",\n      description: \"Le contenu original a été restauré.\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-white\">Mes Emails Personnalisés</h2>\n          <p className=\"text-gray-300\">\n            Gérez vos emails créés à partir des templates de base\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          {customEmails.length} email{customEmails.length > 1 ? 's' : ''} sauvegardé{customEmails.length > 1 ? 's' : ''}\n        </Badge>\n      </div>\n\n      {customEmails.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n                <Plus className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium text-white mb-2\">\n                  Aucun email personnalisé\n                </h3>\n                <p className=\"text-gray-600 max-w-md\">\n                  Créez vos premiers emails personnalisés en utilisant le bouton \"Choisir Template\" \n                  dans la section Templates.\n                </p>\n              </div>\n              <Button \n                className=\"mt-4\"\n                onClick={() => onSectionChange?.('templates')}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Aller aux Templates\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {customEmails.map((customEmail) => (\n            <Card key={customEmail.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <CardTitle className=\"text-lg truncate\">{customEmail.name}</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Créé le {customEmail.createdAt ? new Date(customEmail.createdAt).toLocaleDateString('fr-FR') : 'Date inconnue'}\n                    </p>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Objet */}\n                <div>\n                  <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                    OBJET\n                  </label>\n                  <p className=\"text-sm mt-1 line-clamp-2\">{customEmail.subject}</p>\n                </div>\n\n                {/* Aperçu contenu */}\n                <div>\n                  <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                    APERÇU\n                  </label>\n                  <p className=\"text-sm text-muted-foreground mt-1 line-clamp-3\">\n                    {customEmail.content.substring(0, 150)}...\n                  </p>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center justify-between pt-2 border-t\">\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleCopyEmail(customEmail)}\n                      title=\"Copier\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setViewingEmail(customEmail)}\n                      title=\"Aperçu complet\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEditEmail(customEmail)}\n                      title=\"Éditer\"\n                    >\n                      <Edit3 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-700\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Supprimer l'email</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Êtes-vous sûr de vouloir supprimer l'email \"{customEmail.name}\" ? \n                          Cette action est irréversible.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Annuler</AlertDialogCancel>\n                        <AlertDialogAction \n                          onClick={() => deleteEmailMutation.mutate(customEmail.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Supprimer\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Dialog de visualisation */}\n      <Dialog open={!!viewingEmail} onOpenChange={() => setViewingEmail(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>{viewingEmail?.name}</DialogTitle>\n            <DialogDescription>\n              Aperçu complet de votre email personnalisé\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            <div>\n              <Label>Objet de l'email</Label>\n              <div className=\"mt-1 p-3 bg-muted rounded-md\">\n                {viewingEmail?.subject}\n              </div>\n            </div>\n            <div>\n              <Label>Contenu de l'email</Label>\n              <div className=\"mt-1 p-4 bg-muted rounded-md whitespace-pre-line font-mono text-sm min-h-[300px]\">\n                {viewingEmail?.content}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={() => setViewingEmail(null)}>\n              Fermer\n            </Button>\n            <Button onClick={() => handleCopyEmail(viewingEmail!)}>\n              Copier\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Dialog d'édition */}\n      <Dialog open={!!editingEmail} onOpenChange={() => setEditingEmail(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n          <DialogHeader>\n            <DialogTitle>Modifier l'Email</DialogTitle>\n            <DialogDescription>\n              Modifiez le nom, l'objet et le contenu de votre email personnalisé\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            <div>\n              <Label htmlFor=\"edit-name\">Nom de l'email</Label>\n              <Input\n                id=\"edit-name\"\n                value={editedName}\n                onChange={(e) => setEditedName(e.target.value)}\n                placeholder=\"Nom de votre email...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-subject\">Objet de l'email</Label>\n              <Input\n                id=\"edit-subject\"\n                value={editedSubject}\n                onChange={(e) => setEditedSubject(e.target.value)}\n                placeholder=\"Objet de votre email...\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"edit-content\">Contenu de l'email</Label>\n              <Textarea\n                id=\"edit-content\"\n                value={editedContent}\n                onChange={(e) => setEditedContent(e.target.value)}\n                placeholder=\"Contenu de votre email...\"\n                rows={20}\n                className=\"resize-none font-mono text-sm min-h-[400px]\"\n              />\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                💡 <strong>Variables disponibles :</strong> [PRENOM], [ENTREPRISE], [POSTE], [SECTEUR], [EXPEDITEUR]\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-between pt-4 border-t\">\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\"\n                onClick={handleGenerateVariation}\n                disabled={generatingVariation || !editedContent.trim()}\n                className=\"bg-blue-50 hover:bg-blue-100 text-blue-700 border-blue-200\"\n              >\n                {generatingVariation ? (\n                  <>\n                    <Wand2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Génération...\n                  </>\n                ) : (\n                  <>\n                    <Wand2 className=\"h-4 w-4 mr-2\" />\n                    Variation\n                  </>\n                )}\n              </Button>\n\n              <Button \n                variant=\"outline\"\n                onClick={handleAddBookingLink}\n                disabled={!canUseBooking}\n                title={!canUseBooking ? \"Disponible à partir du plan Starter\" : \"Ajouter un lien de prise de RDV\"}\n                className=\"bg-green-50 hover:bg-green-100 text-green-700 border-green-200\"\n              >\n                <Calendar className=\"h-4 w-4 mr-2\" />\n                Proposer RDV\n              </Button>\n              \n              <Button \n                variant=\"outline\"\n                onClick={handleResetToOriginal}\n                disabled={editedContent === originalContent}\n                className=\"bg-gray-50 hover:bg-gray-100 text-gray-700 border-gray-200\"\n              >\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Original\n              </Button>\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={() => setEditingEmail(null)}>\n                Annuler\n              </Button>\n              <Button \n                onClick={handleSaveEdit}\n                disabled={updateEmailMutation.isPending || !editedName.trim() || !editedSubject.trim() || !editedContent.trim()}\n              >\n                {updateEmailMutation.isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":18646},"client/src/components/dashboard/custom-email-editor.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, RefreshCw, Save, X, RotateCcw, Calendar } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Template } from \"@shared/schema\";\n\ninterface CustomEmailEditorProps {\n  template: Template;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CustomEmailEditor({ template, isOpen, onClose }: CustomEmailEditorProps) {\n  const [emailName, setEmailName] = useState(\"\");\n  const [subject, setSubject] = useState(template.subject);\n  const [content, setContent] = useState(template.content);\n  const [originalSubject] = useState(template.subject);\n  const [originalContent] = useState(template.content);\n  const [isGeneratingVariation, setIsGeneratingVariation] = useState(false);\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Vérification du plan pour le booking\n  const userPlan = (user as any)?.plan || \"free\";\n  const canUseBooking = ['starter', 'pro', 'growth'].includes(userPlan);\n\n  // Fonction pour ajouter le lien de booking\n  const handleAddBookingLink = () => {\n    if (!canUseBooking) {\n      toast({\n        title: \"Fonctionnalité réservée\",\n        description: \"Les liens de RDV sont disponibles à partir du plan Starter.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userId = (user as any)?.id;\n    const bookingText = `\\n\\nPour programmer un RDV, cliquez ici :\\nhttps://leadpilot.com/book/${userId}\\n\\nOu répondez à cet email pour convenir d'un autre créneau.`;\n    \n    // Ajouter le texte à la fin du contenu existant\n    setContent(prevContent => prevContent + bookingText);\n    \n    toast({\n      title: \"Lien de RDV ajouté !\",\n      description: \"Le texte de proposition de rendez-vous a été inséré à la fin de votre email.\",\n    });\n  };\n\n  // Mutation pour générer une variation IA\n  const generateVariationMutation = useMutation({\n    mutationFn: async () => {\n      setIsGeneratingVariation(true);\n      const response = await fetch(`/api/templates/${template.id}/ai-variation`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Les variations sont appliquées au template temporairement pour cet éditeur\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      // Recharger le template modifié\n      const updatedTemplate = queryClient.getQueryData<Template[]>([\"/api/templates\"])?.find(t => t.id === template.id);\n      if (updatedTemplate) {\n        setSubject(updatedTemplate.subject);\n        setContent(updatedTemplate.content);\n      }\n      setIsGeneratingVariation(false);\n      toast({\n        title: \"Variation générée !\",\n        description: \"L'IA a créé une nouvelle version du contenu\",\n      });\n    },\n    onError: () => {\n      setIsGeneratingVariation(false);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de générer la variation\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation pour sauvegarder l'email personnalisé\n  const saveCustomEmailMutation = useMutation({\n    mutationFn: async () => {\n      if (!emailName.trim()) {\n        throw new Error(\"Le nom de l'email est obligatoire\");\n      }\n      \n      const response = await apiRequest(\"POST\", \"/api/custom-emails\", {\n        name: emailName,\n        subject: subject,\n        content: content,\n        baseTemplateId: template.id,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/custom-emails\"] });\n      toast({\n        title: \"Email sauvegardé !\",\n        description: \"Votre email personnalisé a été enregistré avec succès\",\n      });\n      onClose();\n      // Reset\n      setEmailName(\"\");\n      setSubject(originalSubject);\n      setContent(originalContent);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de sauvegarder l'email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleResetToOriginal = () => {\n    setSubject(originalSubject);\n    setContent(originalContent);\n    toast({\n      title: \"Contenu restauré\",\n      description: \"Le template a été remis à sa version originale\",\n    });\n  };\n\n  const handleCancel = () => {\n    setEmailName(\"\");\n    setSubject(originalSubject);\n    setContent(originalContent);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleCancel}>\n      <DialogContent className=\"max-w-6xl max-h-[95vh] overflow-hidden flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <span>Créer un Email Personnalisé</span>\n            <Badge variant=\"outline\">{template.name}</Badge>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"flex-1 overflow-y-auto space-y-6 pr-2\">\n          {/* Nom de l'email */}\n          <div>\n            <Label htmlFor=\"emailName\">Nom de votre email personnalisé *</Label>\n            <Input\n              id=\"emailName\"\n              value={emailName}\n              onChange={(e) => setEmailName(e.target.value)}\n              placeholder=\"Ex: Email intro secteur tech, Relance prospect qualified...\"\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-6\">\n            {/* Aperçu Template Original */}\n            <div>\n              <h3 className=\"text-lg font-medium mb-3\">📋 Template de Base</h3>\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">\n                    {template.name}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">OBJET ORIGINAL</Label>\n                    <div className=\"text-sm bg-muted p-2 rounded text-muted-foreground\">\n                      {originalSubject}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs text-muted-foreground\">CONTENU ORIGINAL</Label>\n                    <div className=\"text-sm bg-muted p-3 rounded max-h-40 overflow-y-auto text-muted-foreground whitespace-pre-wrap\">\n                      {originalContent}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Éditeur Email Personnalisé */}\n            <div>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-lg font-medium\">✏️ Votre Version</h3>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => generateVariationMutation.mutate()}\n                    disabled={isGeneratingVariation}\n                  >\n                    {isGeneratingVariation ? (\n                      <RefreshCw className=\"h-4 w-4 animate-spin mr-1\" />\n                    ) : (\n                      <Sparkles className=\"h-4 w-4 mr-1\" />\n                    )}\n                    {isGeneratingVariation ? \"Génération...\" : \"Variation IA\"}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleAddBookingLink}\n                    disabled={!canUseBooking}\n                    title={!canUseBooking ? \"Disponible à partir du plan Starter\" : \"Ajouter un lien de prise de RDV\"}\n                  >\n                    <Calendar className=\"h-4 w-4 mr-1\" />\n                    Proposer RDV\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleResetToOriginal}\n                  >\n                    <RotateCcw className=\"h-4 w-4 mr-1\" />\n                    Original\n                  </Button>\n                </div>\n              </div>\n\n              <Card className=\"border-blue-200\">\n                <CardContent className=\"space-y-4 pt-4\">\n                  <div>\n                    <Label htmlFor=\"customSubject\">Objet de l'email</Label>\n                    <Input\n                      id=\"customSubject\"\n                      value={subject}\n                      onChange={(e) => setSubject(e.target.value)}\n                      placeholder=\"Personnalisez l'objet...\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"customContent\">Contenu de l'email</Label>\n                    <Textarea\n                      id=\"customContent\"\n                      value={content}\n                      onChange={(e) => setContent(e.target.value)}\n                      placeholder=\"Personnalisez le contenu...\"\n                      rows={15}\n                      className=\"resize-none font-mono text-sm\"\n                    />\n                    <div className=\"text-xs text-muted-foreground mt-2\">\n                      💡 <strong>Variables :</strong> [PRENOM], [ENTREPRISE], [POSTE], [SECTEUR]\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-between pt-4 border-t\">\n          <Button variant=\"ghost\" onClick={handleCancel}>\n            <X className=\"h-4 w-4 mr-2\" />\n            Annuler\n          </Button>\n          <Button \n            onClick={() => saveCustomEmailMutation.mutate()}\n            disabled={saveCustomEmailMutation.isPending || !emailName.trim()}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saveCustomEmailMutation.isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10783},"client/src/components/dashboard/oauth-connections.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, CheckCircle, XCircle, Mail } from \"lucide-react\";\nimport { SiGoogle } from \"react-icons/si\";\n\ninterface OAuthStatus {\n  google: {\n    connected: boolean;\n    email: string | null;\n  };\n}\n\nexport default function OAuthConnections() {\n  const { toast } = useToast();\n  const [connectingProvider, setConnectingProvider] = useState<string | null>(null);\n\n  // Récupérer le statut des connexions OAuth\n  const { data: oauthStatus, refetch: refetchStatus } = useQuery<OAuthStatus>({\n    queryKey: [\"/api/oauth/status\"],\n    refetchInterval: 5000, // Vérifier toutes les 5 secondes\n  });\n\n  // Mutation pour déconnecter un provider\n  const disconnectMutation = useMutation({\n    mutationFn: async (provider: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/oauth/${provider}/disconnect`);\n      return response.json();\n    },\n    onSuccess: (data, provider) => {\n      refetchStatus();\n      toast({\n        title: \"Déconnexion réussie\",\n        description: \"Votre compte Google a été déconnecté.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de déconnecter le compte.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Gérer les redirections OAuth\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const oauthProvider = urlParams.get('oauth');\n    const status = urlParams.get('status');\n\n    if (oauthProvider && status) {\n      if (status === 'success') {\n        toast({\n          title: \"Connexion réussie !\",\n          description: \"Votre compte Google a été connecté avec succès.\",\n        });\n        refetchStatus();\n      } else if (status === 'error') {\n        toast({\n          title: \"Erreur de connexion\",\n          description: \"Impossible de connecter votre compte Google.\",\n          variant: \"destructive\",\n        });\n      }\n\n      // Nettoyer l'URL\n      window.history.replaceState({}, document.title, window.location.pathname);\n      setConnectingProvider(null);\n    }\n  }, [toast, refetchStatus]);\n\n  const handleConnect = async (provider: 'google') => {\n    try {\n      setConnectingProvider(provider);\n      \n      const response = await apiRequest(\"GET\", `/api/oauth/${provider}/auth`);\n      const data = await response.json();\n      \n      if (data.authUrl) {\n        // Rediriger vers la page d'authentification OAuth\n        window.location.href = data.authUrl;\n      } else {\n        throw new Error(\"URL d'authentification non reçue\");\n      }\n    } catch (error) {\n      console.error(`Erreur connexion ${provider}:`, error);\n      setConnectingProvider(null);\n      toast({\n        title: \"Erreur de connexion\",\n        description: \"Vérifiez que votre projet Google Cloud Console autorise ce domaine.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDisconnect = (provider: string) => {\n    disconnectMutation.mutate(provider);\n  };\n\n  if (!oauthStatus) {\n    return (\n      <div className=\"flex items-center justify-center p-6\">\n        <Loader2 className=\"h-6 w-6 animate-spin\" />\n        <span className=\"ml-2 text-gray-600\">Chargement des connexions...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Information */}\n      <div className=\"bg-primary/5 dark:bg-primary/10 border border-primary/20 dark:border-primary/30 rounded-lg p-4 mb-6\">\n        <div className=\"flex items-start space-x-3\">\n          <Mail className=\"h-5 w-5 text-primary mt-0.5\" />\n          <div>\n            <h3 className=\"font-medium text-foreground mb-1\">\n              Connexion Email\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Connectez votre compte Gmail pour envoyer des campagnes email directement depuis LeadPilot. \n              Vos identifiants sont sécurisés et utilisés uniquement pour l'envoi d'emails.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Connexion Google */}\n      <Card className=\"border-2 hover:border-primary/30 transition-colors bg-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <SiGoogle className=\"h-6 w-6 text-red-600\" />\n              </div>\n              <div>\n                <h3 className=\"font-medium text-foreground\">Gmail</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {oauthStatus.google.connected \n                    ? `Connecté avec ${oauthStatus.google.email}`\n                    : \"Connectez votre compte Gmail pour envoyer des emails\"\n                  }\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {oauthStatus.google.connected ? (\n                <>\n                  <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    Connecté\n                  </Badge>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDisconnect('google')}\n                    disabled={disconnectMutation.isPending}\n                  >\n                    {disconnectMutation.isPending ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      \"Déconnecter\"\n                    )}\n                  </Button>\n                </>\n              ) : (\n                <Button\n                  onClick={() => handleConnect('google')}\n                  disabled={connectingProvider === 'google'}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  {connectingProvider === 'google' ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  ) : (\n                    <SiGoogle className=\"h-4 w-4 mr-2\" />\n                  )}\n                  Connecter avec Google\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Guide d'aide */}\n      <div className=\"bg-muted/20 border border-muted rounded-lg p-4\">\n        <h4 className=\"font-medium text-foreground mb-2\">\n          Comment ça fonctionne ?\n        </h4>\n        <ul className=\"text-sm text-muted-foreground space-y-1\">\n          <li>• Cliquez sur \"Connecter avec Google\" pour authoriser LeadPilot</li>\n          <li>• Vos emails seront envoyés depuis votre compte Gmail</li>\n          <li>• Vous pouvez déconnecter à tout moment</li>\n          <li>• Aucun email n'est stocké sur nos serveurs</li>\n        </ul>\n      </div>\n    </div>\n  );\n}","size_bytes":7239},"server/oauth-email.ts":{"content":"import { google } from 'googleapis';\nimport type { Express } from 'express';\nimport { storage } from './storage';\nimport { isAuthenticated } from './replitAuth';\n\n// Configuration Google OAuth\nconst getRedirectUri = () => {\n  // En production Replit, utiliser l'URL replit\n  if (process.env.REPLIT_DOMAINS) {\n    const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n    return `https://${domain}/api/oauth/google/callback`;\n  }\n  // En développement local\n  return process.env.GOOGLE_REDIRECT_URI || 'http://localhost:5000/api/oauth/google/callback';\n};\n\nconst googleOAuth2Client = new google.auth.OAuth2(\n  process.env.GOOGLE_CLIENT_ID,  \n  process.env.GOOGLE_CLIENT_SECRET,\n  getRedirectUri()\n);\n\nexport function setupOAuthRoutes(app: Express) {\n  \n  // Google OAuth - Démarrer l'authentification\n  app.get('/api/oauth/google/auth', isAuthenticated, (req: any, res) => {\n    try {\n      const scopes = [\n        'https://www.googleapis.com/auth/gmail.send',\n        'https://www.googleapis.com/auth/userinfo.email'\n      ];\n\n      // Utiliser une nouvelle instance pour chaque requête\n      const currentRedirectUri = getRedirectUri();\n      const oauthClient = new google.auth.OAuth2(\n        process.env.GOOGLE_CLIENT_ID,\n        process.env.GOOGLE_CLIENT_SECRET,\n        currentRedirectUri\n      );\n\n      const authUrl = oauthClient.generateAuthUrl({\n        access_type: 'offline',\n        scope: scopes,\n        prompt: 'consent',\n        include_granted_scopes: true,\n        state: req.user.claims.sub\n      });\n\n      console.log(`🔐 OAuth request for user: ${req.user.claims.sub}`);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error('❌ OAuth error:', error);\n      res.status(500).json({ message: 'Configuration OAuth échouée' });\n    }\n  });\n\n  // Google OAuth - Callback\n  app.get('/api/oauth/google/callback', async (req: any, res) => {\n    try {\n      const { code, state, error: oauthError } = req.query;\n      \n      console.log(`📥 OAuth callback received - Code: ${!!code}, State: ${state}, Error: ${oauthError}`);\n      \n      if (oauthError) {\n        console.error('❌ OAuth error from Google:', oauthError);\n        return res.redirect('/?oauth=google&status=error&reason=access_denied');\n      }\n      \n      if (!code || !state) {\n        console.error('❌ Missing code or state in callback');\n        return res.redirect('/?oauth=google&status=error&reason=missing_params');\n      }\n\n      // Créer une nouvelle instance OAuth client pour le callback\n      const callbackClient = new google.auth.OAuth2(\n        process.env.GOOGLE_CLIENT_ID,\n        process.env.GOOGLE_CLIENT_SECRET,\n        getRedirectUri()\n      );\n\n      // Récupérer les tokens\n      const { tokens } = await callbackClient.getToken(code as string);\n      callbackClient.setCredentials(tokens);\n\n      // Récupérer l'email de l'utilisateur\n      const oauth2 = google.oauth2({ version: 'v2', auth: callbackClient });\n      const userInfo = await oauth2.userinfo.get();\n\n      console.log(`✅ OAuth success for user: ${state}, email: ${userInfo.data.email}`);\n\n      // Sauvegarder dans la base de données\n      await storage.updateUserOAuthTokens(state as string, {\n        provider: 'google',\n        accessToken: tokens.access_token || '',\n        refreshToken: tokens.refresh_token || '',\n        emailAddress: userInfo.data.email || ''\n      });\n\n      // Rediriger vers l'interface avec succès\n      res.redirect('/?oauth=google&status=success');\n      \n    } catch (error) {\n      console.error('❌ OAuth callback error:', error);\n      res.redirect('/?oauth=google&status=error&reason=server_error');\n    }\n  });\n\n  // Déconnecter Google OAuth\n  app.delete('/api/oauth/google/disconnect', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      await storage.updateUserOAuthTokens(userId, {\n        provider: 'google',\n        accessToken: '',\n        refreshToken: '',\n        emailAddress: ''\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Erreur déconnexion Google:', error);\n      res.status(500).json({ message: 'Erreur lors de la déconnexion' });\n    }\n  });\n\n  // Statut des connexions OAuth\n  app.get('/api/oauth/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      const status = {\n        google: {\n          connected: !!(user?.googleEmailConnected && user?.googleEmailToken),\n          email: user?.connectedEmailAddress || null\n        }\n      };\n\n      res.json(status);\n    } catch (error) {\n      console.error('Erreur récupération statut OAuth:', error);\n      res.status(500).json({ message: 'Erreur lors de la récupération du statut' });\n    }\n  });\n}\n\n// Fonction helper pour obtenir un client Google authentifié\nexport async function getGoogleAuthClient(userId: string) {\n  const user = await storage.getUser(userId);\n  \n  if (!user?.googleEmailToken || !user?.googleRefreshToken) {\n    throw new Error('Utilisateur non connecté à Google');\n  }\n\n  const oauth2Client = new google.auth.OAuth2(\n    process.env.GOOGLE_CLIENT_ID,\n    process.env.GOOGLE_CLIENT_SECRET,\n    getRedirectUri()\n  );\n\n  oauth2Client.setCredentials({\n    access_token: user.googleEmailToken,\n    refresh_token: user.googleRefreshToken\n  });\n\n  // Vérifier et renouveler le token si nécessaire\n  try {\n    const { credentials } = await oauth2Client.refreshAccessToken();\n    oauth2Client.setCredentials(credentials);\n    \n    // Sauvegarder le nouveau token\n    if (credentials.access_token) {\n      await storage.updateUserOAuthTokens(userId, {\n        provider: 'google',\n        accessToken: credentials.access_token,\n        refreshToken: credentials.refresh_token || user.googleRefreshToken,\n        emailAddress: user.connectedEmailAddress || ''\n      });\n    }\n  } catch (error) {\n    console.error('Erreur renouvellement token Google:', error);\n  }\n\n  return oauth2Client;\n}","size_bytes":6049},"GOOGLE_OAUTH_SETUP.md":{"content":"# Configuration Google OAuth pour LeadPilot\n\n## Problèmes courants et solutions\n\n### Erreur \"n'autorise pas la connexion\"\nCette erreur indique que le domaine Replit n'est pas autorisé dans votre configuration Google Cloud Console.\n\n**Domaines à autoriser :**\n- `92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev`\n\n## URL de redirection requise\n```\nhttps://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev/api/oauth/google/callback\n```\n\n## Étapes de configuration\n\n### 1. Créer/Configurer le projet Google Cloud Console\n\n1. Allez sur [console.cloud.google.com](https://console.cloud.google.com)\n2. Créez un nouveau projet ou sélectionnez un projet existant\n3. Activez les APIs nécessaires :\n   - Gmail API\n   - Google+ API (pour les informations utilisateur)\n\n### 2. Configurer les identifiants OAuth\n\n1. Allez dans \"APIs & Services\" > \"Credentials\"\n2. Cliquez sur \"Create Credentials\" > \"OAuth 2.0 Client ID\"\n3. Choisissez \"Web application\"\n4. Dans \"Authorized JavaScript origins\", ajoutez :\n   ```\n   https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev\n   ```\n5. Dans \"Authorized redirect URIs\", ajoutez :\n   ```\n   https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev/api/oauth/google/callback\n   ```\n6. Copiez le Client ID et Client Secret\n\n### 3. Mettre à jour les secrets Replit\n\nLes secrets sont déjà configurés dans Replit :\n- GOOGLE_CLIENT_ID : ✅ Configuré\n- GOOGLE_CLIENT_SECRET : ✅ Configuré\n\n### 4. Test de fonctionnement\n\nUne fois configuré :\n1. Allez dans Paramètres > Connexions Email\n2. Cliquez sur \"Connecter avec Google\"\n3. Autorisez l'accès Gmail\n4. Créez une campagne et testez l'envoi\n\n## Notes importantes\n\n- L'URL de redirection change si le domaine Replit change\n- Les APIs Gmail et Google+ doivent être activées\n- Le projet doit être en mode \"En production\" pour éviter les limitations","size_bytes":1927},"SOLUTION_OAUTH.md":{"content":"# Solution OAuth Google - Configuration Complète\n\n## Problème identifié\nL'erreur \"accounts.google.com n'autorise pas la connexion\" indique que votre projet Google Cloud Console actuel a des restrictions de domaine.\n\n## SOLUTION RECOMMANDÉE : Créer un nouveau projet\n\n### Étape 1 : Créer un nouveau projet Google\n1. Allez sur [console.cloud.google.com](https://console.cloud.google.com)\n2. Cliquez sur le sélecteur de projet (en haut)\n3. Cliquez sur \"NEW PROJECT\"\n4. Nom : \"LeadPilot OAuth\"\n5. Cliquez sur \"CREATE\"\n\n### Étape 2 : Activer les APIs nécessaires\n1. Dans le nouveau projet, allez dans \"APIs & Services\" > \"Library\"\n2. Cherchez et activez :\n   - **Gmail API**\n   - **Google+ API** (ou People API)\n\n### Étape 3 : Configurer l'écran de consentement OAuth\n1. Allez dans \"APIs & Services\" > \"OAuth consent screen\"\n2. Choisissez \"External\" et cliquez \"CREATE\"\n3. Remplissez :\n   - App name: \"LeadPilot\"\n   - User support email: votre email\n   - Developer contact: votre email\n4. Cliquez \"SAVE AND CONTINUE\"\n5. Scopes : Cliquez \"SAVE AND CONTINUE\" (on ajoutera plus tard)\n6. Test users : Ajoutez votre email Gmail\n7. Cliquez \"SAVE AND CONTINUE\"\n\n### Étape 4 : Créer les identifiants OAuth\n1. Allez dans \"APIs & Services\" > \"Credentials\"\n2. Cliquez \"CREATE CREDENTIALS\" > \"OAuth 2.0 Client ID\"\n3. Type d'application : \"Web application\"\n4. Nom : \"LeadPilot Web Client\"\n5. **Authorized JavaScript origins** :\n   ```\n   https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev\n   ```\n6. **Authorized redirect URIs** :\n   ```\n   https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev/api/oauth/google/callback\n   ```\n7. Cliquez \"CREATE\"\n\n### Étape 5 : Copier les nouvelles clés\n1. Copiez le **Client ID** (commence par des chiffres, finit par .apps.googleusercontent.com)\n2. Copiez le **Client Secret** (chaîne alphanumérique)\n3. **IMPORTANT** : Fournissez ces deux clés à l'agent qui les configurera automatiquement\n\n**Format des clés attendu :**\n- GOOGLE_CLIENT_ID : `123456789-abc123def456.apps.googleusercontent.com`\n- GOOGLE_CLIENT_SECRET : `GOCSPX-abc123def456ghi789`\n\n### Étape 6 : Test\nUne fois les nouvelles clés configurées, la connexion Gmail devrait fonctionner immédiatement !\n\n## Alternative : Vérification projet existant\nSi vous préférez garder votre projet existant :\n\n1. Vérifiez que ces URLs EXACTES sont dans votre configuration :\n   - JavaScript origins: `https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev`\n   - Redirect URIs: `https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev/api/oauth/google/callback`\n\n2. Attendez 10-15 minutes après modification pour que les changements se propagent\n\n3. Vérifiez que Gmail API et Google+ API sont activées\n\n## Vérification finale\nUne fois configuré, testez sur : https://92767425-60c5-42e8-8376-473b6077814a-00-3qeysuo8dr2t9.kirk.replit.dev","size_bytes":2933},"server/oauth-debug.ts":{"content":"import type { Express } from 'express';\nimport { isAuthenticated } from './replitAuth';\n\nexport function setupOAuthDebug(app: Express) {\n  // Route de diagnostic OAuth\n  app.get('/api/oauth/debug', isAuthenticated, (req: any, res) => {\n    const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000';\n    const redirectUri = `https://${domain}/api/oauth/google/callback`;\n    \n    const debugInfo = {\n      domain,\n      redirectUri,\n      clientId: process.env.GOOGLE_CLIENT_ID?.substring(0, 20) + '...',\n      clientSecretConfigured: !!process.env.GOOGLE_CLIENT_SECRET,\n      manualOAuthUrl: `https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.send%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&prompt=consent&include_granted_scopes=true&response_type=code&client_id=${process.env.GOOGLE_CLIENT_ID}&redirect_uri=${encodeURIComponent(redirectUri)}&state=${req.user.claims.sub}`,\n      googleCloudConsoleSteps: [\n        '1. Allez sur console.cloud.google.com',\n        '2. APIs & Services > Credentials',\n        '3. Modifiez votre OAuth 2.0 Client ID',\n        `4. Ajoutez dans \"Authorized JavaScript origins\": https://${domain}`,\n        `5. Ajoutez dans \"Authorized redirect URIs\": ${redirectUri}`,\n        '6. Sauvegardez et attendez 5-10 minutes'\n      ]\n    };\n    \n    res.json(debugInfo);\n  });\n\n  // Route de test manuel OAuth\n  app.get('/api/oauth/manual-test', isAuthenticated, (req: any, res) => {\n    const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000';\n    const redirectUri = `https://${domain}/api/oauth/google/callback`;\n    \n    const manualUrl = `https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.send%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email&prompt=consent&include_granted_scopes=true&response_type=code&client_id=${process.env.GOOGLE_CLIENT_ID}&redirect_uri=${encodeURIComponent(redirectUri)}&state=${req.user.claims.sub}`;\n    \n    res.redirect(manualUrl);\n  });\n}","size_bytes":2097},"server/oauth-test.ts":{"content":"// Test direct OAuth pour diagnostic\nimport { google } from 'googleapis';\n\nexport function testOAuthConfig() {\n  const redirectUri = process.env.REPLIT_DOMAINS \n    ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}/api/oauth/google/callback`\n    : 'http://localhost:5000/api/oauth/google/callback';\n\n  console.log('🔧 Test OAuth Configuration:');\n  console.log('- Client ID:', process.env.GOOGLE_CLIENT_ID?.substring(0, 20) + '...');\n  console.log('- Client Secret:', process.env.GOOGLE_CLIENT_SECRET ? 'Configuré ✅' : 'Manquant ❌');\n  console.log('- Redirect URI:', redirectUri);\n  \n  try {\n    const oauth2Client = new google.auth.OAuth2(\n      process.env.GOOGLE_CLIENT_ID,\n      process.env.GOOGLE_CLIENT_SECRET,\n      redirectUri\n    );\n\n    const testUrl = oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: ['https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/userinfo.email'],\n      prompt: 'consent',\n      state: 'test-123'\n    });\n\n    console.log('✅ OAuth URL générée avec succès');\n    console.log('🔗 URL de test:', testUrl);\n    return testUrl;\n  } catch (error) {\n    console.error('❌ Erreur génération OAuth:', error);\n    return null;\n  }\n}","size_bytes":1232},"server/seed-data.ts":{"content":"import { storage } from \"./storage\";\n\nexport const frenchEmailTemplates = [\n  // FREE PLAN - 1 template (Templates 1-1)\n  {\n    name: \"Introduction Simple\",\n    subject: \"Bonjour [PRENOM] - Une solution pour [ENTREPRISE]\",\n    content: `Bonjour [PRENOM],\n\nJe me permets de vous contacter car je pense que [ENTREPRISE] pourrait être intéressée par notre solution.\n\nNous aidons les entreprises comme la vôtre à [BENEFICE_PRINCIPAL]. \n\nSeriez-vous disponible pour un échange de 15 minutes cette semaine ?\n\nCordialement,\n[EXPEDITEUR]`,\n    plan: \"free\",\n    category: \"introduction\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"BENEFICE_PRINCIPAL\", \"EXPEDITEUR\"]\n  },\n\n  // STARTER PLAN - 4 nouveaux templates (Templates 2-5)\n  {\n    name: \"Approche Problème-Solution\",\n    subject: \"[PRENOM], comment [ENTREPRISE] peut économiser [MONTANT]€/an\",\n    content: `Bonjour [PRENOM],\n\nLes entreprises comme [ENTREPRISE] perdent en moyenne [MONTANT]€ par an à cause de [PROBLEME].\n\nNous avons développé une solution qui permet de :\n✓ [BENEFICE_1]\n✓ [BENEFICE_2] \n✓ [BENEFICE_3]\n\n[CLIENT_REFERENCE] a déjà économisé [RESULTAT] grâce à notre approche.\n\nAuriez-vous 15 minutes pour en discuter ?\n\nBien à vous,\n[EXPEDITEUR]`,\n    plan: \"starter\",\n    category: \"probleme-solution\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"MONTANT\", \"PROBLEME\", \"BENEFICE_1\", \"BENEFICE_2\", \"BENEFICE_3\", \"CLIENT_REFERENCE\", \"RESULTAT\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Référence Client\",\n    subject: \"Comment [CLIENT_REFERENCE] a obtenu [RESULTAT]\",\n    content: `Bonjour [PRENOM],\n\nJ'espère que vous allez bien.\n\nJe travaille avec [CLIENT_REFERENCE] depuis [DUREE] et nous avons obtenu des résultats remarquables :\n\n→ [RESULTAT_1]\n→ [RESULTAT_2]\n→ [RESULTAT_3]\n\nÉtant donné que [ENTREPRISE] évolue dans le même secteur, je me demandais si vous pourriez être intéressé par une approche similaire.\n\nDisponible pour un appel cette semaine ?\n\n[EXPEDITEUR]`,\n    plan: \"starter\",\n    category: \"reference\",\n    variables: [\"PRENOM\", \"CLIENT_REFERENCE\", \"RESULTAT\", \"DUREE\", \"RESULTAT_1\", \"RESULTAT_2\", \"RESULTAT_3\", \"ENTREPRISE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Question Provocante\",\n    subject: \"[PRENOM], est-ce que [ENTREPRISE] perd de l'argent sur [DOMAINE] ?\",\n    content: `Bonjour [PRENOM],\n\nUne question rapide : combien [ENTREPRISE] dépense-t-elle actuellement pour [DOMAINE] ?\n\nLa plupart des entreprises de votre secteur surestiment leurs coûts de [POURCENTAGE]%.\n\nNous avons aidé [NB_CLIENTS]+ entreprises à réduire ces coûts tout en améliorant [BENEFICE].\n\nVoulez-vous savoir comment ?\n\nRéponse simple : Oui/Non\n\n[EXPEDITEUR]`,\n    plan: \"starter\",\n    category: \"question\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"DOMAINE\", \"POURCENTAGE\", \"NB_CLIENTS\", \"BENEFICE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Urgence Temporelle\",\n    subject: \"Derniers jours pour [OPPORTUNITE] - [ENTREPRISE]\",\n    content: `[PRENOM],\n\nJe voulais vous prévenir rapidement.\n\nNous clôturons notre programme [PROGRAMME] le [DATE], et il ne reste que [NB_PLACES] places.\n\nCe programme permet aux entreprises comme [ENTREPRISE] de :\n• [AVANTAGE_1]\n• [AVANTAGE_2]\n• [AVANTAGE_3]\n\nIntéressé ? Un appel de 10 minutes suffit pour voir si c'est adapté.\n\nRépondez-moi avant [DATE_LIMITE].\n\n[EXPEDITEUR]`,\n    plan: \"starter\",\n    category: \"urgence\",\n    variables: [\"PRENOM\", \"OPPORTUNITE\", \"ENTREPRISE\", \"PROGRAMME\", \"DATE\", \"NB_PLACES\", \"AVANTAGE_1\", \"AVANTAGE_2\", \"AVANTAGE_3\", \"DATE_LIMITE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Compliment + Valeur\",\n    subject: \"Impressionné par [REUSSITE] de [ENTREPRISE]\",\n    content: `Bonjour [PRENOM],\n\nJe viens de voir [REUSSITE] de [ENTREPRISE] - félicitations !\n\nCette croissance me rappelle [CLIENT_SIMILAIRE] avec qui nous travaillons. Ils ont réussi à [RESULTAT_CLIENT] grâce à notre solution.\n\nÉtant donné votre trajectoire, je pense que vous pourriez être intéressé par une approche similaire pour [OBJECTIF].\n\nQu'en pensez-vous ? 15 minutes pour en discuter ?\n\nCordialement,\n[EXPEDITEUR]`,\n    plan: \"starter\",\n    category: \"compliment\",\n    variables: [\"PRENOM\", \"REUSSITE\", \"ENTREPRISE\", \"CLIENT_SIMILAIRE\", \"RESULTAT_CLIENT\", \"OBJECTIF\", \"EXPEDITEUR\"]\n  },\n\n  // PRO PLAN - 10 nouveaux templates (Templates 6-15)\n  {\n    name: \"Multi-Touch Séquence 1\",\n    subject: \"5 minutes pour transformer [PROCESSUS] chez [ENTREPRISE] ?\",\n    content: `[PRENOM],\n\nVous dirigez [ENTREPRISE] depuis [DUREE] - respect pour cette réussite.\n\nJe me demandais : comment gérez-vous actuellement [PROCESSUS] ?\n\nLa plupart des dirigeants comme vous perdent [TEMPS]h/semaine sur ce sujet.\n\nNotre solution permet de diviser ce temps par [DIVISEUR] tout en améliorant [QUALITE].\n\nExemple concret : [CLIENT_EXEMPLE] a économisé [ECONOMIE] en [DUREE_RESULTATS].\n\nCurieux d'en savoir plus ? 5 minutes au téléphone suffisent.\n\n[EXPEDITEUR]\nP.S: Je vous enverrai un audit gratuit de votre [PROCESSUS] si ça peut aider.`,\n    plan: \"pro\",\n    category: \"multi-touch\",\n    variables: [\"PRENOM\", \"PROCESSUS\", \"ENTREPRISE\", \"DUREE\", \"TEMPS\", \"DIVISEUR\", \"QUALITE\", \"CLIENT_EXEMPLE\", \"ECONOMIE\", \"DUREE_RESULTATS\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Insight Sectoriel\",\n    subject: \"Tendance [SECTEUR] : impact sur [ENTREPRISE] ?\",\n    content: `Bonjour [PRENOM],\n\nJe viens de terminer une étude sur le secteur [SECTEUR] - les résultats sont surprenants.\n\n3 insights clés qui m'ont frappé :\n\n1. [INSIGHT_1]\n2. [INSIGHT_2]  \n3. [INSIGHT_3]\n\nCes changements vont probablement impacter [ENTREPRISE], surtout au niveau [DOMAINE_IMPACT].\n\nNous avons aidé [NB_ENTREPRISES] entreprises de votre secteur à s'adapter à ces évolutions.\n\nVoulez-vous que je vous partage l'étude complète + notre plan d'adaptation ?\n\nDisponible pour un échange cette semaine.\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"insight\",\n    variables: [\"PRENOM\", \"SECTEUR\", \"ENTREPRISE\", \"INSIGHT_1\", \"INSIGHT_2\", \"INSIGHT_3\", \"DOMAINE_IMPACT\", \"NB_ENTREPRISES\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Objection Prevention\",\n    subject: \"Pourquoi [ENTREPRISE] dit probablement non (et c'est OK)\",\n    content: `[PRENOM],\n\nJe vais être direct : vous allez probablement dire \"non\" à ma proposition.\n\nEt c'est compréhensible car :\n• Vous avez déjà essayé [SOLUTION_ALTERNATIVE] \n• Votre équipe est débordée\n• Ce n'est peut-être pas le bon moment\n\nMais voici pourquoi [CLIENT_REFERENCE] pensait la même chose... avant d'obtenir [RESULTAT] en [DUREE].\n\nLa différence ? Notre approche [APPROCHE_UNIQUE].\n\nSi je me trompe sur [ENTREPRISE], ignorez cet email.\nSi j'ai raison, accordez-moi 10 minutes pour vous prouver le contraire.\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"objection\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"SOLUTION_ALTERNATIVE\", \"CLIENT_REFERENCE\", \"RESULTAT\", \"DUREE\", \"APPROCHE_UNIQUE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Audit Gratuit\",\n    subject: \"Audit gratuit [DOMAINE] pour [ENTREPRISE] - 48h\",\n    content: `Bonjour [PRENOM],\n\nProposition simple : je vous offre un audit gratuit de [DOMAINE] chez [ENTREPRISE].\n\nPourquoi gratuit ? Car [RAISON_STRATEGIQUE].\n\nL'audit révèle généralement :\n→ [DECOUVERTE_1]\n→ [DECOUVERTE_2]\n→ [DECOUVERTE_3]\n\nRésultat en 48h maximum. Sans engagement.\n\n[CLIENT_EXEMPLE] a découvert qu'ils perdaient [PERTE] par mois - problème résolu en [DUREE_RESOLUTION].\n\nIntéressé ? Répondez \"OUI\" et je lance l'analyse.\n\n[EXPEDITEUR]\n[ENTREPRISE_EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"audit\",\n    variables: [\"PRENOM\", \"DOMAINE\", \"ENTREPRISE\", \"RAISON_STRATEGIQUE\", \"DECOUVERTE_1\", \"DECOUVERTE_2\", \"DECOUVERTE_3\", \"CLIENT_EXEMPLE\", \"PERTE\", \"DUREE_RESOLUTION\", \"EXPEDITEUR\", \"ENTREPRISE_EXPEDITEUR\"]\n  },\n  {\n    name: \"Storytelling Échec\",\n    subject: \"Comment j'ai failli ruiner [CLIENT_EXEMPLE] (et ce que ça m'a appris)\",\n    content: `[PRENOM],\n\nJe dois vous raconter mon plus gros échec.\n\nIl y a [PERIODE], j'ai conseillé [CLIENT_EXEMPLE] sur [DOMAINE]. \n\nMon approche était [APPROCHE_INCORRECTE]. Résultat ? [ECHEC_RESULTAT].\n\nJ'ai failli détruire leur [ASPECT_IMPACTE].\n\nHeureusement, nous avons pu inverser la situation avec [NOUVELLE_APPROCHE]. \nFinal : [RESULTAT_FINAL] en [DUREE].\n\nCette expérience m'a appris [LECON_APPRISE].\n\nPourquoi je vous raconte ça ? Car [ENTREPRISE] me rappelle [CLIENT_EXEMPLE] avant notre intervention.\n\nÉviter cette erreur vous intéresse ?\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"storytelling\",\n    variables: [\"PRENOM\", \"CLIENT_EXEMPLE\", \"PERIODE\", \"DOMAINE\", \"APPROCHE_INCORRECTE\", \"ECHEC_RESULTAT\", \"ASPECT_IMPACTE\", \"NOUVELLE_APPROCHE\", \"RESULTAT_FINAL\", \"DUREE\", \"LECON_APPRISE\", \"ENTREPRISE\", \"EXPEDITEUR\"]\n  }\n];\n\n// Add more templates to reach 30 total...\nexport const additionalProTemplates = [\n  {\n    name: \"Comparaison Concurrentielle\",\n    subject: \"Pourquoi [CONCURRENT] a choisi [SOLUTION] (et pas [ENTREPRISE]) ?\",\n    content: `[PRENOM],\n\nQuestion délicate mais importante.\n\n[CONCURRENT] vient d'adopter [SOLUTION] pour [OBJECTIF]. Ils prévoient [BENEFICE_CONCURRENT] d'ici [DELAI].\n\nEn tant que leader du secteur, [ENTREPRISE] devrait-elle s'inquiéter ?\n\nNotre analyse montre que :\n• [POINT_1]\n• [POINT_2]\n• [POINT_3]\n\nVoulez-vous connaître leur stratégie exacte + comment faire mieux ?\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"competition\",\n    variables: [\"PRENOM\", \"CONCURRENT\", \"SOLUTION\", \"ENTREPRISE\", \"OBJECTIF\", \"BENEFICE_CONCURRENT\", \"DELAI\", \"POINT_1\", \"POINT_2\", \"POINT_3\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Relance Intelligent\",\n    subject: \"Re: [SUJET_ORIGINAL] - Une dernière idée\",\n    content: `[PRENOM],\n\nPas de réponse à mon email précédent - je comprends, vous êtes occupé.\n\nUne dernière idée avant de vous laisser tranquille :\n\nEt si [ENTREPRISE] pouvait [BENEFICE] sans [CONTRAINTE] ?\n\n[CLIENT_CAS] y est arrivé grâce à [METHODE_SPECIFIQUE].\n\nSi ça vous intéresse : répondez \"DÉTAILS\"\nSinon : répondez \"STOP\" et je n'insisterai plus.\n\nFair deal ?\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"relance\",\n    variables: [\"PRENOM\", \"SUJET_ORIGINAL\", \"ENTREPRISE\", \"BENEFICE\", \"CONTRAINTE\", \"CLIENT_CAS\", \"METHODE_SPECIFIQUE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Invitation Événement\",\n    subject: \"Invitation privée : [EVENEMENT] pour dirigeants [SECTEUR]\",\n    content: `Bonjour [PRENOM],\n\nJ'organise un petit-déjeuner privé le [DATE] sur le thème : \"[THEME]\".\n\nFormat intime : 8 dirigeants max du secteur [SECTEUR].\n\nAu programme :\n→ [CONTENU_1]\n→ [CONTENU_2]\n→ [CONTENU_3]\n\nIntervenants : [EXPERT_1] et [EXPERT_2].\n\nLieu : [LIEU] à [VILLE]\n\nCompte tenu du profil de [ENTREPRISE], votre présence enrichirait les échanges.\n\nDisponible ? Réponse rapide nécessaire (places limitées).\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"evenement\",\n    variables: [\"PRENOM\", \"EVENEMENT\", \"SECTEUR\", \"DATE\", \"THEME\", \"CONTENU_1\", \"CONTENU_2\", \"CONTENU_3\", \"EXPERT_1\", \"EXPERT_2\", \"LIEU\", \"VILLE\", \"ENTREPRISE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Étude de Cas Détaillée\",\n    subject: \"Cas client : [CLIENT] passe de [AVANT] à [APRES] en [DUREE]\",\n    content: `[PRENOM],\n\nÉtude de cas qui pourrait vous intéresser :\n\n[CLIENT_DETAILLE] ([SECTEUR_CLIENT], [TAILLE_CLIENT] employés) avait le même défi que beaucoup d'entreprises : [DEFI_COMMUN].\n\nSituation initiale :\n• [SITUATION_1]\n• [SITUATION_2]\n• [SITUATION_3]\n\nNotre intervention :\nPhase 1 : [PHASE_1] (Semaines 1-2)\nPhase 2 : [PHASE_2] (Semaines 3-6)\nPhase 3 : [PHASE_3] (Semaines 7-8)\n\nRésultats après [DUREE_TOTALE] :\n✓ [RESULTAT_1]\n✓ [RESULTAT_2]\n✓ [RESULTAT_3]\n\nROI : [ROI] sur [PERIODE_ROI].\n\n[ENTREPRISE] a-t-elle des défis similaires ?\n\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"etude-cas\",\n    variables: [\"PRENOM\", \"CLIENT\", \"AVANT\", \"APRES\", \"DUREE\", \"CLIENT_DETAILLE\", \"SECTEUR_CLIENT\", \"TAILLE_CLIENT\", \"DEFI_COMMUN\", \"SITUATION_1\", \"SITUATION_2\", \"SITUATION_3\", \"PHASE_1\", \"PHASE_2\", \"PHASE_3\", \"DUREE_TOTALE\", \"RESULTAT_1\", \"RESULTAT_2\", \"RESULTAT_3\", \"ROI\", \"PERIODE_ROI\", \"ENTREPRISE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Question Sondage\",\n    subject: \"Sondage rapide : comment [ENTREPRISE] gère [PROBLEMATIQUE] ?\",\n    content: `[PRENOM],\n\nSondage express (30 secondes max) :\n\nComment [ENTREPRISE] gère-t-elle actuellement [PROBLEMATIQUE] ?\n\nA) [OPTION_A]\nB) [OPTION_B]  \nC) [OPTION_C]\nD) Autre (précisez)\n\nPourquoi cette question ? \n\nJe prépare un benchmark pour [RAISON_BENCHMARK]. Vos réponses m'aideraient énormément.\n\nEn échange : je partage les résultats consolidés + nos recommandations pour votre secteur.\n\nRéponse en un clic : A, B, C ou D ?\n\nMerci d'avance,\n[EXPEDITEUR]`,\n    plan: \"pro\",\n    category: \"sondage\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"PROBLEMATIQUE\", \"OPTION_A\", \"OPTION_B\", \"OPTION_C\", \"RAISON_BENCHMARK\", \"EXPEDITEUR\"]\n  }\n];\n\n// GROWTH PLAN - 15 nouveaux templates (Templates 16-30)\nexport const growthTemplates = [\n  {\n    name: \"Proposition de Partenariat\",\n    subject: \"Partenariat stratégique : [ENTREPRISE] x [NOTRE_ENTREPRISE]\",\n    content: `[PRENOM],\n\nProposition de partenariat stratégique.\n\nContexte : [ENTREPRISE] excelle en [COMPETENCE_CLIENT], nous excellons en [NOTRE_COMPETENCE].\n\nOpportunité identifiée : [OPPORTUNITE_MARCHE] représente [TAILLE_MARCHE] €/an.\n\nProposition de collaboration :\n→ [ENTREPRISE] : [ROLE_CLIENT]\n→ [NOTRE_ENTREPRISE] : [NOTRE_ROLE]\n→ Revenus partagés : [REPARTITION]\n\nAvantages pour [ENTREPRISE] :\n• [AVANTAGE_1]\n• [AVANTAGE_2]\n• [AVANTAGE_3]\n\n[CLIENT_PARTENAIRE] génère déjà [REVENUS_PARTENAIRE] avec ce modèle.\n\nIntéressé par une discussion confidentielle ?\n\n[EXPEDITEUR]\n[TITRE_EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"partenariat\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"NOTRE_ENTREPRISE\", \"COMPETENCE_CLIENT\", \"NOTRE_COMPETENCE\", \"OPPORTUNITE_MARCHE\", \"TAILLE_MARCHE\", \"ROLE_CLIENT\", \"NOTRE_ROLE\", \"REPARTITION\", \"AVANTAGE_1\", \"AVANTAGE_2\", \"AVANTAGE_3\", \"CLIENT_PARTENAIRE\", \"REVENUS_PARTENAIRE\", \"EXPEDITEUR\", \"TITRE_EXPEDITEUR\"]\n  },\n  {\n    name: \"Acquisition/Investissement\",\n    subject: \"Opportunité d'acquisition dans [SECTEUR] - [ENTREPRISE]\",\n    content: `Confidentiel - [PRENOM],\n\nNous représentons un fonds qui cherche à acquérir une entreprise comme [ENTREPRISE] dans les [DELAI] mois.\n\nCritères recherchés :\n✓ Secteur [SECTEUR]\n✓ CA > [CA_MINIMUM] M€\n✓ Croissance > [CROISSANCE]%\n✓ Position dominante en [DOMAINE]\n\n[ENTREPRISE] correspond parfaitement.\n\nValorisation préliminaire : [VALORISATION] x CA (soit ~[MONTANT_ESTIME] M€).\n\nNotre approche :\n• Conservation équipe dirigeante\n• Accélération internationale\n• Synergies avec portfolio\n\nIntéressé par une discussion exploratoire ?\n\n[EXPEDITEUR]\n[FONDS_INVESTISSEMENT]`,\n    plan: \"growth\",\n    category: \"acquisition\",\n    variables: [\"PRENOM\", \"SECTEUR\", \"ENTREPRISE\", \"DELAI\", \"CA_MINIMUM\", \"CROISSANCE\", \"DOMAINE\", \"VALORISATION\", \"MONTANT_ESTIME\", \"EXPEDITEUR\", \"FONDS_INVESTISSEMENT\"]\n  },\n  {\n    name: \"Révélation Exclusive\",\n    subject: \"Information confidentielle sur [SECTEUR] - [ENTREPRISE] concernée\",\n    content: `[PRENOM],\n\nInformation exclusive que je ne peux partager qu'avec vous.\n\n[ENTREPRISE_CONCURRENTE] prépare [MOUVEMENT_STRATEGIQUE] pour [DATE_PREVUE].\n\nImpact probable sur [ENTREPRISE] :\n→ [IMPACT_1]\n→ [IMPACT_2]\n→ [IMPACT_3]\n\nNous avons développé une contre-stratégie qui permet de :\n• [CONTRE_MESURE_1]\n• [CONTRE_MESURE_2]\n• [CONTRE_MESURE_3]\n\nTemps de réaction critique : [DELAI_ACTION].\n\nDiscussion urgente possible ?\n\n[EXPEDITEUR]\nConfidentiel`,\n    plan: \"growth\",\n    category: \"exclusive\",\n    variables: [\"PRENOM\", \"SECTEUR\", \"ENTREPRISE\", \"ENTREPRISE_CONCURRENTE\", \"MOUVEMENT_STRATEGIQUE\", \"DATE_PREVUE\", \"IMPACT_1\", \"IMPACT_2\", \"IMPACT_3\", \"CONTRE_MESURE_1\", \"CONTRE_MESURE_2\", \"CONTRE_MESURE_3\", \"DELAI_ACTION\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Méta-Analyse Sectorielle\",\n    subject: \"Méta-analyse [SECTEUR] : 3 découvertes qui changent tout\",\n    content: `[PRENOM],\n\nMéta-analyse de [NB_ETUDES] études sur le secteur [SECTEUR] - conclusions surprenantes.\n\n3 découvertes majeures :\n\n1. [DECOUVERTE_1] → Impact : [IMPACT_1]\n2. [DECOUVERTE_2] → Impact : [IMPACT_2]  \n3. [DECOUVERTE_3] → Impact : [IMPACT_3]\n\n[POURCENTAGE]% des entreprises ignorent ces changements.\n\nPour [ENTREPRISE], cela signifie [SIGNIFICATION_SPECIFIQUE].\n\nActions recommandées d'ici [DELAI] :\n• [ACTION_1]\n• [ACTION_2]\n• [ACTION_3]\n\nJe présente ces résultats à [NB_DIRIGEANTS] dirigeants triés sur le volet.\n\nVotre place est réservée - confirmation ?\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"meta-analyse\",\n    variables: [\"PRENOM\", \"NB_ETUDES\", \"SECTEUR\", \"DECOUVERTE_1\", \"IMPACT_1\", \"DECOUVERTE_2\", \"IMPACT_2\", \"DECOUVERTE_3\", \"IMPACT_3\", \"POURCENTAGE\", \"ENTREPRISE\", \"SIGNIFICATION_SPECIFIQUE\", \"DELAI\", \"ACTION_1\", \"ACTION_2\", \"ACTION_3\", \"NB_DIRIGEANTS\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Reverse Psychology\",\n    subject: \"Pourquoi [ENTREPRISE] ne devrait PAS travailler avec nous\",\n    content: `[PRENOM],\n\nSoyons honnêtes : [ENTREPRISE] ne devrait probablement PAS travailler avec nous.\n\nVoici pourquoi :\n\n❌ Vous êtes déjà [POSITION_ACTUELLE]\n❌ Notre solution nécessite [EFFORT_REQUIS]\n❌ Les résultats prennent [DUREE_RESULTATS] à se manifester\n❌ [AUTRE_CONTRAINTE]\n\nEn revanche, si [ENTREPRISE] veut [OBJECTIF_AMBITIEUX] et accepte de [CONDITION_ACCEPTANCE], alors notre approche [APPROCHE_UNIQUE] pourrait générer [RESULTAT_POTENTIEL].\n\n[CLIENT_EXEMPLE] était dans la même situation. Résultat : [TRANSFORMATION_OBTENUE].\n\nMais honnêtement ? Restez sur votre approche actuelle si elle vous convient.\n\nSi elle ne vous convient plus, rappel possible.\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"reverse\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"POSITION_ACTUELLE\", \"EFFORT_REQUIS\", \"DUREE_RESULTATS\", \"AUTRE_CONTRAINTE\", \"OBJECTIF_AMBITIEUX\", \"CONDITION_ACCEPTANCE\", \"APPROCHE_UNIQUE\", \"RESULTAT_POTENTIEL\", \"CLIENT_EXEMPLE\", \"TRANSFORMATION_OBTENUE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Testimonial Détaillé\",\n    subject: \"Témoignage [CLIENT] : \\\"Sans [SOLUTION], [ENTREPRISE_CLIENT] aurait fermé\\\"\",\n    content: `[PRENOM],\n\nTémoignage client reçu hier - il fallait que je vous le partage.\n\n[CLIENT_TEMOIN], [FONCTION] chez [ENTREPRISE_CLIENT] :\n\n\"Il y a [PERIODE], [ENTREPRISE_CLIENT] était dans une situation critique. [PROBLEME_CRITIQUE].\n\nJ'avais testé [SOLUTION_1], [SOLUTION_2], même [SOLUTION_3]. Rien ne fonctionnait.\n\nEn découvrant [NOTRE_SOLUTION], j'étais sceptique. Mais [RAISON_CONFIANCE].\n\nRésultats après [DUREE] :\n• [RESULTAT_1]\n• [RESULTAT_2]\n• [RESULTAT_3]\n\nSans cette solution, [ENTREPRISE_CLIENT] aurait fermé. C'est factuel.\"\n\n[ENTREPRISE] fait face aux mêmes défis que [ENTREPRISE_CLIENT] avant notre intervention.\n\nCurieux de connaître notre méthode ?\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"testimonial\",\n    variables: [\"PRENOM\", \"CLIENT\", \"SOLUTION\", \"ENTREPRISE_CLIENT\", \"CLIENT_TEMOIN\", \"FONCTION\", \"PERIODE\", \"PROBLEME_CRITIQUE\", \"SOLUTION_1\", \"SOLUTION_2\", \"SOLUTION_3\", \"NOTRE_SOLUTION\", \"RAISON_CONFIANCE\", \"DUREE\", \"RESULTAT_1\", \"RESULTAT_2\", \"RESULTAT_3\", \"ENTREPRISE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Future-Pacing\",\n    subject: \"[ENTREPRISE] en 2027 : 3 scénarios possibles\",\n    content: `[PRENOM],\n\nExercice de prospective : [ENTREPRISE] en 2027.\n\nScénario 1 - Status Quo :\n[ENTREPRISE] continue son approche actuelle de [APPROCHE_ACTUELLE].\nRésultat probable : [RESULTAT_STATUS_QUO]\n\nScénario 2 - Évolution graduelle :\n[ENTREPRISE] adopte [EVOLUTION_GRADUELLE] sur [DUREE_EVOLUTION].\nRésultat probable : [RESULTAT_EVOLUTION]\n\nScénario 3 - Transformation radicale :\n[ENTREPRISE] révolutionne [DOMAINE_REVOLUTION] avec [NOTRE_APPROCHE].\nRésultat probable : [RESULTAT_TRANSFORMATION]\n\nSelon notre modèle prédictif, [ENTREPRISE] a [PROBABILITE]% de chances d'atteindre le Scénario 3 seule.\n\nAvec notre accompagnement : [PROBABILITE_AVEC_NOUS]%.\n\nQuel scénario visez-vous pour [ENTREPRISE] ?\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"future-pacing\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"APPROCHE_ACTUELLE\", \"RESULTAT_STATUS_QUO\", \"EVOLUTION_GRADUELLE\", \"DUREE_EVOLUTION\", \"RESULTAT_EVOLUTION\", \"DOMAINE_REVOLUTION\", \"NOTRE_APPROCHE\", \"RESULTAT_TRANSFORMATION\", \"PROBABILITE\", \"PROBABILITE_AVEC_NOUS\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Behind-the-Scenes\",\n    subject: \"Dans les coulisses de [CLIENT_MAJEUR] (confidentiel)\",\n    content: `[PRENOM],\n\nRetour des coulisses de [CLIENT_MAJEUR] (avec leur autorisation).\n\nLa semaine dernière, réunion de crise chez [CLIENT_MAJEUR]. Sujet : [PROBLEME_CLIENT].\n\n[DIRIGEANT_CLIENT] : \"Comment [CONCURRENT] fait-il pour [PERFORMANCE_CONCURRENT] ?\"\n\nMa réponse : \"[EXPLICATION_TECHNIQUE]\"\n\nRésultat immédiat : [ACTION_ENTREPRISE] → [RESULTAT_IMMEDIAT].\n\nCe qui m'a frappé : [INSIGHT_STRATEGIQUE].\n\n[ENTREPRISE] pourrait appliquer la même logique pour [APPLICATION_POSSIBLE].\n\nAvantage potentiel : [AVANTAGE_ESTIMÉ] d'ici [DELAI_ESTIMATION].\n\nCette approche vous intéresse ?\n\n[EXPEDITEUR]\nP.S: [ANECDOTE_BONUS]`,\n    plan: \"growth\",\n    category: \"behind-scenes\",\n    variables: [\"PRENOM\", \"CLIENT_MAJEUR\", \"PROBLEME_CLIENT\", \"DIRIGEANT_CLIENT\", \"CONCURRENT\", \"PERFORMANCE_CONCURRENT\", \"EXPLICATION_TECHNIQUE\", \"ACTION_ENTREPRISE\", \"RESULTAT_IMMEDIAT\", \"INSIGHT_STRATEGIQUE\", \"ENTREPRISE\", \"APPLICATION_POSSIBLE\", \"AVANTAGE_ESTIMÉ\", \"DELAI_ESTIMATION\", \"EXPEDITEUR\", \"ANECDOTE_BONUS\"]\n  },\n  {\n    name: \"Invitation Think Tank\",\n    subject: \"Think Tank privé : L'avenir de [SECTEUR] (invitation exclusive)\",\n    content: `[PRENOM],\n\nInvitation exclusive au Think Tank \"[TITRE_THINK_TANK]\".\n\nDate : [DATE_EVENEMENT]\nLieu : [LIEU_PRESTIGIEUX]\nParticipants : [NB_PARTICIPANTS] dirigeants de [SECTEUR]\n\nThématiques :\n• [THEMATIQUE_1]\n• [THEMATIQUE_2]\n• [THEMATIQUE_3]\n\nIntervenants confirmés :\n→ [EXPERT_1] ([EXPERTISE_1])\n→ [EXPERT_2] ([EXPERTISE_2])\n→ [EXPERT_3] ([EXPERTISE_3])\n\nFormat Chatham House Rules + workshop collaboratif.\n\nProfil recherché pour [ENTREPRISE] :\n✓ [CRITERE_1]\n✓ [CRITERE_2]\n✓ [CRITERE_3]\n\nCette réflexion collective influencera [IMPACT_SECTORIEL].\n\nParticipation ? Places limitées ([NB_PLACES] restantes).\n\n[EXPEDITEUR]\n[ORGANISATION]`,\n    plan: \"growth\",\n    category: \"think-tank\",\n    variables: [\"PRENOM\", \"SECTEUR\", \"TITRE_THINK_TANK\", \"DATE_EVENEMENT\", \"LIEU_PRESTIGIEUX\", \"NB_PARTICIPANTS\", \"THEMATIQUE_1\", \"THEMATIQUE_2\", \"THEMATIQUE_3\", \"EXPERT_1\", \"EXPERTISE_1\", \"EXPERT_2\", \"EXPERTISE_2\", \"EXPERT_3\", \"EXPERTISE_3\", \"ENTREPRISE\", \"CRITERE_1\", \"CRITERE_2\", \"CRITERE_3\", \"IMPACT_SECTORIEL\", \"NB_PLACES\", \"EXPEDITEUR\", \"ORGANISATION\"]\n  },\n  {\n    name: \"Retournement Narratif\",\n    subject: \"L'erreur que j'ai faite avec [ENTREPRISE_SIMILAIRE] (et comment l'éviter)\",\n    content: `[PRENOM],\n\nConfession : j'ai fait une grosse erreur avec [ENTREPRISE_SIMILAIRE].\n\nContexte : [ENTREPRISE_SIMILAIRE] avait [SITUATION_SIMILAIRE], comme [ENTREPRISE] aujourd'hui.\n\nMon erreur : j'ai proposé [MAUVAISE_SOLUTION] au lieu de [BONNE_SOLUTION].\n\nConséquence : [CONSEQUENCE_NEGATIVE] pendant [DUREE_CONSEQUENCE].\n\nHeureusement, nous avons pu corriger avec [SOLUTION_CORRECTIVE].\nRésultat final : [RESULTAT_FINAL].\n\nCette expérience m'a appris [LECON_APPRISE].\n\nPour [ENTREPRISE], je ne ferais plus cette erreur. L'approche serait :\n\nPhase 1 : [PHASE_1_CORRECTE]\nPhase 2 : [PHASE_2_CORRECTE]  \nPhase 3 : [PHASE_3_CORRECTE]\n\nÉviter mon erreur avec [ENTREPRISE_SIMILAIRE] vous intéresse ?\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"retournement\",\n    variables: [\"PRENOM\", \"ENTREPRISE_SIMILAIRE\", \"SITUATION_SIMILAIRE\", \"ENTREPRISE\", \"MAUVAISE_SOLUTION\", \"BONNE_SOLUTION\", \"CONSEQUENCE_NEGATIVE\", \"DUREE_CONSEQUENCE\", \"SOLUTION_CORRECTIVE\", \"RESULTAT_FINAL\", \"LECON_APPRISE\", \"PHASE_1_CORRECTE\", \"PHASE_2_CORRECTE\", \"PHASE_3_CORRECTE\", \"EXPEDITEUR\"]\n  },\n  {\n    name: \"Intelligence Économique\",\n    subject: \"Intelligence économique : mouvement suspect dans [SECTEUR]\",\n    content: `Confidentiel - [PRENOM],\n\nMouvement suspect détecté dans [SECTEUR].\n\nObservations récentes :\n• [OBSERVATION_1]\n• [OBSERVATION_2]\n• [OBSERVATION_3]\n\nHypothèse : [HYPOTHESE_STRATEGIQUE].\n\nSi confirmée, impact sur [ENTREPRISE] :\n→ [IMPACT_COURT_TERME] (6 mois)\n→ [IMPACT_MOYEN_TERME] (18 mois)\n→ [IMPACT_LONG_TERME] (3 ans)\n\nActions préventives possibles :\n1. [ACTION_PREVENTIVE_1]\n2. [ACTION_PREVENTIVE_2]\n3. [ACTION_PREVENTIVE_3]\n\nNous surveillons [NB_INDICATEURS] indicateurs pour [CLIENT_REFERENCE].\n\nMise en place de la veille pour [ENTREPRISE] ?\n\nDiscussion confidentielle recommandée.\n\n[EXPEDITEUR]\n[CABINET_INTELLIGENCE]`,\n    plan: \"growth\",\n    category: \"intelligence\",\n    variables: [\"PRENOM\", \"SECTEUR\", \"OBSERVATION_1\", \"OBSERVATION_2\", \"OBSERVATION_3\", \"HYPOTHESE_STRATEGIQUE\", \"ENTREPRISE\", \"IMPACT_COURT_TERME\", \"IMPACT_MOYEN_TERME\", \"IMPACT_LONG_TERME\", \"ACTION_PREVENTIVE_1\", \"ACTION_PREVENTIVE_2\", \"ACTION_PREVENTIVE_3\", \"NB_INDICATEURS\", \"CLIENT_REFERENCE\", \"EXPEDITEUR\", \"CABINET_INTELLIGENCE\"]\n  },\n  {\n    name: \"Ultimate Value Stack\",\n    subject: \"Package complet [ENTREPRISE] : [VALEUR_TOTALE]€ de valeur\",\n    content: `[PRENOM],\n\nPackage spécialement conçu pour [ENTREPRISE].\n\nContenu :\n1. [SERVICE_1] (Valeur : [PRIX_1]€)\n2. [SERVICE_2] (Valeur : [PRIX_2]€)\n3. [SERVICE_3] (Valeur : [PRIX_3]€)\n4. [SERVICE_4] (Valeur : [PRIX_4]€)\n5. [BONUS_1] (Valeur : [PRIX_BONUS_1]€)\n6. [BONUS_2] (Valeur : [PRIX_BONUS_2]€)\n\nValeur totale : [VALEUR_TOTALE]€\n\nInvestissement pour [ENTREPRISE] : [PRIX_FINAL]€\nÉconomie : [ECONOMIE]€ ([POURCENTAGE_REDUCTION]%)\n\nROI estimé : [ROI]% sur [PERIODE_ROI].\n\nConditions :\n→ [CONDITION_1]\n→ [CONDITION_2]\n→ [CONDITION_3]\n\nGarantie : [GARANTIE_OFFERTE].\n\nPlaces limitées : [NB_ENTREPRISES] entreprises max.\n\n[ENTREPRISE] est pré-qualifiée.\n\nValidation avant [DATE_LIMITE] ?\n\n[EXPEDITEUR]`,\n    plan: \"growth\",\n    category: \"value-stack\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"VALEUR_TOTALE\", \"SERVICE_1\", \"PRIX_1\", \"SERVICE_2\", \"PRIX_2\", \"SERVICE_3\", \"PRIX_3\", \"SERVICE_4\", \"PRIX_4\", \"BONUS_1\", \"PRIX_BONUS_1\", \"BONUS_2\", \"PRIX_BONUS_2\", \"PRIX_FINAL\", \"ECONOMIE\", \"POURCENTAGE_REDUCTION\", \"ROI\", \"PERIODE_ROI\", \"CONDITION_1\", \"CONDITION_2\", \"CONDITION_3\", \"GARANTIE_OFFERTE\", \"NB_ENTREPRISES\", \"DATE_LIMITE\", \"EXPEDITEUR\"]\n  },\n  // Templates 29 et 30 pour atteindre 30 au total\n  {\n    name: \"Approche Consultative Ultime\",\n    subject: \"Diagnostic stratégique gratuit pour [ENTREPRISE] - 72h\",\n    content: `[PRENOM],\n\nDiagnostic stratégique complet offert à [ENTREPRISE].\n\nMéthode : [METHODOLOGIE_EXCLUSIVE] développée sur [NB_ANNEES] ans.\n\nAnalyse complète en 72h :\n→ Audit [DOMAINE_1] (Valeur : [PRIX_AUDIT_1]€)\n→ Benchmark concurrentiel [DOMAINE_2] (Valeur : [PRIX_AUDIT_2]€)\n→ Plan d'action 90 jours (Valeur : [PRIX_PLAN]€)\n→ Accompagnement mise en œuvre (Valeur : [PRIX_ACCOMPAGNEMENT]€)\n\nValeur totale : [VALEUR_DIAGNOSTIC]€\n\nConditions : [CONDITION_DIAGNOSTIC]\n\nPourquoi gratuit ? [RAISON_GRATUIT].\n\n[CLIENT_PRECEDENT] a obtenu [RESULTAT_CLIENT] grâce à ce diagnostic.\n\nPlanning limité : [NB_DIAGNOSTICS] diagnostics/mois max.\n\n[ENTREPRISE] est éligible - confirmation avant [DATE_LIMITE] ?\n\n[EXPEDITEUR]\n[CABINET_CONSEIL]`,\n    plan: \"growth\",\n    category: \"diagnostic\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"METHODOLOGIE_EXCLUSIVE\", \"NB_ANNEES\", \"DOMAINE_1\", \"PRIX_AUDIT_1\", \"DOMAINE_2\", \"PRIX_AUDIT_2\", \"PRIX_PLAN\", \"PRIX_ACCOMPAGNEMENT\", \"VALEUR_DIAGNOSTIC\", \"CONDITION_DIAGNOSTIC\", \"RAISON_GRATUIT\", \"CLIENT_PRECEDENT\", \"RESULTAT_CLIENT\", \"NB_DIAGNOSTICS\", \"DATE_LIMITE\", \"EXPEDITEUR\", \"CABINET_CONSEIL\"]\n  },\n  {\n    name: \"Email de Clôture Définitive\",\n    subject: \"Dernière communication - [ENTREPRISE] x [NOTRE_ENTREPRISE]\",\n    content: `[PRENOM],\n\nC'est ma dernière communication concernant [SUJET_PRINCIPAL].\n\nBilan de nos échanges :\n• [DATE_1] : [ECHANGE_1]\n• [DATE_2] : [ECHANGE_2]  \n• [DATE_3] : [ECHANGE_3]\n\nVotre position : [POSITION_CLIENT]\nNotre proposition : [NOTRE_PROPOSITION]\n\nJe respecte votre décision de [DECISION_CLIENT].\n\nTrois scénarios pour la suite :\n\n1) [ENTREPRISE] change d'avis → Contact direct : [CONTACT_DIRECT]\n2) Opportunité future → Je vous recontacte dans [DELAI_FUTUR]\n3) Referral → Si vous connaissez une entreprise intéressée par [SOLUTION]\n\n[ENTREPRISE] restera dans mon estime pour [RAISON_RESPECT].\n\nSuccès pour vos projets futurs !\n\n[EXPEDITEUR]\n\nP.S: [MESSAGE_FINAL_POSITIF]`,\n    plan: \"growth\",\n    category: \"cloture\",\n    variables: [\"PRENOM\", \"ENTREPRISE\", \"NOTRE_ENTREPRISE\", \"SUJET_PRINCIPAL\", \"DATE_1\", \"ECHANGE_1\", \"DATE_2\", \"ECHANGE_2\", \"DATE_3\", \"ECHANGE_3\", \"POSITION_CLIENT\", \"NOTRE_PROPOSITION\", \"DECISION_CLIENT\", \"CONTACT_DIRECT\", \"DELAI_FUTUR\", \"SOLUTION\", \"RAISON_RESPECT\", \"EXPEDITEUR\", \"MESSAGE_FINAL_POSITIF\"]\n  }\n];\n\nexport const exampleLeads = [\n  {\n    firstName: \"Marie\",\n    lastName: \"Dubois\",\n    email: \"marie.dubois@techstart.fr\",\n    company: \"TechStart\",\n    sector: \"Tech/SaaS\",\n    position: \"CEO\",\n    aiScore: 85,\n    status: \"new\",\n    source: \"external\",\n    notes: \"Startup en forte croissance, besoin de structurer leur sales process\"\n  },\n  {\n    firstName: \"Pierre\",\n    lastName: \"Martin\",\n    email: \"p.martin@ecom-plus.com\",\n    company: \"Ecom Plus\",\n    sector: \"E-commerce\",\n    position: \"Directeur Marketing\",\n    aiScore: 72,\n    status: \"contacted\",\n    source: \"external\",\n    notes: \"Cherche à améliorer son taux de conversion email\"\n  },\n  {\n    firstName: \"Sophie\",\n    lastName: \"Leroy\",\n    email: \"sophie.leroy@consulting-pro.fr\",\n    company: \"Consulting Pro\",\n    sector: \"Services\",\n    position: \"Associée\",\n    aiScore: 91,\n    status: \"qualified\",\n    source: \"external\",\n    notes: \"Très intéressée, a déjà un budget alloué\"\n  },\n  {\n    firstName: \"Thomas\",\n    lastName: \"Bernard\",\n    email: \"thomas@innov-lab.fr\",\n    company: \"Innov Lab\",\n    sector: \"Tech/SaaS\",\n    position: \"CTO\",\n    aiScore: 68,\n    status: \"new\",\n    source: \"external\",\n    notes: \"Profil technique, à orienter vers notre solution automation\"\n  },\n  {\n    firstName: \"Amélie\",\n    lastName: \"Rousseau\",\n    email: \"amelie.rousseau@retail-chain.fr\",\n    company: \"Retail Chain\",\n    sector: \"E-commerce\",\n    position: \"Head of Sales\",\n    aiScore: 79,\n    status: \"contacted\",\n    source: \"external\",\n    notes: \"Équipe de 15 commerciaux, gros potentiel volume\"\n  }\n];\n\nexport async function seedDatabase() {\n  console.log(\"🌱 Seeding database with French templates and example data...\");\n  \n  try {\n    // Check if templates already exist\n    const existingTemplates = await storage.getTemplates();\n    if (existingTemplates.length > 0) {\n      console.log(`✅ Templates already seeded (${existingTemplates.length} found)`);\n      return true;\n    }\n\n    // Seed all templates with correct plan distribution\n    const allTemplates = [\n      ...frenchEmailTemplates,\n      ...additionalProTemplates,\n      ...growthTemplates\n    ];\n\n    for (const template of allTemplates) {\n      await storage.createTemplate(template);\n    }\n    \n    console.log(`✅ Seeded ${allTemplates.length} French email templates`);\n    console.log(`📊 Distribution: 1 Free + 4 Starter + 10 Pro + 15 Growth = 30 total`);\n    \n    return true;\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    return false;\n  }\n}","size_bytes":31491},"server/stripe-setup.js":{"content":"// Script pour créer les produits et prix Stripe\nimport Stripe from 'stripe';\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.error('STRIPE_SECRET_KEY manquant');\n  process.exit(1);\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n\nasync function createProducts() {\n  try {\n    console.log('🚀 Création des produits Stripe (mensuel + annuel)...');\n\n    // Plan Starter\n    const starterProduct = await stripe.products.create({\n      name: 'LeadPilot Starter',\n      description: '100 leads/mois, 5 templates, 100 variations IA, essai 14 jours'\n    });\n\n    const starterMonthly = await stripe.prices.create({\n      unit_amount: 4900, // 49€ en centimes\n      currency: 'eur',\n      recurring: { interval: 'month' },\n      product: starterProduct.id,\n    });\n\n    const starterYearly = await stripe.prices.create({\n      unit_amount: 49000, // 490€ (10 mois au lieu de 12)\n      currency: 'eur',\n      recurring: { interval: 'year' },\n      product: starterProduct.id,\n    });\n\n    console.log('✅ Starter mensuel:', starterMonthly.id);\n    console.log('✅ Starter annuel:', starterYearly.id);\n\n    // Plan Pro\n    const proProduct = await stripe.products.create({\n      name: 'LeadPilot Pro',\n      description: '400 leads/mois, 15 templates, 300 variations IA, séquences 3 étapes, essai 14 jours'\n    });\n\n    const proMonthly = await stripe.prices.create({\n      unit_amount: 9900, // 99€ en centimes\n      currency: 'eur',\n      recurring: { interval: 'month' },\n      product: proProduct.id,\n    });\n\n    const proYearly = await stripe.prices.create({\n      unit_amount: 99000, // 990€ (10 mois au lieu de 12)\n      currency: 'eur',\n      recurring: { interval: 'year' },\n      product: proProduct.id,\n    });\n\n    console.log('✅ Pro mensuel:', proMonthly.id);\n    console.log('✅ Pro annuel:', proYearly.id);\n\n    // Plan Growth\n    const growthProduct = await stripe.products.create({\n      name: 'LeadPilot Growth',\n      description: '1500 leads/mois, 30 templates, 1000 variations IA, séquences 5 étapes'\n    });\n\n    const growthMonthly = await stripe.prices.create({\n      unit_amount: 29900, // 299€ en centimes\n      currency: 'eur',\n      recurring: { interval: 'month' },\n      product: growthProduct.id,\n    });\n\n    const growthYearly = await stripe.prices.create({\n      unit_amount: 299000, // 2990€ (10 mois au lieu de 12)\n      currency: 'eur',\n      recurring: { interval: 'year' },\n      product: growthProduct.id,\n    });\n\n    console.log('✅ Growth mensuel:', growthMonthly.id);\n    console.log('✅ Growth annuel:', growthYearly.id);\n\n    console.log('\\n📋 IDs des prix à utiliser:');\n    console.log(`STRIPE_STARTER_MONTHLY_PRICE_ID=${starterMonthly.id}`);\n    console.log(`STRIPE_STARTER_YEARLY_PRICE_ID=${starterYearly.id}`);\n    console.log(`STRIPE_PRO_MONTHLY_PRICE_ID=${proMonthly.id}`);\n    console.log(`STRIPE_PRO_YEARLY_PRICE_ID=${proYearly.id}`);\n    console.log(`STRIPE_GROWTH_MONTHLY_PRICE_ID=${growthMonthly.id}`);\n    console.log(`STRIPE_GROWTH_YEARLY_PRICE_ID=${growthYearly.id}`);\n\n  } catch (error) {\n    console.error('❌ Erreur:', error.message);\n  }\n}\n\ncreateProducts();","size_bytes":3159},"server/supabaseClient.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Test connection function\nexport async function testSupabaseConnection() {\n  try {\n    const { data, error } = await supabase.from('users').select('count').limit(1);\n    if (error && error.code !== 'PGRST116') { // PGRST116 = table doesn't exist (expected)\n      throw error;\n    }\n    console.log('✅ Supabase connection successful');\n    return true;\n  } catch (error) {\n    console.error('❌ Supabase connection failed:', error);\n    return false;\n  }\n}","size_bytes":789},"server/routes/emailVariations.ts":{"content":"import type { Express } from \"express\";\nimport { z } from \"zod\";\nimport { isAuthenticated } from \"../replitAuth\";\nimport { storage } from \"../storage\";\nimport { OpenAILeadScoringService } from \"../services/openaiService\";\n\nexport function registerEmailVariationRoutes(app: Express) {\n  // Generate email variations for a template\n  app.post('/api/templates/:templateId/variations', isAuthenticated, async (req: any, res) => {\n    try {\n      const { templateId } = req.params;\n      const schema = z.object({\n        leadContext: z.object({\n          firstName: z.string(),\n          lastName: z.string(),\n          company: z.string(),\n          position: z.string(),\n          sector: z.string()\n        }),\n        count: z.number().min(1).max(5).default(3)\n      });\n\n      const { leadContext, count } = schema.parse(req.body);\n\n      // Get the template\n      const template = await storage.getTemplate(templateId);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n\n      if (!process.env.OPENAI_API_KEY) {\n        return res.status(503).json({ \n          message: \"AI service not available - OpenAI API key required\" \n        });\n      }\n\n      // Generate variations using OpenAI\n      const openaiService = new OpenAILeadScoringService();\n      const variations = await openaiService.generateEmailVariations(\n        template.content,\n        leadContext,\n        count\n      );\n\n      res.json({\n        templateId,\n        originalSubject: template.subject,\n        originalContent: template.content,\n        variations: variations.map((content, index) => ({\n          id: index + 1,\n          subject: template.subject, // Could also vary the subject\n          content,\n          tone: index === 0 ? \"professionnel\" : index === 1 ? \"décontracté\" : \"direct\"\n        })),\n        leadContext\n      });\n    } catch (error) {\n      console.error(\"Error generating email variations:\", error);\n      res.status(500).json({ message: \"Failed to generate variations\" });\n    }\n  });\n\n  // Get available AI features status\n  app.get('/api/ai/status', isAuthenticated, async (req, res) => {\n    res.json({\n      openaiAvailable: !!process.env.OPENAI_API_KEY,\n      apolloAvailable: !!process.env.APOLLO_API_KEY,\n      features: {\n        advancedScoring: !!process.env.OPENAI_API_KEY,\n        emailVariations: !!process.env.OPENAI_API_KEY,\n        realLeadGeneration: !!process.env.APOLLO_API_KEY,\n        leadEnrichment: !!process.env.APOLLO_API_KEY\n      }\n    });\n  });\n}","size_bytes":2531},"server/routes/payments.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport Stripe from \"stripe\";\nimport { storage } from \"../storage\";\nimport { isAuthenticated } from \"../replitAuth\";\n\n// Configuration Stripe (lazy loading pour éviter les erreurs sans clés)\nlet stripe: Stripe | null = null;\n\nfunction getStripeInstance(): Stripe {\n  if (!stripe) {\n    if (!process.env.STRIPE_SECRET_KEY) {\n      throw new Error('STRIPE_SECRET_KEY manquant');\n    }\n    stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2023-10-16\",\n    });\n  }\n  return stripe;\n}\n\n// Prix des plans - Liens de paiement Stripe test configurés\nconst PLAN_PRICES = {\n  // STARTER PLAN\n  starter_monthly: 'https://buy.stripe.com/test_14AaEXc529FXbOgciFbII01?prefilled_email=exemple%40gmail.com',    // Starter 49€/mois\n  starter_yearly: 'https://buy.stripe.com/test_7sY7sL7OM3hzaKc1E1bII00?prefilled_email=exemple%40gmail.com',      // Starter 490€/an\n  \n  // PRO PLAN  \n  pro_monthly: 'https://buy.stripe.com/test_bJe00j5GE9FX4lO1E1bII02?prefilled_email=exemple%40gmail.com',            // Pro 99€/mois\n  pro_yearly: 'https://buy.stripe.com/test_fZu6oH4CA9FX3hK4QdbII03?prefilled_email=exemple%40gmail.com',              // Pro 990€/an\n  \n  // GROWTH PLAN\n  growth_monthly: 'https://buy.stripe.com/test_7sYbJ1gli5pHbOgaaxbII04?prefilled_email=exemple%40gmail.com',      // Growth 299€/mois\n  growth_yearly: 'https://buy.stripe.com/test_9B68wP5GE5pH3hK6YlbII05?prefilled_email=exemple%40gmail.com'         // Growth 2990€/an\n};\n\nexport function registerPaymentRoutes(app: Express) {\n\n  // Créer un abonnement\n  app.post(\"/api/create-subscription\", isAuthenticated, async (req: any, res) => {\n    try {\n      const stripe = getStripeInstance();\n      const { planId, isYearly } = req.body;  // Ajout de isYearly pour gérer mensuel/annuel\n      const userId = req.user.claims.sub;\n      \n      console.log(`💳 Création d'abonnement ${planId} ${isYearly ? 'annuel' : 'mensuel'} pour l'utilisateur ${userId}`);\n\n      // Récupérer l'utilisateur\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Vérifier si l'utilisateur a déjà un abonnement actif\n      if (user.stripeSubscriptionId) {\n        const existingSubscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n        if (existingSubscription.status === 'active') {\n          return res.status(400).json({ \n            message: \"Vous avez déjà un abonnement actif\" \n          });\n        }\n      }\n\n      let customerId = user.stripeCustomerId;\n\n      // Créer un client Stripe si nécessaire\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email || '',\n          name: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n          metadata: {\n            userId: userId\n          }\n        });\n        \n        customerId = customer.id;\n        \n        // Mettre à jour l'utilisateur avec l'ID client Stripe\n        await storage.updateUserStripeInfo(userId, { \n          stripeCustomerId: customerId \n        });\n        \n        console.log(`✅ Client Stripe créé: ${customerId}`);\n      }\n\n      // Déterminer le bon prix selon le plan et la période\n      const priceKey = `${planId}_${isYearly ? 'yearly' : 'monthly'}` as keyof typeof PLAN_PRICES;\n      const priceId = PLAN_PRICES[priceKey];\n      \n      if (!priceId) {\n        return res.status(400).json({ \n          message: `Plan ${planId} ${isYearly ? 'annuel' : 'mensuel'} non disponible` \n        });\n      }\n\n      // Créer l'abonnement\n      const subscription = await stripe.subscriptions.create({\n        customer: customerId,\n        items: [{\n          price: priceId,\n        }],\n        payment_behavior: 'default_incomplete',\n        payment_settings: { save_default_payment_method: 'on_subscription' },\n        expand: ['latest_invoice.payment_intent'],\n      });\n\n      // Mettre à jour l'utilisateur avec l'ID d'abonnement\n      await storage.updateUserStripeInfo(userId, {\n        stripeSubscriptionId: subscription.id\n      });\n\n      console.log(`✅ Abonnement créé: ${subscription.id}`);\n\n      const clientSecret = (subscription.latest_invoice as any)?.payment_intent?.client_secret;\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret,\n        status: subscription.status\n      });\n\n    } catch (error: any) {\n      console.error(\"Erreur création abonnement:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la création de l'abonnement\",\n        error: error.message \n      });\n    }\n  });\n\n  // Webhook Stripe pour les événements\n  app.post(\"/api/stripe-webhook\", async (req, res) => {\n    const sig = req.headers['stripe-signature'] as string;\n    \n    try {\n      const stripe = getStripeInstance();\n      // Utiliser la clé webhook fournie\n      const event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET || 'whsec_U3z9XZKXQ7zQddmouNlZUByjjIxX946U');\n\n      console.log(`🎣 Webhook Stripe reçu: ${event.type}`);\n\n      switch (event.type) {\n        case 'invoice.payment_succeeded':\n          const invoice = event.data.object as Stripe.Invoice;\n          const subscriptionId = typeof invoice.subscription === 'string' \n            ? invoice.subscription \n            : invoice.subscription?.id;\n          \n          if (subscriptionId) {\n            const subscription = await stripe.subscriptions.retrieve(subscriptionId);\n            const customerId = subscription.customer as string;\n            \n            // Récupérer l'utilisateur par customer ID\n            const user = await storage.getUserByStripeCustomerId(customerId);\n            \n            if (user) {\n              // Déterminer le plan basé sur le prix\n              let newPlan = 'free';\n              if (subscription.items.data[0]?.price.id === PLAN_PRICES.pro) {\n                newPlan = 'pro';\n              } else if (subscription.items.data[0]?.price.id === PLAN_PRICES.growth) {\n                newPlan = 'growth';\n              }\n              \n              // Mettre à jour le plan de l'utilisateur\n              await storage.updateUserPlan(user.id, newPlan);\n              \n              console.log(`✅ Plan mis à jour: ${user.id} -> ${newPlan}`);\n            }\n          }\n          break;\n\n        case 'customer.subscription.deleted':\n          const deletedSubscription = event.data.object as Stripe.Subscription;\n          const deletedCustomerId = deletedSubscription.customer as string;\n          \n          // Remettre l'utilisateur au plan gratuit\n          const userToDowngrade = await storage.getUserByStripeCustomerId(deletedCustomerId);\n          if (userToDowngrade) {\n            await storage.updateUserPlan(userToDowngrade.id, 'free');\n            console.log(`⬇️ Plan remis à gratuit: ${userToDowngrade.id}`);\n          }\n          break;\n\n        default:\n          console.log(`⚠️ Événement Stripe non géré: ${event.type}`);\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      console.error('Erreur webhook Stripe:', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Annuler un abonnement\n  app.post(\"/api/cancel-subscription\", isAuthenticated, async (req: any, res) => {\n    try {\n      const stripe = getStripeInstance();\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.stripeSubscriptionId) {\n        return res.status(404).json({ message: \"Aucun abonnement trouvé\" });\n      }\n\n      // Annuler l'abonnement à la fin de la période de facturation\n      const subscription = await stripe.subscriptions.update(user.stripeSubscriptionId, {\n        cancel_at_period_end: true,\n      });\n\n      console.log(`🚫 Abonnement programmé pour annulation: ${subscription.id}`);\n\n      res.json({ \n        message: \"Abonnement programmé pour annulation\",\n        cancelAt: subscription.cancel_at \n      });\n\n    } catch (error: any) {\n      console.error(\"Erreur annulation abonnement:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de l'annulation\",\n        error: error.message \n      });\n    }\n  });\n\n  // Récupérer les informations d'abonnement\n  app.get(\"/api/subscription-status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const stripe = getStripeInstance();\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.stripeSubscriptionId) {\n        return res.json({ \n          status: 'none',\n          plan: user?.plan || 'free'\n        });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n      \n      res.json({\n        status: subscription.status,\n        plan: user.plan,\n        currentPeriodEnd: subscription.current_period_end,\n        cancelAtPeriodEnd: subscription.cancel_at_period_end\n      });\n\n    } catch (error: any) {\n      console.error(\"Erreur récupération statut:\", error);\n      res.status(500).json({ \n        message: \"Erreur lors de la récupération du statut\",\n        error: error.message \n      });\n    }\n  });\n\n  // Route simple pour redirection directe vers Stripe avec liens personnalisés\n  app.post('/api/payment/direct-checkout', async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: 'Non authentifié' });\n      }\n\n      const { plan, billing } = req.body;\n      \n      if (!plan || !billing) {\n        return res.status(400).json({ error: 'Plan et facturation requis' });\n      }\n\n      const priceKey = `${plan}_${billing}` as keyof typeof PLAN_PRICES;\n      let paymentUrl = PLAN_PRICES[priceKey];\n\n      if (!paymentUrl) {\n        return res.status(400).json({ error: 'Plan invalide' });\n      }\n\n      // Remplacer l'email exemple par l'email de l'utilisateur  \n      const userEmail = req.user?.email || req.user?.claims?.email || '';\n      const encodedEmail = encodeURIComponent(userEmail);\n      paymentUrl = paymentUrl.replace('exemple%40gmail.com', encodedEmail);\n      \n      // Ajouter les paramètres de retour pour identifier le plan\n      const successUrl = `${req.protocol}://${req.get('host')}/payment-success?plan=${plan}&billing=${billing}`;\n      const encodedSuccessUrl = encodeURIComponent(successUrl);\n      \n      // Ajouter l'URL de succès au lien Stripe si elle n'est pas déjà présente\n      if (!paymentUrl.includes('success_url=')) {\n        paymentUrl += `&success_url=${encodedSuccessUrl}`;\n      }\n\n      console.log(`🔗 Redirection paiement ${plan} ${billing} pour ${userEmail}: ${paymentUrl}`);\n\n      res.json({ url: paymentUrl });\n    } catch (error) {\n      console.error('Erreur redirection checkout:', error);\n      res.status(500).json({ error: 'Erreur lors de la redirection' });\n    }\n  });\n\n  // Route pour vérifier le succès du paiement et mettre à jour le plan utilisateur\n  app.post('/api/payment/verify-success', async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        console.log('❌ Utilisateur non authentifié lors de la vérification du paiement');\n        return res.status(401).json({ error: 'Non authentifié' });\n      }\n\n      const { planType, billing } = req.body;\n      const userId = req.user.id;\n\n      console.log(`💳 Vérification paiement pour user ${userId}:`, { planType, billing });\n      console.log(`👤 Utilisateur connecté:`, req.user.email);\n\n      // Mettre à jour le plan de l'utilisateur dans la base de données\n      let newPlan = 'free';\n      let planName = 'Gratuit';\n\n      switch (planType) {\n        case 'starter':\n          newPlan = 'starter';\n          planName = 'Starter';\n          break;\n        case 'pro':\n          newPlan = 'pro';\n          planName = 'Pro';\n          break;\n        case 'growth':\n          newPlan = 'growth';\n          planName = 'Growth';\n          break;\n        default:\n          return res.status(400).json({ error: 'Plan invalide' });\n      }\n\n      // Mettre à jour le plan utilisateur en base\n      await storage.updateUserPlan(userId, newPlan, billing === 'yearly');\n\n      console.log(`✅ Plan utilisateur ${userId} mis à jour vers ${newPlan} (${billing})`);\n\n      res.json({ \n        success: true, \n        planName,\n        message: `Plan ${planName} activé avec succès` \n      });\n\n    } catch (error) {\n      console.error('Erreur vérification paiement:', error);\n      res.status(500).json({ error: 'Erreur lors de la vérification du paiement' });\n    }\n  });\n\n  // Webhook Stripe pour traitement automatique des paiements\n  app.post(\"/api/stripe/webhook\", express.raw({ type: 'application/json' }), async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n    if (!webhookSecret) {\n      console.log('⚠️ Webhook Stripe configuré mais STRIPE_WEBHOOK_SECRET manquant');\n      return res.status(400).send('Webhook secret not configured');\n    }\n\n    let event;\n\n    try {\n      const stripe = getStripeInstance();\n      event = stripe.webhooks.constructEvent(req.body, sig!, webhookSecret);\n      console.log(`🔔 Webhook Stripe reçu: ${event.type}`);\n    } catch (err: any) {\n      console.error(`❌ Erreur signature webhook: ${err.message}`);\n      return res.status(400).send(`Webhook signature verification failed: ${err.message}`);\n    }\n\n    try {\n      switch (event.type) {\n        case 'checkout.session.completed': {\n          const session = event.data.object as Stripe.Checkout.Session;\n          console.log(`✅ Paiement réussi pour session: ${session.id}`);\n\n          if (session.customer && session.metadata?.userId) {\n            const userId = session.metadata.userId;\n            const planId = session.metadata.planId || 'starter';\n            const isYearly = session.metadata.isYearly === 'true';\n\n            console.log(`📈 Mise à jour du plan utilisateur ${userId} vers ${planId} (${isYearly ? 'annuel' : 'mensuel'})`);\n\n            // Mettre à jour le plan de l'utilisateur\n            await storage.updateUserPlan(userId, planId);\n            \n            // Enregistrer les infos Stripe si c'est un abonnement\n            if (session.subscription) {\n              await storage.updateUserStripeInfo(userId, {\n                stripeCustomerId: session.customer as string,\n                stripeSubscriptionId: session.subscription as string\n              });\n            }\n\n            console.log(`✅ Plan utilisateur ${userId} mis à jour avec succès`);\n          }\n          break;\n        }\n\n        case 'customer.subscription.updated': {\n          const subscription = event.data.object as Stripe.Subscription;\n          console.log(`🔄 Abonnement mis à jour: ${subscription.id}, statut: ${subscription.status}`);\n\n          // Trouver l'utilisateur par customer ID\n          const user = await storage.getUserByStripeCustomerId(subscription.customer as string);\n          if (user) {\n            // Mettre à jour le statut si l'abonnement est annulé ou suspendu\n            if (subscription.status === 'canceled' || subscription.status === 'unpaid') {\n              await storage.updateUserPlan(user.id, 'free');\n              console.log(`📉 Plan utilisateur ${user.id} rétrogradé vers Free suite à l'annulation`);\n            }\n          }\n          break;\n        }\n\n        case 'customer.subscription.deleted': {\n          const subscription = event.data.object as Stripe.Subscription;\n          console.log(`🗑️ Abonnement supprimé: ${subscription.id}`);\n\n          // Trouver l'utilisateur et le remettre en plan gratuit\n          const user = await storage.getUserByStripeCustomerId(subscription.customer as string);\n          if (user) {\n            await storage.updateUserPlan(user.id, 'free');\n            await storage.updateUserStripeInfo(user.id, {\n              stripeCustomerId: user.stripeCustomerId,\n              stripeSubscriptionId: null\n            });\n            console.log(`📉 Plan utilisateur ${user.id} rétrogradé vers Free suite à la suppression`);\n          }\n          break;\n        }\n\n        case 'invoice.payment_failed': {\n          const invoice = event.data.object as Stripe.Invoice;\n          console.log(`❌ Échec de paiement pour facture: ${invoice.id}`);\n          // Optionnel: notifier l'utilisateur ou suspendre temporairement\n          break;\n        }\n\n        default:\n          console.log(`ℹ️ Événement webhook non traité: ${event.type}`);\n      }\n\n      res.json({ received: true });\n    } catch (error) {\n      console.error('❌ Erreur traitement webhook:', error);\n      res.status(500).json({ error: 'Webhook processing failed' });\n    }\n  });\n}","size_bytes":16884},"server/routes/sequences.ts":{"content":"import type { Express } from \"express\";\nimport { isAuthenticated } from \"../replitAuth\";\n\n// Données simulées pour les séquences\nconst mockSequences: Record<string, any[]> = {\n  \"45880930\": [\n    {\n      id: \"seq-1\",\n      userId: \"45880930\",\n      name: \"Prospection initiale\",\n      description: \"Première approche des prospects\",\n      isActive: true,\n      createdAt: new Date(),\n      steps: []\n    }\n  ]\n};\n\nexport function registerSequenceRoutes(app: Express) {\n  // Récupérer les séquences d'un utilisateur\n  app.get('/api/sequences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Retourner les séquences pour cet utilisateur\n      const userSequences = mockSequences[userId] || [];\n      \n      res.json(userSequences);\n    } catch (error) {\n      console.error(\"Error fetching sequences:\", error);\n      res.status(500).json({ message: \"Failed to fetch sequences\" });\n    }\n  });\n\n  // Créer une nouvelle séquence\n  app.post('/api/sequences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { name, description } = req.body;\n      \n      if (!name) {\n        return res.status(400).json({ message: \"Name is required\" });\n      }\n      \n      console.log(`📧 Nouvelle séquence créée par ${userId}: ${name}`);\n      \n      // Pour l'instant, retourner une réponse mock\n      const newSequence = {\n        id: `seq-${Date.now()}`,\n        userId,\n        name,\n        description: description || \"\",\n        isActive: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      \n      res.json(newSequence);\n    } catch (error) {\n      console.error(\"Error creating sequence:\", error);\n      res.status(500).json({ message: \"Failed to create sequence\" });\n    }\n  });\n\n  // Créer/mettre à jour les étapes d'une séquence\n  app.post('/api/sequences/:id/steps', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { steps } = req.body;\n      const userId = req.user.claims.sub;\n      \n      console.log(`📧 Configuration des étapes pour la séquence ${id}:`, steps.length, 'étapes');\n      \n      // Simulation de la sauvegarde des étapes\n      // En production, ici on sauvegarderait en base de données\n      \n      // Programmer les envois automatiques pour les étapes configurées\n      steps.forEach((step: any, index: number) => {\n        if (step.emailId && step.delayDays >= 0) {\n          console.log(`  ⏰ Étape ${index + 1}: ${step.name} - Délai: ${step.delayDays}j ${step.delayHours}h`);\n          console.log(`     Email: ${step.emailId}`);\n        }\n      });\n      \n      res.json({ \n        message: \"Steps configured successfully\", \n        stepsCount: steps.length,\n        automationEnabled: true\n      });\n    } catch (error) {\n      console.error(\"Error configuring sequence steps:\", error);\n      res.status(500).json({ message: \"Failed to configure steps\" });\n    }\n  });\n\n  // Inscrire des leads dans une séquence\n  app.post('/api/sequences/:id/enroll', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { leadIds, steps } = req.body;\n      const userId = req.user.claims.sub;\n      \n      console.log(`📧 Inscription de ${leadIds.length} lead(s) dans la séquence ${id}`);\n      \n      const { SequenceAutomationService } = await import(\"../services/sequenceAutomation\");\n      \n      const enrollmentResults = [];\n      \n      for (const leadId of leadIds) {\n        const scheduledEmails = await SequenceAutomationService.enrollLeadInSequence(\n          id, leadId, userId, steps\n        );\n        enrollmentResults.push({\n          leadId,\n          scheduledEmails: scheduledEmails.length\n        });\n      }\n      \n      res.json({ \n        message: \"Leads enrolled successfully\",\n        enrollments: enrollmentResults.length,\n        totalScheduledEmails: enrollmentResults.reduce((sum, r) => sum + r.scheduledEmails, 0)\n      });\n    } catch (error) {\n      console.error(\"Error enrolling leads:\", error);\n      res.status(500).json({ message: \"Failed to enroll leads\" });\n    }\n  });\n\n  // Statistiques de l'automatisation\n  app.get('/api/sequences/automation/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const { SequenceAutomationService } = await import(\"../services/sequenceAutomation\");\n      const stats = SequenceAutomationService.getQueueStats();\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error getting automation stats:\", error);\n      res.status(500).json({ message: \"Failed to get stats\" });\n    }\n  });\n\n  // Supprimer une séquence\n  app.delete('/api/sequences/:id', async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = \"45880930\"; // Utilisateur fixe pour la démo\n      \n      console.log(`🗑️ Suppression de la séquence ${id} pour l'utilisateur ${userId}`);\n      \n      // Vérifier si l'utilisateur a des séquences\n      if (!mockSequences[userId]) {\n        mockSequences[userId] = [];\n      }\n      \n      // Supprimer la séquence des données simulées\n      const initialCount = mockSequences[userId].length;\n      mockSequences[userId] = mockSequences[userId].filter(seq => seq.id !== id);\n      const finalCount = mockSequences[userId].length;\n      console.log(`✅ Séquence ${id} supprimée avec succès (${initialCount} -> ${finalCount})`);\n      \n      res.json({ message: \"Sequence deleted successfully\", sequenceId: id });\n    } catch (error) {\n      console.error(\"Error deleting sequence:\", error);\n      res.status(500).json({ message: \"Failed to delete sequence\" });\n    }\n  });\n\n  // Toggle statut d'une séquence\n  app.patch('/api/sequences/:id/toggle', async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { isActive } = req.body;\n      const userId = \"45880930\"; // Utilisateur fixe pour la démo\n      \n      console.log(`🔄 Toggle séquence ${id} pour l'utilisateur ${userId}: ${isActive ? 'Active' : 'Inactive'}`);\n      \n      // Vérifier si l'utilisateur a des séquences\n      if (!mockSequences[userId]) {\n        mockSequences[userId] = [];\n      }\n      \n      // Mettre à jour le statut de la séquence dans les données simulées\n      const sequenceIndex = mockSequences[userId].findIndex(seq => seq.id === id);\n      if (sequenceIndex !== -1) {\n        mockSequences[userId][sequenceIndex].isActive = isActive;\n        console.log(`✅ Statut mis à jour: ${isActive ? 'Active' : 'Inactive'} pour séquence ${id}`);\n      } else {\n        console.log(`❌ Séquence ${id} non trouvée dans les données`);\n      }\n      \n      res.json({ \n        message: \"Sequence status updated successfully\", \n        sequenceId: id,\n        isActive: isActive \n      });\n    } catch (error) {\n      console.error(\"Error toggling sequence:\", error);\n      res.status(500).json({ message: \"Failed to toggle sequence status\" });\n    }\n  });\n}","size_bytes":7055},"server/services/apolloService.ts":{"content":"import type { LeadGenerationService, LeadSearchParams, GeneratedLead, EnrichedLeadData } from \"./leadService\";\n\nexport class ApolloLeadService implements LeadGenerationService {\n  private apiKey: string;\n  private baseUrl = \"https://api.apollo.io/v1\";\n\n  constructor() {\n    this.apiKey = process.env.APOLLO_API_KEY || \"\";\n    if (!this.apiKey) {\n      throw new Error(\"APOLLO_API_KEY is required\");\n    }\n  }\n\n  async generateLeads(params: LeadSearchParams): Promise<GeneratedLead[]> {\n    try {\n      const searchParams = this.buildSearchParams(params);\n      \n      const response = await fetch(`${this.baseUrl}/mixed_people/search`, {\n        method: 'POST',\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Content-Type': 'application/json',\n          'X-Api-Key': this.apiKey\n        },\n        body: JSON.stringify(searchParams)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Apollo API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return this.transformApolloResponse(data);\n    } catch (error) {\n      console.error(\"Error calling Apollo API:\", error);\n      throw error;\n    }\n  }\n\n  async enrichLead(email: string): Promise<EnrichedLeadData | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/people/match`, {\n        method: 'POST',\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Content-Type': 'application/json',\n          'X-Api-Key': this.apiKey\n        },\n        body: JSON.stringify({\n          email: email,\n          reveal_personal_emails: true\n        })\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null; // Person not found\n        }\n        throw new Error(`Apollo enrichment error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return this.transformEnrichmentResponse(data);\n    } catch (error) {\n      console.error(\"Error enriching lead with Apollo:\", error);\n      return null;\n    }\n  }\n\n  private buildSearchParams(params: LeadSearchParams) {\n    const apolloParams: any = {\n      page: 1,\n      per_page: Math.min(params.limit || 25, 100),\n      person_locations: params.location ? [params.location] : [\"France\"],\n      person_seniorities: [\"c_suite\", \"senior\", \"director\", \"vp\"],\n    };\n\n    if (params.sector) {\n      // Map common sectors to Apollo industry keywords\n      const industryMapping: Record<string, string[]> = {\n        \"Tech/SaaS\": [\"Software\", \"Computer Software\", \"Information Technology\", \"SaaS\"],\n        \"E-commerce\": [\"E-commerce\", \"Retail\", \"Internet\"],\n        \"Finance\": [\"Financial Services\", \"Banking\", \"Fintech\"],\n        \"Marketing\": [\"Marketing\", \"Advertising\", \"Digital Marketing\"],\n        \"Conseil\": [\"Management Consulting\", \"Business Consulting\"],\n        \"Santé\": [\"Healthcare\", \"Medical Devices\", \"Biotechnology\"],\n        \"Education\": [\"Education\", \"E-learning\", \"EdTech\"]\n      };\n\n      const industries = industryMapping[params.sector] || [params.sector];\n      apolloParams.organization_industry_tag_ids = industries;\n    }\n\n    if (params.jobTitles && params.jobTitles.length > 0) {\n      apolloParams.person_titles = params.jobTitles;\n    } else {\n      // Default to decision maker titles\n      apolloParams.person_titles = [\n        \"CEO\", \"CTO\", \"CMO\", \"COO\", \"Founder\", \"Co-founder\",\n        \"Director\", \"VP\", \"Head of\", \"Manager\"\n      ];\n    }\n\n    if (params.companySize) {\n      const sizeMapping: Record<string, string[]> = {\n        \"startup\": [\"1-10\", \"11-50\"],\n        \"small\": [\"11-50\", \"51-200\"],\n        \"medium\": [\"201-500\", \"501-1000\"],\n        \"large\": [\"1001-5000\", \"5001+\"]\n      };\n      apolloParams.organization_num_employees_ranges = sizeMapping[params.companySize] || [\"11-200\"];\n    }\n\n    return apolloParams;\n  }\n\n  private transformApolloResponse(data: any): GeneratedLead[] {\n    if (!data.people || !Array.isArray(data.people)) {\n      return [];\n    }\n\n    return data.people.map((person: any) => {\n      const organization = person.organization || {};\n      \n      return {\n        firstName: person.first_name || \"\",\n        lastName: person.last_name || \"\",\n        email: person.email || \"\",\n        company: organization.name || \"\",\n        sector: this.mapApolloIndustryToSector(organization.industry),\n        position: person.title || \"\",\n        linkedinUrl: person.linkedin_url || \"\",\n        companyWebsite: organization.website_url || \"\",\n        employeeCount: organization.estimated_num_employees || 0,\n        location: person.city && person.state ? `${person.city}, ${person.state}` : person.country || \"\"\n      };\n    });\n  }\n\n  private transformEnrichmentResponse(data: any): EnrichedLeadData {\n    const person = data.person || {};\n    const organization = person.organization || {};\n\n    return {\n      company: {\n        industry: organization.industry || \"\",\n        size: this.mapEmployeeCountToSize(organization.estimated_num_employees),\n        revenue: organization.estimated_annual_revenue || \"\",\n        founded: organization.founded_year || 0,\n        technologies: organization.technologies || []\n      },\n      person: {\n        seniority: this.mapTitleToSeniority(person.title),\n        department: this.mapTitleToDepartment(person.title),\n        phoneNumber: person.phone_numbers?.[0]?.sanitized_number || \"\"\n      },\n      socialProfiles: {\n        linkedin: person.linkedin_url || \"\",\n        twitter: person.twitter_url || \"\"\n      }\n    };\n  }\n\n  private mapApolloIndustryToSector(industry: string): string {\n    if (!industry) return \"Non spécifié\";\n    \n    const mapping: Record<string, string> = {\n      \"Computer Software\": \"Tech/SaaS\",\n      \"Software\": \"Tech/SaaS\",\n      \"Information Technology\": \"Tech/SaaS\",\n      \"SaaS\": \"Tech/SaaS\",\n      \"Internet\": \"E-commerce\",\n      \"E-commerce\": \"E-commerce\",\n      \"Retail\": \"E-commerce\",\n      \"Financial Services\": \"Finance\",\n      \"Banking\": \"Finance\",\n      \"Fintech\": \"Finance\",\n      \"Marketing\": \"Marketing\",\n      \"Advertising\": \"Marketing\",\n      \"Digital Marketing\": \"Marketing\",\n      \"Management Consulting\": \"Conseil\",\n      \"Business Consulting\": \"Conseil\",\n      \"Healthcare\": \"Santé\",\n      \"Medical Devices\": \"Santé\",\n      \"Biotechnology\": \"Santé\",\n      \"Education\": \"Education\",\n      \"E-learning\": \"Education\",\n      \"EdTech\": \"Education\"\n    };\n\n    return mapping[industry] || industry;\n  }\n\n  private mapEmployeeCountToSize(count: number): string {\n    if (count <= 10) return \"1-10\";\n    if (count <= 50) return \"11-50\";\n    if (count <= 200) return \"51-200\";\n    if (count <= 500) return \"201-500\";\n    return \"500+\";\n  }\n\n  private mapTitleToSeniority(title: string): string {\n    if (!title) return \"Mid\";\n    \n    const titleLower = title.toLowerCase();\n    if (titleLower.includes(\"ceo\") || titleLower.includes(\"founder\") || titleLower.includes(\"president\")) {\n      return \"Executive\";\n    }\n    if (titleLower.includes(\"cto\") || titleLower.includes(\"cmo\") || titleLower.includes(\"coo\") || titleLower.includes(\"vp\")) {\n      return \"Executive\";\n    }\n    if (titleLower.includes(\"director\") || titleLower.includes(\"head\")) {\n      return \"Senior\";\n    }\n    if (titleLower.includes(\"manager\") || titleLower.includes(\"lead\")) {\n      return \"Mid\";\n    }\n    if (titleLower.includes(\"junior\") || titleLower.includes(\"associate\") || titleLower.includes(\"coordinator\")) {\n      return \"Junior\";\n    }\n    \n    return \"Mid\";\n  }\n\n  private mapTitleToDepartment(title: string): string {\n    if (!title) return \"Operations\";\n    \n    const titleLower = title.toLowerCase();\n    if (titleLower.includes(\"sales\") || titleLower.includes(\"business development\") || titleLower.includes(\"revenue\")) {\n      return \"Sales\";\n    }\n    if (titleLower.includes(\"marketing\") || titleLower.includes(\"growth\") || titleLower.includes(\"content\")) {\n      return \"Marketing\";\n    }\n    if (titleLower.includes(\"tech\") || titleLower.includes(\"engineer\") || titleLower.includes(\"developer\") || titleLower.includes(\"cto\")) {\n      return \"Technology\";\n    }\n    if (titleLower.includes(\"finance\") || titleLower.includes(\"accounting\") || titleLower.includes(\"cfo\")) {\n      return \"Finance\";\n    }\n    if (titleLower.includes(\"hr\") || titleLower.includes(\"people\") || titleLower.includes(\"talent\")) {\n      return \"HR\";\n    }\n    if (titleLower.includes(\"operations\") || titleLower.includes(\"ops\") || titleLower.includes(\"coo\")) {\n      return \"Operations\";\n    }\n    \n    return \"Operations\";\n  }\n}","size_bytes":8553},"server/services/csvService.ts":{"content":"import type { Lead, InsertLead } from \"@shared/schema\";\n\nexport interface CSVExportOptions {\n  leads: Lead[];\n  includeScoring?: boolean;\n  includeNotes?: boolean;\n}\n\nexport interface CSVImportResult {\n  successful: InsertLead[];\n  errors: { row: number; error: string; data: any }[];\n  total: number;\n}\n\nexport class CSVService {\n  static exportLeadsToCSV(options: CSVExportOptions): string {\n    const { leads, includeScoring = true, includeNotes = true } = options;\n    \n    if (leads.length === 0) {\n      return \"Aucun lead à exporter\";\n    }\n\n    // Define CSV headers\n    const headers = [\n      \"Prénom\",\n      \"Nom\", \n      \"Email\",\n      \"Entreprise\",\n      \"Secteur\",\n      \"Poste\",\n      \"Statut\",\n      \"Source\"\n    ];\n\n    if (includeScoring) {\n      headers.push(\"Score IA\");\n    }\n\n    if (includeNotes) {\n      headers.push(\"Notes\");\n    }\n\n    headers.push(\"Date de création\");\n\n    // Convert leads to CSV rows\n    const rows = leads.map(lead => {\n      const row = [\n        this.escapeCSVField(lead.firstName || \"\"),\n        this.escapeCSVField(lead.lastName || \"\"),\n        this.escapeCSVField(lead.email || \"\"),\n        this.escapeCSVField(lead.company || \"\"),\n        this.escapeCSVField(lead.sector || \"\"),\n        this.escapeCSVField(lead.position || \"\"),\n        this.escapeCSVField(lead.status || \"\"),\n        this.escapeCSVField(lead.source || \"\")\n      ];\n\n      if (includeScoring) {\n        row.push(lead.aiScore?.toString() || \"\");\n      }\n\n      if (includeNotes) {\n        row.push(this.escapeCSVField(lead.notes || \"\"));\n      }\n\n      row.push(lead.createdAt ? new Date(lead.createdAt).toLocaleDateString('fr-FR') : \"\");\n\n      return row.join(\",\");\n    });\n\n    return [headers.join(\",\"), ...rows].join(\"\\n\");\n  }\n\n  static parseCSVToLeads(csvContent: string, userId: string): CSVImportResult {\n    const result: CSVImportResult = {\n      successful: [],\n      errors: [],\n      total: 0\n    };\n\n    try {\n      const lines = csvContent.trim().split('\\n');\n      \n      if (lines.length < 2) {\n        result.errors.push({\n          row: 0,\n          error: \"Le fichier CSV doit contenir au moins une ligne d'en-têtes et une ligne de données\",\n          data: null\n        });\n        return result;\n      }\n\n      const headers = this.parseCSVLine(lines[0]);\n      const dataLines = lines.slice(1);\n      result.total = dataLines.length;\n\n      // Map headers to required fields\n      const fieldMapping = this.createFieldMapping(headers);\n\n      if (!fieldMapping.email || !fieldMapping.firstName || !fieldMapping.lastName) {\n        result.errors.push({\n          row: 0,\n          error: \"Les colonnes 'Email', 'Prénom' et 'Nom' sont obligatoires\",\n          data: headers\n        });\n        return result;\n      }\n\n      dataLines.forEach((line, index) => {\n        const rowNumber = index + 2; // +2 because we skip header and arrays are 0-indexed\n        \n        try {\n          const fields = this.parseCSVLine(line);\n          \n          if (fields.length === 0) {\n            return; // Skip empty lines\n          }\n\n          const lead = this.createLeadFromCSVFields(fields, fieldMapping, userId);\n          \n          // Validate required fields\n          if (!lead.email || !lead.firstName || !lead.lastName) {\n            result.errors.push({\n              row: rowNumber,\n              error: \"Email, Prénom et Nom sont obligatoires\",\n              data: fields\n            });\n            return;\n          }\n\n          // Validate email format\n          if (!this.isValidEmail(lead.email)) {\n            result.errors.push({\n              row: rowNumber,\n              error: \"Format d'email invalide\",\n              data: fields\n            });\n            return;\n          }\n\n          result.successful.push(lead);\n        } catch (error) {\n          result.errors.push({\n            row: rowNumber,\n            error: `Erreur de parsing: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,\n            data: line\n          });\n        }\n      });\n\n    } catch (error) {\n      result.errors.push({\n        row: 0,\n        error: `Erreur générale: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,\n        data: null\n      });\n    }\n\n    return result;\n  }\n\n  private static parseCSVLine(line: string): string[] {\n    const fields: string[] = [];\n    let current = '';\n    let inQuotes = false;\n    let i = 0;\n\n    while (i < line.length) {\n      const char = line[i];\n      const nextChar = line[i + 1];\n\n      if (char === '\"') {\n        if (inQuotes && nextChar === '\"') {\n          // Escaped quote\n          current += '\"';\n          i += 2;\n        } else {\n          // Toggle quote state\n          inQuotes = !inQuotes;\n          i++;\n        }\n      } else if (char === ',' && !inQuotes) {\n        // Field separator\n        fields.push(current.trim());\n        current = '';\n        i++;\n      } else {\n        current += char;\n        i++;\n      }\n    }\n\n    // Add the last field\n    fields.push(current.trim());\n\n    return fields;\n  }\n\n  private static escapeCSVField(field: string): string {\n    if (!field) return '';\n    \n    // If field contains comma, quote, or newline, wrap in quotes and escape internal quotes\n    if (field.includes(',') || field.includes('\"') || field.includes('\\n')) {\n      return `\"${field.replace(/\"/g, '\"\"')}\"`;\n    }\n    \n    return field;\n  }\n\n  private static createFieldMapping(headers: string[]): Record<string, number> {\n    const mapping: Record<string, number> = {};\n    \n    headers.forEach((header, index) => {\n      const normalizedHeader = header.toLowerCase().trim();\n      \n      // Map various possible header names to our fields\n      if (normalizedHeader.includes('email') || normalizedHeader.includes('e-mail')) {\n        mapping.email = index;\n      } else if (normalizedHeader.includes('prénom') || normalizedHeader.includes('prenom') || normalizedHeader.includes('firstname') || normalizedHeader.includes('first name')) {\n        mapping.firstName = index;\n      } else if (normalizedHeader.includes('nom') || normalizedHeader.includes('lastname') || normalizedHeader.includes('last name')) {\n        mapping.lastName = index;\n      } else if (normalizedHeader.includes('entreprise') || normalizedHeader.includes('company') || normalizedHeader.includes('société')) {\n        mapping.company = index;\n      } else if (normalizedHeader.includes('secteur') || normalizedHeader.includes('sector') || normalizedHeader.includes('industrie')) {\n        mapping.sector = index;\n      } else if (normalizedHeader.includes('poste') || normalizedHeader.includes('position') || normalizedHeader.includes('titre')) {\n        mapping.position = index;\n      } else if (normalizedHeader.includes('statut') || normalizedHeader.includes('status')) {\n        mapping.status = index;\n      } else if (normalizedHeader.includes('source')) {\n        mapping.source = index;\n      } else if (normalizedHeader.includes('score') || normalizedHeader.includes('ia')) {\n        mapping.aiScore = index;\n      } else if (normalizedHeader.includes('note') || normalizedHeader.includes('comment')) {\n        mapping.notes = index;\n      }\n    });\n\n    return mapping;\n  }\n\n  private static createLeadFromCSVFields(\n    fields: string[], \n    mapping: Record<string, number>, \n    userId: string\n  ): InsertLead {\n    const lead: InsertLead = {\n      userId,\n      firstName: this.getFieldValue(fields, mapping.firstName) || '',\n      lastName: this.getFieldValue(fields, mapping.lastName) || '',\n      email: this.getFieldValue(fields, mapping.email) || '',\n      company: this.getFieldValue(fields, mapping.company) || '',\n      sector: this.getFieldValue(fields, mapping.sector) || 'Non spécifié',\n      position: this.getFieldValue(fields, mapping.position) || 'Non spécifié',\n      status: this.validateStatus(this.getFieldValue(fields, mapping.status)) || 'new',\n      source: this.validateSource(this.getFieldValue(fields, mapping.source)) || 'csv_import',\n      notes: this.getFieldValue(fields, mapping.notes) || null\n    };\n\n    // Parse AI score if provided\n    const scoreValue = this.getFieldValue(fields, mapping.aiScore);\n    if (scoreValue) {\n      const score = parseInt(scoreValue, 10);\n      if (!isNaN(score) && score >= 0 && score <= 100) {\n        lead.aiScore = score;\n      }\n    }\n\n    return lead;\n  }\n\n  private static getFieldValue(fields: string[], index: number | undefined): string {\n    if (index === undefined || index >= fields.length) {\n      return '';\n    }\n    return fields[index]?.trim() || '';\n  }\n\n  private static validateStatus(status: string): string | null {\n    const validStatuses = ['new', 'contacted', 'qualified', 'unqualified', 'converted'];\n    const normalizedStatus = status?.toLowerCase().trim();\n    \n    if (validStatuses.includes(normalizedStatus)) {\n      return normalizedStatus;\n    }\n    \n    // Try to map common variations\n    if (normalizedStatus.includes('nouveau') || normalizedStatus.includes('new')) return 'new';\n    if (normalizedStatus.includes('contacté') || normalizedStatus.includes('contacted')) return 'contacted';\n    if (normalizedStatus.includes('qualifié') || normalizedStatus.includes('qualified')) return 'qualified';\n    if (normalizedStatus.includes('non qualifié') || normalizedStatus.includes('unqualified')) return 'unqualified';\n    if (normalizedStatus.includes('converti') || normalizedStatus.includes('converted')) return 'converted';\n    \n    return null;\n  }\n\n  private static validateSource(source: string): string | null {\n    const validSources = ['manual', 'external', 'csv_import', 'api', 'referral'];\n    const normalizedSource = source?.toLowerCase().trim();\n    \n    if (validSources.includes(normalizedSource)) {\n      return normalizedSource;\n    }\n    \n    // Try to map common variations\n    if (normalizedSource.includes('manuel') || normalizedSource.includes('manual')) return 'manual';\n    if (normalizedSource.includes('externe') || normalizedSource.includes('external')) return 'external';\n    if (normalizedSource.includes('csv') || normalizedSource.includes('import')) return 'csv_import';\n    if (normalizedSource.includes('api')) return 'api';\n    if (normalizedSource.includes('référ') || normalizedSource.includes('referral')) return 'referral';\n    \n    return null;\n  }\n\n  private static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  static generateSampleCSV(): string {\n    const headers = [\n      \"Prénom\",\n      \"Nom\",\n      \"Email\", \n      \"Entreprise\",\n      \"Secteur\",\n      \"Poste\",\n      \"Statut\",\n      \"Source\",\n      \"Score IA\",\n      \"Notes\"\n    ];\n\n    const sampleData = [\n      [\"Marie\", \"Dubois\", \"marie.dubois@techstart.fr\", \"TechStart\", \"Tech/SaaS\", \"CEO\", \"new\", \"external\", \"85\", \"Startup prometteuse\"],\n      [\"Pierre\", \"Martin\", \"p.martin@ecom-plus.com\", \"Ecom Plus\", \"E-commerce\", \"Directeur Marketing\", \"contacted\", \"api\", \"72\", \"Intéressé par notre solution\"],\n      [\"Sophie\", \"Leroy\", \"sophie.leroy@consulting.fr\", \"Consulting Pro\", \"Services\", \"Associée\", \"qualified\", \"referral\", \"91\", \"Budget confirmé pour Q2\"]\n    ];\n\n    const csvContent = [\n      headers.join(\",\"),\n      ...sampleData.map(row => row.map(field => this.escapeCSVField(field)).join(\",\"))\n    ].join(\"\\n\");\n\n    return csvContent;\n  }\n}","size_bytes":11390},"server/services/emailService.ts":{"content":"import { google } from 'googleapis';\nimport { storage } from '../storage';\n\ninterface EmailData {\n  to: string;\n  subject: string;\n  content: string;\n  fromName?: string;\n}\n\ninterface EmailResult {\n  success: boolean;\n  messageId?: string;\n  error?: string;\n}\n\nexport class EmailService {\n  async sendEmail(userId: string, emailData: EmailData): Promise<EmailResult> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return { success: false, error: 'Utilisateur non trouvé' };\n      }\n\n      // Mode simulation pour démo (remplacera Google OAuth plus tard)\n      console.log(`📧 Simulation envoi email à ${emailData.to}:`);\n      console.log(`   Sujet: ${emailData.subject}`);\n      console.log(`   De: ${emailData.fromName || user.firstName || 'LeadPilot'}`);\n      \n      // Simuler un délai d'envoi\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      return { \n        success: true, \n        messageId: `sim_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` \n      };\n    } catch (error) {\n      console.error('Erreur envoi email:', error);\n      return { success: false, error: 'Erreur lors de l\\'envoi' };\n    }\n  }\n\n  private async sendViaGoogle(user: any, emailData: EmailData): Promise<EmailResult> {\n    try {\n      const oauth2Client = new google.auth.OAuth2(\n        process.env.GOOGLE_CLIENT_ID,\n        process.env.GOOGLE_CLIENT_SECRET,\n        process.env.GOOGLE_REDIRECT_URI\n      );\n\n      oauth2Client.setCredentials({\n        access_token: user.googleEmailToken,\n        refresh_token: user.googleRefreshToken,\n      });\n\n      const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n\n      // Créer le message email en format RFC 2822\n      const emailLines = [\n        `To: ${emailData.to}`,\n        `From: ${emailData.fromName || user.firstName || 'LeadPilot'} <${user.connectedEmailAddress}>`,\n        `Subject: ${emailData.subject}`,\n        'Content-Type: text/html; charset=utf-8',\n        '',\n        emailData.content\n      ];\n\n      const email = emailLines.join('\\r\\n');\n      const encodedMessage = Buffer.from(email).toString('base64url');\n\n      const result = await gmail.users.messages.send({\n        userId: 'me',\n        requestBody: {\n          raw: encodedMessage,\n        },\n      });\n\n      return {\n        success: true,\n        messageId: result.data.id || undefined\n      };\n    } catch (error: any) {\n      console.error('Erreur Gmail:', error);\n      \n      // Si le token a expiré, essayer de le renouveler\n      if (error.code === 401) {\n        try {\n          const oauth2Client = new google.auth.OAuth2(\n            process.env.GOOGLE_CLIENT_ID,\n            process.env.GOOGLE_CLIENT_SECRET,\n            process.env.GOOGLE_REDIRECT_URI\n          );\n          \n          oauth2Client.setCredentials({\n            refresh_token: user.googleRefreshToken,\n          });\n\n          const { credentials } = await oauth2Client.refreshAccessToken();\n          \n          // Mettre à jour le token en base\n          await storage.updateUserOAuthTokens(user.id, {\n            provider: 'google',\n            accessToken: credentials.access_token!,\n            refreshToken: credentials.refresh_token || user.googleRefreshToken,\n            emailAddress: user.connectedEmailAddress\n          });\n\n          // Réessayer l'envoi avec le nouveau token\n          const updatedUser = await storage.getUser(user.id);\n          return await this.sendViaGoogle(updatedUser!, emailData);\n          \n        } catch (refreshError) {\n          console.error('Erreur renouvellement token Google:', refreshError);\n          return { success: false, error: 'Token Google expiré, reconnectez votre compte' };\n        }\n      }\n\n      return { success: false, error: error.message };\n    }\n  }\n\n\n\n  async sendCampaignEmails(userId: string, campaignId: string, leads: any[], emailContent: string, subject: string): Promise<{ sent: number; failed: number; errors: string[] }> {\n    const results = {\n      sent: 0,\n      failed: 0,\n      errors: [] as string[]\n    };\n\n    for (const lead of leads) {\n      try {\n        // Personnaliser le contenu\n        let personalizedContent = emailContent\n          .replace(/\\[PRENOM\\]/g, lead.firstName || lead.name || 'Bonjour')\n          .replace(/\\[NOM\\]/g, lead.lastName || '')\n          .replace(/\\[ENTREPRISE\\]/g, lead.company || '')\n          .replace(/\\[POSTE\\]/g, lead.position || '');\n\n        let personalizedSubject = subject\n          .replace(/\\[PRENOM\\]/g, lead.firstName || lead.name || 'Bonjour')\n          .replace(/\\[ENTREPRISE\\]/g, lead.company || '');\n\n        const result = await this.sendEmail(userId, {\n          to: lead.email,\n          subject: personalizedSubject,\n          content: personalizedContent,\n          fromName: await this.getUserDisplayName(userId)\n        });\n\n        if (result.success) {\n          results.sent++;\n          \n          // Enregistrer l'email envoyé dans la base\n          await storage.createCampaignEmail({\n            campaignId,\n            leadId: lead.id,\n            subject: personalizedSubject,\n            content: personalizedContent,\n            status: 'sent',\n            sentAt: new Date()\n          });\n        } else {\n          results.failed++;\n          results.errors.push(`${lead.email}: ${result.error}`);\n        }\n\n        // Attendre 1 seconde entre les envois pour éviter les limites de taux\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n      } catch (error: any) {\n        results.failed++;\n        results.errors.push(`${lead.email}: ${error.message}`);\n      }\n    }\n\n    return results;\n  }\n\n  private async getUserDisplayName(userId: string): Promise<string> {\n    const user = await storage.getUser(userId);\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user?.firstName || 'LeadPilot';\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":5991},"server/services/leadService.ts":{"content":"import type { InsertLead } from \"@shared/schema\";\n\n// Lead generation service interface\nexport interface LeadGenerationService {\n  generateLeads(params: LeadSearchParams): Promise<GeneratedLead[]>;\n  enrichLead(email: string): Promise<EnrichedLeadData | null>;\n}\n\nexport interface LeadSearchParams {\n  sector?: string;\n  location?: string;\n  companySize?: string;\n  jobTitles?: string[];\n  limit?: number;\n}\n\nexport interface GeneratedLead {\n  firstName: string;\n  lastName: string;\n  email: string;\n  company: string;\n  sector: string;\n  position: string;\n  linkedinUrl?: string;\n  companyWebsite?: string;\n  employeeCount?: number;\n  location?: string;\n}\n\nexport interface EnrichedLeadData {\n  company?: {\n    industry: string;\n    size: string;\n    revenue?: string;\n    founded?: number;\n    technologies?: string[];\n  };\n  person?: {\n    seniority: string;\n    department: string;\n    phoneNumber?: string;\n  };\n  socialProfiles?: {\n    linkedin?: string;\n    twitter?: string;\n  };\n}\n\n// Mock Lead Generation Service (for development)\nexport class MockLeadService implements LeadGenerationService {\n  private sampleCompanies = [\n    { name: \"TechInnovate\", sector: \"Tech/SaaS\", website: \"techinnovate.fr\" },\n    { name: \"GreenEnergy Solutions\", sector: \"Energie\", website: \"green-energy.fr\" },\n    { name: \"DigitalMarketing Pro\", sector: \"Marketing\", website: \"digimkt-pro.com\" },\n    { name: \"CloudConsulting\", sector: \"Conseil\", website: \"cloudconsult.fr\" },\n    { name: \"EcommercePlus\", sector: \"E-commerce\", website: \"ecom-plus.fr\" },\n    { name: \"FinanceSecure\", sector: \"Finance\", website: \"financesecure.com\" },\n    { name: \"HealthTech Solutions\", sector: \"Santé\", website: \"healthtech.fr\" },\n    { name: \"EdTech Innovation\", sector: \"Education\", website: \"edtech-innov.com\" },\n    { name: \"LogisticsMaster\", sector: \"Logistique\", website: \"logistics-master.fr\" },\n    { name: \"RetailRevolution\", sector: \"Retail\", website: \"retail-revolution.com\" }\n  ];\n\n  private samplePositions = [\n    \"CEO\", \"CTO\", \"CMO\", \"Directeur Commercial\", \"VP Sales\", \"Head of Marketing\",\n    \"Directeur Général\", \"Responsable Business Development\", \"Chief Revenue Officer\",\n    \"Directeur Marketing\", \"VP Business Development\", \"Head of Sales\"\n  ];\n\n  private sampleFirstNames = [\n    \"Marie\", \"Pierre\", \"Sophie\", \"Thomas\", \"Amélie\", \"Julien\", \"Claire\", \"Nicolas\",\n    \"Laura\", \"Alexandre\", \"Camille\", \"Maxime\", \"Emma\", \"Lucas\", \"Léa\", \"Antoine\",\n    \"Chloé\", \"Mathieu\", \"Sarah\", \"Romain\", \"Julie\", \"Benjamin\", \"Manon\", \"Hugo\"\n  ];\n\n  private sampleLastNames = [\n    \"Martin\", \"Bernard\", \"Dubois\", \"Thomas\", \"Robert\", \"Richard\", \"Petit\", \"Durand\",\n    \"Leroy\", \"Moreau\", \"Simon\", \"Laurent\", \"Lefebvre\", \"Michel\", \"Garcia\", \"David\",\n    \"Bertrand\", \"Roux\", \"Vincent\", \"Fournier\", \"Morel\", \"Girard\", \"Andre\", \"Lefevre\"\n  ];\n\n  async generateLeads(params: LeadSearchParams): Promise<GeneratedLead[]> {\n    const count = Math.min(params.limit || 10, 50);\n    const leads: GeneratedLead[] = [];\n\n    for (let i = 0; i < count; i++) {\n      const company = this.getRandomItem(this.sampleCompanies);\n      const firstName = this.getRandomItem(this.sampleFirstNames);\n      const lastName = this.getRandomItem(this.sampleLastNames);\n      const position = this.getRandomItem(this.samplePositions);\n      \n      leads.push({\n        firstName,\n        lastName,\n        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@${company.website}`,\n        company: company.name,\n        sector: params.sector || company.sector,\n        position,\n        linkedinUrl: `https://linkedin.com/in/${firstName.toLowerCase()}-${lastName.toLowerCase()}`,\n        companyWebsite: `https://${company.website}`,\n        employeeCount: Math.floor(Math.random() * 500) + 50,\n        location: params.location || \"France\"\n      });\n    }\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return leads;\n  }\n\n  async enrichLead(email: string): Promise<EnrichedLeadData | null> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      company: {\n        industry: this.getRandomItem([\"SaaS\", \"E-commerce\", \"Consulting\", \"Marketing\", \"Finance\"]),\n        size: this.getRandomItem([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"]),\n        revenue: this.getRandomItem([\"<1M€\", \"1-5M€\", \"5-20M€\", \"20-100M€\", \">100M€\"]),\n        founded: 2015 + Math.floor(Math.random() * 8),\n        technologies: this.getRandomItems([\"React\", \"Node.js\", \"Python\", \"AWS\", \"Stripe\", \"Salesforce\"], 2)\n      },\n      person: {\n        seniority: this.getRandomItem([\"Junior\", \"Mid\", \"Senior\", \"Executive\"]),\n        department: this.getRandomItem([\"Sales\", \"Marketing\", \"Operations\", \"Technology\", \"Finance\"])\n      }\n    };\n  }\n\n  private getRandomItem<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  private getRandomItems<T>(array: T[], count: number): T[] {\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n}\n\n// AI Scoring Service\nexport class AILeadScoringService {\n  static calculateLeadScore(lead: GeneratedLead, enrichedData?: EnrichedLeadData): number {\n    let score = 50; // Base score\n\n    // Position scoring\n    const seniorPositions = [\"CEO\", \"CTO\", \"CMO\", \"Directeur\", \"VP\", \"Head\", \"Chief\"];\n    if (seniorPositions.some(pos => lead.position.includes(pos))) {\n      score += 20;\n    }\n\n    // Company size scoring\n    if (lead.employeeCount) {\n      if (lead.employeeCount > 200) score += 15;\n      else if (lead.employeeCount > 50) score += 10;\n      else if (lead.employeeCount > 10) score += 5;\n    }\n\n    // Sector scoring\n    const highValueSectors = [\"Tech/SaaS\", \"Finance\", \"Conseil\", \"Marketing\"];\n    if (highValueSectors.includes(lead.sector)) {\n      score += 10;\n    }\n\n    // Enriched data scoring\n    if (enrichedData?.company) {\n      if (enrichedData.company.size === \"500+\") score += 10;\n      if (enrichedData.company.revenue?.includes(\"M€\")) score += 15;\n    }\n\n    if (enrichedData?.person?.seniority === \"Executive\") {\n      score += 15;\n    }\n\n    // Add some randomness for realistic scoring\n    score += Math.floor(Math.random() * 20) - 10;\n\n    return Math.max(0, Math.min(100, score));\n  }\n}\n\n// External Lead API Service (for real implementation)\nexport class ExternalLeadService implements LeadGenerationService {\n  private apiKey: string;\n  private baseUrl: string;\n\n  constructor() {\n    this.apiKey = process.env.LEAD_API_KEY || \"\";\n    this.baseUrl = process.env.LEAD_API_URL || \"\";\n  }\n\n  async generateLeads(params: LeadSearchParams): Promise<GeneratedLead[]> {\n    if (!this.apiKey || !this.baseUrl) {\n      console.warn(\"Lead API credentials not configured, falling back to mock service\");\n      const mockService = new MockLeadService();\n      return mockService.generateLeads(params);\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/search`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Lead API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return this.transformApiResponse(data);\n    } catch (error) {\n      console.error(\"Error calling Lead API:\", error);\n      // Fallback to mock service\n      const mockService = new MockLeadService();\n      return mockService.generateLeads(params);\n    }\n  }\n\n  async enrichLead(email: string): Promise<EnrichedLeadData | null> {\n    if (!this.apiKey || !this.baseUrl) {\n      const mockService = new MockLeadService();\n      return mockService.enrichLead(email);\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/enrich`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Enrichment API error: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error enriching lead:\", error);\n      const mockService = new MockLeadService();\n      return mockService.enrichLead(email);\n    }\n  }\n\n  private transformApiResponse(data: any): GeneratedLead[] {\n    // Transform external API response to our format\n    // This would be customized based on the actual API response structure\n    return data.leads || [];\n  }\n}\n\n// Factory to get the appropriate lead service\nexport function getLeadService(): LeadGenerationService {\n  // Use Apollo if API key is available, otherwise use mock\n  if (process.env.APOLLO_API_KEY) {\n    try {\n      const { ApolloLeadService } = require('./apolloService');\n      return new ApolloLeadService();\n    } catch (error) {\n      console.warn(\"Apollo service not available, falling back to mock:\", error);\n      return new MockLeadService();\n    }\n  }\n  return new MockLeadService();\n}","size_bytes":9123},"server/services/openaiService.ts":{"content":"import type { GeneratedLead, EnrichedLeadData } from \"./leadService\";\n\nexport class OpenAILeadScoringService {\n  private apiKey: string;\n  private baseUrl = \"https://api.openai.com/v1\";\n\n  constructor() {\n    this.apiKey = process.env.OPENAI_API_KEY || \"\";\n    if (!this.apiKey) {\n      throw new Error(\"OPENAI_API_KEY is required\");\n    }\n  }\n\n  async calculateAdvancedLeadScore(\n    lead: GeneratedLead, \n    enrichedData?: EnrichedLeadData\n  ): Promise<{ score: number; reasoning: string; priorities: string[] }> {\n    try {\n      const prompt = this.buildScoringPrompt(lead, enrichedData);\n      \n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o-mini\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"Tu es un expert en qualification de prospects B2B pour des solutions SaaS. Analyse chaque lead et fournis un score de 0 à 100 avec un raisonnement détaillé.\"\n            },\n            {\n              role: \"user\", \n              content: prompt\n            }\n          ],\n          temperature: 0.3,\n          max_tokens: 500\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const content = data.choices[0]?.message?.content || \"\";\n      \n      return this.parseAIResponse(content);\n    } catch (error) {\n      console.error(\"Error calling OpenAI API:\", error);\n      // Fallback to basic scoring\n      const basicScore = this.calculateBasicScore(lead, enrichedData);\n      return {\n        score: basicScore,\n        reasoning: `Score basique calculé (IA indisponible) - Position: ${lead.position}, Entreprise: ${lead.company}`,\n        priorities: [\"Vérifier le potentiel manuellement\", \"Analyser le secteur d'activité\", \"Contacter directement\"]\n      };\n    }\n  }\n\n  async generateEmailVariations(\n    templateContent: string,\n    leadContext: { firstName: string; lastName: string; company: string; position: string; sector: string },\n    count: number = 3\n  ): Promise<string[]> {\n    try {\n      const prompt = `Génère ${count} variations de cet email de prospection en français :\n\nTemplate original :\n${templateContent}\n\nContexte du prospect :\n- Nom: ${leadContext.firstName} ${leadContext.lastName}\n- Entreprise: ${leadContext.company}\n- Poste: ${leadContext.position}\n- Secteur: ${leadContext.sector}\n\nConsignes :\n1. Garde la structure et les variables [PRENOM], [ENTREPRISE], etc.\n2. Varie le ton (professionnel, décontracté, direct)\n3. Change l'accroche et l'argumentation\n4. Reste pertinent pour le secteur d'activité\n5. Chaque variation doit être unique et engageante\n\nRéponds avec les 3 variations séparées par \"---\"`;\n\n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: \"gpt-4o-mini\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"Tu es un expert en rédaction d'emails de prospection B2B en français. Crée des variations naturelles et engageantes.\"\n            },\n            {\n              role: \"user\",\n              content: prompt\n            }\n          ],\n          temperature: 0.7,\n          max_tokens: 1500\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const content = data.choices[0]?.message?.content || \"\";\n      \n      return content.split('---').map((variation: string) => variation.trim()).filter((v: string) => v.length > 50);\n    } catch (error) {\n      console.error(\"Error generating email variations:\", error);\n      return [];\n    }\n  }\n\n  private buildScoringPrompt(lead: GeneratedLead, enrichedData?: EnrichedLeadData): string {\n    return `Analyse ce prospect B2B et donne un score de qualification de 0 à 100 :\n\nPROSPECT :\n- Nom: ${lead.firstName} ${lead.lastName}\n- Email: ${lead.email}\n- Entreprise: ${lead.company}\n- Poste: ${lead.position}\n- Secteur: ${lead.sector}\n- Nombre d'employés: ${lead.employeeCount || 'Inconnu'}\n- Localisation: ${lead.location || 'Inconnue'}\n\n${enrichedData ? `\nDONNÉES ENRICHIES :\n- Industrie: ${enrichedData.company?.industry || 'Inconnue'}\n- Taille: ${enrichedData.company?.size || 'Inconnue'}\n- Revenus: ${enrichedData.company?.revenue || 'Inconnus'}\n- Fondée: ${enrichedData.company?.founded || 'Inconnu'}\n- Ancienneté: ${enrichedData.person?.seniority || 'Inconnue'}\n- Département: ${enrichedData.person?.department || 'Inconnu'}\n` : ''}\n\nCRITÈRES DE QUALIFICATION :\n- Pouvoir de décision (poste, ancienneté)\n- Taille et maturité de l'entreprise  \n- Secteur d'activité (pertinence pour SaaS B2B)\n- Potentiel budgétaire\n- Facilité de contact\n\nFORMAT DE RÉPONSE :\nScore: [0-100]\nRaisonnement: [2-3 phrases expliquant le score]\nPriorités: [3 actions concrètes pour ce prospect]`;\n  }\n\n  private parseAIResponse(content: string): { score: number; reasoning: string; priorities: string[] } {\n    const lines = content.split('\\n').filter(line => line.trim());\n    \n    let score = 50;\n    let reasoning = \"Analyse basique\";\n    let priorities: string[] = [];\n\n    for (const line of lines) {\n      if (line.toLowerCase().includes('score:')) {\n        const scoreMatch = line.match(/\\d+/);\n        if (scoreMatch) {\n          score = Math.min(100, Math.max(0, parseInt(scoreMatch[0])));\n        }\n      } else if (line.toLowerCase().includes('raisonnement:')) {\n        reasoning = line.replace(/^[^:]*:/, '').trim();\n      } else if (line.toLowerCase().includes('priorités:') || line.toLowerCase().includes('priorities:')) {\n        const priorityText = line.replace(/^[^:]*:/, '').trim();\n        priorities = priorityText.split(/[,;]/).map(p => p.trim()).filter(p => p.length > 0);\n      } else if (line.startsWith('-') || line.match(/^\\d+\\./)) {\n        priorities.push(line.replace(/^[-\\d\\.\\s]*/, '').trim());\n      }\n    }\n\n    // If no priorities found, extract from reasoning\n    if (priorities.length === 0) {\n      priorities = [\"Analyser le potentiel\", \"Préparer l'approche\", \"Planifier le suivi\"];\n    }\n\n    return { score, reasoning, priorities: priorities.slice(0, 3) };\n  }\n\n  private calculateBasicScore(lead: GeneratedLead, enrichedData?: EnrichedLeadData): number {\n    let score = 50; // Base score\n\n    // Position scoring\n    const seniorPositions = [\"CEO\", \"CTO\", \"CMO\", \"Directeur\", \"VP\", \"Head\", \"Chief\", \"Founder\"];\n    if (seniorPositions.some(pos => lead.position.toLowerCase().includes(pos.toLowerCase()))) {\n      score += 20;\n    }\n\n    // Company size scoring\n    if (lead.employeeCount) {\n      if (lead.employeeCount > 200) score += 15;\n      else if (lead.employeeCount > 50) score += 10;\n      else if (lead.employeeCount > 10) score += 5;\n    }\n\n    // Sector scoring\n    const highValueSectors = [\"Tech/SaaS\", \"Finance\", \"Conseil\", \"Marketing\"];\n    if (highValueSectors.includes(lead.sector)) {\n      score += 10;\n    }\n\n    // Enriched data scoring\n    if (enrichedData?.company) {\n      if (enrichedData.company.size === \"500+\") score += 10;\n      if (enrichedData.company.revenue?.includes(\"M€\") || enrichedData.company.revenue?.includes(\"M$\")) score += 15;\n    }\n\n    if (enrichedData?.person?.seniority === \"Executive\") {\n      score += 15;\n    }\n\n    // Add some variation\n    score += Math.floor(Math.random() * 10) - 5;\n\n    return Math.max(0, Math.min(100, score));\n  }\n}","size_bytes":7865},"server/services/sequenceAutomation.ts":{"content":"import { storage } from \"../storage\";\n\ninterface QueuedEmail {\n  id: string;\n  sequenceId: string;\n  leadId: string;\n  stepNumber: number;\n  emailId: string;\n  userId: string;\n  scheduledFor: Date;\n  sent: boolean;\n  leadResponded: boolean;\n}\n\n// Simulation d'une queue d'emails programmés\nlet emailQueue: QueuedEmail[] = [];\n\nexport class SequenceAutomationService {\n  \n  // Ajouter un lead à une séquence\n  static async enrollLeadInSequence(\n    sequenceId: string, \n    leadId: string, \n    userId: string,\n    sequenceSteps: any[]\n  ) {\n    console.log(`📧 Inscription du lead ${leadId} dans la séquence ${sequenceId}`);\n    \n    // Programmer tous les emails de la séquence\n    for (const step of sequenceSteps) {\n      if (step.emailId) {\n        const scheduledFor = this.calculateScheduleTime(step.delayDays, step.delayHours);\n        \n        const queuedEmail: QueuedEmail = {\n          id: `email-${Date.now()}-${step.stepNumber}`,\n          sequenceId,\n          leadId,\n          stepNumber: step.stepNumber,\n          emailId: step.emailId,\n          userId,\n          scheduledFor,\n          sent: false,\n          leadResponded: false\n        };\n        \n        emailQueue.push(queuedEmail);\n        \n        console.log(`  ⏰ Email programmé - Étape ${step.stepNumber}: ${scheduledFor.toLocaleString()}`);\n      }\n    }\n    \n    return emailQueue.filter(e => e.sequenceId === sequenceId && e.leadId === leadId);\n  }\n  \n  // Calculer l'heure de programmation d'un email\n  private static calculateScheduleTime(delayDays: number, delayHours: number): Date {\n    const now = new Date();\n    now.setDate(now.getDate() + delayDays);\n    now.setHours(now.getHours() + delayHours);\n    return now;\n  }\n  \n  // Marquer qu'un lead a répondu (arrête la séquence)\n  static async markLeadResponded(leadId: string, sequenceId: string) {\n    console.log(`✋ Lead ${leadId} a répondu - Arrêt de la séquence ${sequenceId}`);\n    \n    // Marquer tous les emails futurs comme annulés\n    emailQueue = emailQueue.map(email => {\n      if (email.leadId === leadId && email.sequenceId === sequenceId && !email.sent) {\n        return { ...email, leadResponded: true };\n      }\n      return email;\n    });\n    \n    const cancelledCount = emailQueue.filter(\n      e => e.leadId === leadId && e.sequenceId === sequenceId && e.leadResponded\n    ).length;\n    \n    console.log(`  📧 ${cancelledCount} email(s) annulé(s) suite à la réponse`);\n  }\n  \n  // Processeur d'emails automatiques (appelé toutes les minutes en production)\n  static async processScheduledEmails() {\n    const now = new Date();\n    const emailsToSend = emailQueue.filter(\n      email => !email.sent && \n               !email.leadResponded && \n               email.scheduledFor <= now\n    );\n    \n    if (emailsToSend.length === 0) {\n      return;\n    }\n    \n    console.log(`📬 Traitement de ${emailsToSend.length} email(s) programmé(s)`);\n    \n    for (const email of emailsToSend) {\n      try {\n        await this.sendScheduledEmail(email);\n        \n        // Marquer comme envoyé\n        const emailIndex = emailQueue.findIndex(e => e.id === email.id);\n        if (emailIndex !== -1) {\n          emailQueue[emailIndex].sent = true;\n        }\n        \n        console.log(`✅ Email envoyé - Séquence ${email.sequenceId}, Étape ${email.stepNumber}`);\n        \n      } catch (error) {\n        console.error(`❌ Erreur envoi email ${email.id}:`, error);\n      }\n    }\n  }\n  \n  // Envoyer un email programmé\n  private static async sendScheduledEmail(email: QueuedEmail) {\n    // Récupérer les données du lead (simulation pour la démonstration)\n    const lead = {\n      id: email.leadId,\n      firstName: \"John\",\n      lastName: \"Doe\", \n      email: \"john.doe@example.com\",\n      company: \"Example Corp\"\n    };\n    if (!lead) {\n      throw new Error(`Lead ${email.leadId} not found`);\n    }\n    \n    // Récupérer l'email personnalisé (simulation)\n    // const customEmail = await storage.getCustomEmail(email.emailId);\n    const customEmail = {\n      id: email.emailId,\n      subject: \"Email automatisé de séquence\",\n      content: \"Bonjour [PRENOM], ceci est un email automatique de votre séquence.\"\n    };\n    \n    console.log(`📧 Envoi automatique:`);\n    console.log(`  Lead: ${lead.firstName} ${lead.lastName} (${lead.email})`);\n    console.log(`  Sujet: ${customEmail.subject}`);\n    console.log(`  Séquence: ${email.sequenceId}, Étape: ${email.stepNumber}`);\n    \n    // SIMULATION : En production, ici on utiliserait OAuth Gmail pour envoyer\n    // await gmailService.sendEmail({\n    //   to: lead.email,\n    //   subject: customEmail.subject,\n    //   body: this.personalizeEmailContent(customEmail.content, lead),\n    //   userId: email.userId\n    // });\n    \n    // Pour la démonstration, on log juste l'envoi\n    console.log(`  ✉️ [SIMULATION] Email envoyé avec succès`);\n  }\n  \n  // Personnaliser le contenu de l'email avec les données du lead\n  private static personalizeEmailContent(content: string, lead: any): string {\n    return content\n      .replace(/\\[PRENOM\\]/g, lead.firstName || lead.email)\n      .replace(/\\[NOM\\]/g, lead.lastName || '')\n      .replace(/\\[ENTREPRISE\\]/g, lead.company || 'votre entreprise')\n      .replace(/\\[EMAIL\\]/g, lead.email);\n  }\n  \n  // Statistiques de la queue\n  static getQueueStats() {\n    const total = emailQueue.length;\n    const sent = emailQueue.filter(e => e.sent).length;\n    const pending = emailQueue.filter(e => !e.sent && !e.leadResponded).length;\n    const cancelled = emailQueue.filter(e => e.leadResponded).length;\n    \n    return { total, sent, pending, cancelled };\n  }\n  \n  // Obtenir les emails programmés pour un lead/séquence\n  static getScheduledEmails(leadId?: string, sequenceId?: string) {\n    return emailQueue.filter(email => {\n      if (leadId && email.leadId !== leadId) return false;\n      if (sequenceId && email.sequenceId !== sequenceId) return false;\n      return true;\n    });\n  }\n}\n\n// Démarrer le processeur automatique (simulation toutes les 30 secondes)\nlet automationInterval: NodeJS.Timeout;\n\nexport function startSequenceAutomation() {\n  console.log(\"🚀 Démarrage de l'automatisation des séquences\");\n  \n  automationInterval = setInterval(async () => {\n    await SequenceAutomationService.processScheduledEmails();\n  }, 30000); // Toutes les 30 secondes pour la démo (1 minute en production)\n}\n\nexport function stopSequenceAutomation() {\n  if (automationInterval) {\n    clearInterval(automationInterval);\n    console.log(\"⏹️ Arrêt de l'automatisation des séquences\");\n  }\n}","size_bytes":6595},"server/services/sequenceService.ts":{"content":"import { storage } from \"../storage\";\nimport type { Sequence, SequenceStep, SequenceEnrollment, InsertSequence, InsertSequenceStep, InsertSequenceEnrollment } from \"@shared/schema\";\n\nexport class SequenceService {\n  // Créer une nouvelle séquence\n  static async createSequence(userId: string, sequenceData: InsertSequence): Promise<Sequence> {\n    return await storage.createSequence(userId, sequenceData);\n  }\n\n  // Ajouter une étape à une séquence\n  static async addSequenceStep(sequenceId: string, stepData: InsertSequenceStep): Promise<SequenceStep> {\n    return await storage.createSequenceStep(sequenceId, stepData);\n  }\n\n  // Inscrire un lead dans une séquence\n  static async enrollLead(sequenceId: string, leadId: string): Promise<SequenceEnrollment> {\n    const enrollment: InsertSequenceEnrollment = {\n      sequenceId,\n      leadId,\n      currentStep: 1,\n      status: \"active\",\n      nextEmailScheduled: this.calculateNextEmailTime(1, [])\n    };\n    \n    return await storage.createSequenceEnrollment(enrollment);\n  }\n\n  // Calculer le prochain envoi d'email\n  static calculateNextEmailTime(stepNumber: number, steps: SequenceStep[]): Date {\n    const step = steps.find(s => s.stepNumber === stepNumber);\n    if (!step) return new Date();\n\n    const now = new Date();\n    const delayMs = (step.delayDays * 24 * 60 * 60 * 1000) + (step.delayHours * 60 * 60 * 1000);\n    return new Date(now.getTime() + delayMs);\n  }\n\n  // Traiter les emails en attente (à appeler périodiquement)\n  static async processScheduledEmails(): Promise<void> {\n    const pendingEmails = await storage.getPendingSequenceEmails();\n    \n    for (const enrollment of pendingEmails) {\n      try {\n        // Logique d'envoi d'email ici\n        await this.sendSequenceEmail(enrollment);\n        \n        // Mettre à jour l'inscription\n        await storage.updateSequenceEnrollment(enrollment.id, {\n          lastEmailSent: new Date(),\n          currentStep: enrollment.currentStep + 1,\n          nextEmailScheduled: this.calculateNextEmailTime(enrollment.currentStep + 1, [])\n        });\n      } catch (error) {\n        console.error(`Erreur envoi email séquence ${enrollment.id}:`, error);\n      }\n    }\n  }\n\n  // Envoyer un email de séquence\n  static async sendSequenceEmail(enrollment: SequenceEnrollment): Promise<void> {\n    // Intégration avec le service d'email\n    console.log(`Envoi email séquence pour lead ${enrollment.leadId}, étape ${enrollment.currentStep}`);\n    // TODO: Intégrer avec le service d'email OAuth\n  }\n\n  // Obtenir les statistiques d'une séquence\n  static async getSequenceStats(sequenceId: string): Promise<{\n    totalEnrolled: number;\n    active: number;\n    completed: number;\n    optedOut: number;\n    averageCompletionRate: number;\n  }> {\n    return await storage.getSequenceStats(sequenceId);\n  }\n}","size_bytes":2830},"client/src/components/admin-seed-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Database, Users } from \"lucide-react\";\n\nexport function AdminSeedButton() {\n  const [isSeeding, setIsSeeding] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const seedLeadsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/seed-leads\");\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      toast({\n        title: \"Données créées !\",\n        description: `${data.message}`,\n      });\n      setIsSeeding(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer les données d'exemple.\",\n        variant: \"destructive\",\n      });\n      setIsSeeding(false);\n    },\n  });\n\n  const handleSeedLeads = () => {\n    setIsSeeding(true);\n    seedLeadsMutation.mutate();\n  };\n\n  return (\n    <div className=\"flex space-x-2\">\n      <Button\n        onClick={handleSeedLeads}\n        disabled={isSeeding || seedLeadsMutation.isPending}\n        variant=\"outline\"\n        size=\"sm\"\n      >\n        <Users className=\"h-4 w-4 mr-2\" />\n        {isSeeding ? \"Création...\" : \"Créer des leads d'exemple\"}\n      </Button>\n    </div>\n  );\n}","size_bytes":1577},"client/src/pages/upgrade.tsx":{"content":"import { useState } from 'react';\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Check, Crown, Zap, Rocket } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\n// Chargement de Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || '');\n\ninterface Plan {\n  id: string;\n  name: string;\n  price: number;\n  yearlyPrice: number;\n  icon: React.ReactNode;\n  features: string[];\n  color: string;\n  popular?: boolean;\n  trial?: boolean;\n}\n\nconst plans: Plan[] = [\n  {\n    id: 'starter',\n    name: 'Starter',\n    price: 49,\n    yearlyPrice: 490,\n    icon: <Zap className=\"h-6 w-6\" />,\n    color: 'from-blue-600 to-purple-600',\n    features: [\n      '100 leads par mois',\n      '5 templates email',\n      '100 variations par mois',\n      'Lien de booking personnalisé',\n      'Essai gratuit 14 jours sans engagement',\n      'Support email',\n      'Statistiques de conversion',\n      'Résiliable à tout moment'\n    ]\n  },\n  {\n    id: 'pro',\n    name: 'Pro',\n    price: 99,\n    yearlyPrice: 990,\n    icon: <Crown className=\"h-6 w-6\" />,\n    color: 'from-purple-600 to-pink-600',\n    popular: true,\n    trial: true,\n    features: [\n      '✨ Essai gratuit 14 jours sans engagement',\n      'Tout Starter +',\n      '400 leads par mois',\n      '15 templates email',\n      '300 variations par mois',\n      'Séquences automatisées (3 étapes)',\n      'Connexion Gmail OAuth',\n      'Analyse détaillée des campagnes',\n      'Support prioritaire'\n    ]\n  },\n  {\n    id: 'growth',\n    name: 'Growth',\n    price: 299,\n    yearlyPrice: 2990,\n    icon: <Rocket className=\"h-6 w-6\" />,\n    color: 'from-pink-600 to-red-600',\n    features: [\n      'Tout Pro +',\n      '1500 leads par mois',\n      '30 templates email premium',\n      '1000 variations par mois',\n      'Séquences automatisées (5 étapes)',\n      'Analyse avancée + insight IA',\n      'Recommandations automatiques',\n      'Support 24/7'\n    ]\n  }\n];\n\nconst CheckoutForm = ({ selectedPlan, isYearly }: { selectedPlan: Plan; isYearly: boolean }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const currentPrice = isYearly ? selectedPlan.yearlyPrice : selectedPlan.price;\n  const period = isYearly ? 'an' : 'mois';\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Creer l intention de paiement avec le type de periode\n      const response = await apiRequest('POST', '/api/create-subscription', {\n        planId: selectedPlan.id,\n        isYearly: isYearly\n      });\n      \n      if (!response.ok) {\n        throw new Error('Erreur lors de la creation de l abonnement');\n      }\n      \n      const { clientSecret } = await response.json();\n      \n      // Confirmer le paiement avec Stripe\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/payment-success?plan=${selectedPlan.id}&billing=${isYearly ? 'yearly' : 'monthly'}`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Erreur de paiement\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Une erreur est survenue lors du paiement\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className={`w-full bg-gradient-to-r ${selectedPlan.color} hover:opacity-90`}\n      >\n        {isProcessing ? \"Traitement...\" : `Payer ${currentPrice}€/${period}`}\n      </Button>\n    </form>\n  );\n};\n\nconst PlanCard = ({ \n  plan, \n  isYearly, \n  onDirectPayment,\n  isLoading \n}: { \n  plan: Plan; \n  isYearly: boolean; \n  onDirectPayment: (plan: Plan, billing: string) => void;\n  isLoading: boolean;\n}) => {\n  const currentPrice = isYearly ? plan.yearlyPrice : plan.price;\n  const period = isYearly ? 'an' : 'mois';\n  const monthlyEquivalent = isYearly ? Math.round(plan.yearlyPrice / 10) : plan.price;\n  const savings = isYearly ? plan.price * 12 - plan.yearlyPrice : 0;\n\n  return (\n    <Card className={`relative ${plan.popular ? 'border-2 border-gradient-to-r border-purple-500' : ''}`}>\n      {plan.popular && (\n        <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n          <Badge className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white px-3 py-1\">\n            <Crown className=\"h-3 w-3 mr-1\" />\n            Populaire\n          </Badge>\n        </div>\n      )}\n      {isYearly && savings > 0 && (\n        <div className=\"absolute -top-3 right-4\">\n          <Badge className=\"bg-gradient-to-r from-green-600 to-emerald-600 text-white px-2 py-1\">\n            Économisez {savings}€\n          </Badge>\n        </div>\n      )}\n      <CardHeader className=\"text-center pb-4\">\n        <div className={`mx-auto p-3 rounded-full bg-gradient-to-r ${plan.color} text-white w-fit`}>\n          {plan.icon}\n        </div>\n        <CardTitle className=\"text-2xl\">{plan.name}</CardTitle>\n        <div className=\"text-3xl font-bold\">\n          {currentPrice}€\n          <span className=\"text-sm font-normal text-muted-foreground\">/{period}</span>\n        </div>\n        {isYearly && (\n          <div className=\"text-sm text-muted-foreground\">\n            Soit {monthlyEquivalent}€/mois\n          </div>\n        )}\n        {plan.trial && (\n          <div className=\"text-sm text-green-400 font-medium\">\n            ✨ Essai gratuit 14 jours sans engagement\n          </div>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <ul className=\"space-y-3\">\n          {plan.features.map((feature, index) => (\n            <li key={index} className=\"flex items-center gap-2\">\n              <Check className=\"h-4 w-4 text-green-500 flex-shrink-0\" />\n              <span className=\"text-sm\">{feature}</span>\n            </li>\n          ))}\n        </ul>\n        <Button \n          onClick={() => onDirectPayment(plan, isYearly ? 'yearly' : 'monthly')}\n          disabled={isLoading}\n          className={`w-full bg-gradient-to-r ${plan.color} hover:opacity-90`}\n        >\n          {isLoading ? \"Chargement...\" : `Choisir ${plan.name}`}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function UpgradePage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n  const [isYearly, setIsYearly] = useState(false);\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleDirectPayment = async (plan: Plan, billing: string) => {\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest('POST', '/api/payment/direct-checkout', {\n        plan: plan.id,\n        billing: billing\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la génération du lien de paiement');\n      }\n\n      const data = await response.json();\n      \n      // Redirection directe vers Stripe dans un nouvel onglet pour éviter les blocages\n      if (data.url) {\n        // Ouvrir dans un nouvel onglet pour éviter les problèmes de navigation\n        window.open(data.url, '_blank');\n        \n        // Afficher un message de confirmation\n        toast({\n          title: \"Redirection vers Stripe\",\n          description: \"La page de paiement s'ouvre dans un nouvel onglet\",\n        });\n      } else {\n        throw new Error('URL de paiement non reçue');\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de créer le lien de paiement\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedPlan(null);\n    setClientSecret(null);\n  };\n\n  if (selectedPlan && clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-800 to-slate-900 p-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <Button \n              variant=\"ghost\" \n              onClick={handleBack}\n              className=\"mb-4\"\n            >\n              ← Retour aux plans\n            </Button>\n            <h1 className=\"text-3xl font-bold mb-2\">Finaliser votre abonnement</h1>\n            <p className=\"text-muted-foreground\">\n              Plan {selectedPlan.name} - {isYearly ? selectedPlan.yearlyPrice : selectedPlan.price}€/{isYearly ? 'an' : 'mois'}\n            </p>\n            {selectedPlan.trial && (\n              <p className=\"text-green-400 text-sm mt-2\">\n                ✨ Essai gratuit de 14 jours sans engagement inclus\n              </p>\n            )}\n          </div>\n\n          <Card className=\"p-6\">\n            <Elements stripe={stripePromise} options={{ clientSecret }}>\n              <CheckoutForm selectedPlan={selectedPlan} isYearly={isYearly} />\n            </Elements>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-800 to-slate-900 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 text-white\">\n            Passez au niveau supérieur avec LeadPilot\n          </h1>\n          <p className=\"text-xl text-slate-300 max-w-2xl mx-auto\">\n            Débloquez toute la puissance de l'automatisation de leads et des séquences intelligentes\n          </p>\n        </div>\n\n        {/* Toggle mensuel/annuel */}\n        <div className=\"flex items-center justify-center mb-8 space-x-6 bg-slate-700/50 rounded-xl p-4 max-w-md mx-auto\">\n          <span className={`text-base font-medium transition-colors ${!isYearly ? 'text-white' : 'text-slate-400'}`}>\n            Mensuel\n          </span>\n          <Switch\n            checked={isYearly}\n            onCheckedChange={setIsYearly}\n            className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-500 data-[state=checked]:to-emerald-500 scale-125\"\n          />\n          <span className={`text-base font-medium transition-colors ${isYearly ? 'text-white' : 'text-slate-400'}`}>\n            Annuel\n          </span>\n          {isYearly && (\n            <Badge className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white font-medium px-3 py-1\">\n              2 mois offerts\n            </Badge>\n          )}\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n          {plans.map((plan) => (\n            <PlanCard \n              key={plan.id} \n              plan={plan} \n              isYearly={isYearly}\n              onDirectPayment={handleDirectPayment}\n              isLoading={isLoading}\n            />\n          ))}\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <p className=\"text-sm text-slate-400\">\n            Paiement sécurisé avec Stripe • Résiliable à tout moment • Support 24/7\n          </p>\n          \n          {/* Lien d'annulation pour les utilisateurs avec plan payant */}\n          {user?.plan && user.plan !== 'free' && (\n            <div className=\"mt-8 p-4 bg-slate-700 rounded-lg border border-slate-600 max-w-md mx-auto\">\n              <h3 className=\"text-lg font-semibold text-white mb-2\">Gérer votre abonnement</h3>\n              <p className=\"text-slate-300 text-sm mb-3\">\n                Besoin d'annuler ou de modifier votre abonnement ?\n              </p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setLocation('/cancel-subscription')}\n                className=\"border-red-600 text-red-600 hover:bg-red-600 hover:text-white\"\n              >\n                Annuler l'abonnement\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12796},"client/src/components/dashboard/closing-section.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Target, Clock, CheckCircle, Phone, Users, Award, Calendar, TrendingUp } from \"lucide-react\";\n\nexport default function ClosingSection() {\n  const upcomingFeatures = [\n    {\n      icon: Calendar,\n      title: \"Prise de RDV Closing\",\n      description: \"Permettez à vos leads qualifiés de booker un RDV téléphonique directement avec un closeur professionnel.\",\n      eta: \"Q2 2025\"\n    },\n    {\n      icon: Phone,\n      title: \"Closeurs Professionnels\",\n      description: \"Équipe de closeurs expérimentés pour conclure vos ventes par téléphone avec commission sur résultats.\",\n      eta: \"Q2 2025\"\n    },\n    {\n      icon: Target,\n      title: \"Suivi des Opportunités\",\n      description: \"Gérez vos prospects chauds et suivez leur progression vers la conclusion de vente.\",\n      eta: \"Q3 2025\"\n    },\n    {\n      icon: Users,\n      title: \"Gestion des Commissions\",\n      description: \"Système automatisé de calcul et versement des commissions aux closeurs selon les ventes réalisées.\",\n      eta: \"Q3 2025\"\n    },\n    {\n      icon: Award,\n      title: \"Analytics de Performance\",\n      description: \"Statistiques détaillées sur les taux de conversion et performances des closeurs.\",\n      eta: \"Q4 2025\"\n    }\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center mb-6\">\n          <div className=\"bg-primary/10 p-4 rounded-full\">\n            <Target className=\"h-12 w-12 text-primary\" />\n          </div>\n        </div>\n        <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n          Service Closing\n        </h1>\n        <p className=\"text-xl text-muted-foreground mb-6 max-w-2xl mx-auto\">\n          Transformez vos prospects qualifiés en clients grâce à nos closeurs professionnels. Ils concluent vos ventes par téléphone avec commission sur résultats.\n        </p>\n        <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4 inline-block\">\n          <div className=\"flex items-center text-primary\">\n            <Clock className=\"h-5 w-5 mr-2\" />\n            <span className=\"font-semibold\">Bientôt disponible - En développement</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mt-12\">\n        {upcomingFeatures.map((feature, index) => (\n          <Card key={index} className=\"relative overflow-hidden\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className={`w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center`}>\n                  <feature.icon className=\"h-6 w-6 text-primary\" />\n                </div>\n                <span className=\"text-xs bg-amber-100 text-amber-800 px-2 py-1 rounded-full\">\n                  {feature.eta}\n                </span>\n              </div>\n              <CardTitle className=\"text-lg text-card-foreground\">{feature.title}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </CardContent>\n            <div className=\"absolute inset-0 bg-card/50 backdrop-blur-[1px] flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity\">\n              <div className=\"bg-primary/20 text-primary px-4 py-2 rounded-lg font-semibold\">\n                En développement\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-8 mt-8\">\n        <Card>\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-2xl font-semibold text-card-foreground mb-4\">\n              Comment ça fonctionne\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary/10 rounded-full p-2\">\n                  <span className=\"text-primary font-semibold text-sm\">1</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-card-foreground\">Sélectionnez vos leads qualifiés</h4>\n                  <p className=\"text-muted-foreground text-sm\">Choisissez les prospects les plus prometteurs de votre pipeline</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary/10 rounded-full p-2\">\n                  <span className=\"text-primary font-semibold text-sm\">2</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-card-foreground\">Bookez un RDV closing</h4>\n                  <p className=\"text-muted-foreground text-sm\">Le lead reçoit un lien pour prendre RDV avec un closeur</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary/10 rounded-full p-2\">\n                  <span className=\"text-primary font-semibold text-sm\">3</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-card-foreground\">Closing professionnel</h4>\n                  <p className=\"text-muted-foreground text-sm\">Notre closeur appelle et conclut la vente</p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary/10 rounded-full p-2\">\n                  <span className=\"text-primary font-semibold text-sm\">4</span>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-card-foreground\">Commission partagée</h4>\n                  <p className=\"text-muted-foreground text-sm\">Le closeur touche sa commission, vous gardez le reste</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-8\">\n            <h3 className=\"text-2xl font-semibold text-card-foreground mb-4\">\n              Intéressé par le service ?\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Rejoignez la liste d'attente pour être notifié dès le lancement du service de closing.\n            </p>\n            <div className=\"space-y-4\">\n              <input \n                type=\"email\" \n                placeholder=\"Votre email\"\n                className=\"form-input w-full\"\n              />\n              <Button className=\"w-full\">\n                Rejoindre la liste d'attente\n              </Button>\n            </div>\n            <div className=\"mt-6 p-4 bg-primary/5 rounded-lg\">\n              <h4 className=\"font-semibold text-card-foreground mb-2\">Avantages exclusifs :</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Accès prioritaire au service</li>\n                <li>• Tarifs préférentiels early bird</li>\n                <li>• Formation gratuite aux techniques de closing</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7267},"client/src/components/dashboard/upgrade-banner.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Crown, Zap, ArrowRight } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function UpgradeBanner() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Ne pas afficher si l'utilisateur est au plan Growth (maximum)\n  if (user?.plan === \"growth\") return null;\n  \n  // Ne pas afficher si l'utilisateur a déjà un plan payant (sauf pro qui peut upgrader vers growth)\n  if (user?.plan !== \"free\" && user?.plan !== \"pro\") return null;\n\n  return (\n    <Card className=\"border-2 border-slate-200 dark:border-slate-700 bg-gradient-to-r from-slate-800 to-slate-700 dark:from-slate-800 dark:to-slate-700 mb-6\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n              <Crown className=\"h-6 w-6\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-white\">\n                {user?.plan === \"pro\" ? \"Passez au niveau supérieur\" : \"Débloquez tout le potentiel de LeadPilot\"}\n              </h3>\n              <p className=\"text-slate-300 text-sm\">\n                {user?.plan === \"pro\" \n                  ? \"Plan Growth : Leads illimités, séquences avancées, priorité support\"\n                  : \"Séquences automatisées, plus de leads, templates premium et bien plus\"\n                }\n              </p>\n              <p className=\"text-blue-300 text-xs font-medium mt-1\">\n                {user?.plan === \"pro\" \n                  ? \"✨ Mise à niveau immédiate vers Growth\"\n                  : \"✨ Essai gratuit 14 jours sans engagement (Plan Pro)\"\n                }\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-right hidden md:block\">\n              <div className=\"text-sm text-slate-300\">À partir de</div>\n              <div className=\"text-2xl font-bold text-white\">\n                {user?.plan === \"pro\" ? \"299€\" : \"49€\"}\n              </div>\n              <div className=\"text-xs text-slate-300\">/mois</div>\n            </div>\n            <Button \n              onClick={() => setLocation('/upgrade')}\n              className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n            >\n              <Zap className=\"h-4 w-4 mr-2\" />\n              {user?.plan === \"pro\" ? \"Passer Growth\" : \"Passer Pro\"}\n              <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2865}}}