#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration LeadPilot
 * V√©rifie que toutes les variables d'environnement sont configur√©es
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configuration dotenv
dotenv.config();

console.log('üîç V√©rification de la configuration LeadPilot...\n');

// Fonction pour v√©rifier si une variable d'environnement existe
function checkEnvVar(name, required = true, description = '') {
  const value = process.env[name];
  const status = value ? '‚úÖ' : '‚ùå';
  const statusText = value ? 'Configur√©' : required ? 'MANQUANT' : 'Optionnel';
  
  console.log(`${status} ${name}: ${statusText}`);
  if (description) {
    console.log(`   ${description}`);
  }
  
  if (required && !value) {
    console.log(`   ‚ö†Ô∏è  Cette variable est requise pour le fonctionnement de l'application`);
  }
  
  return !!value;
}

// Fonction pour v√©rifier la configuration de l'environnement
function checkEnvironment() {
  console.log('\nüåç Configuration de l\'environnement...');
  
  const nodeEnv = process.env.NODE_ENV || 'development';
  const isSupabase = !!process.env.SUPABASE_URL;
  
  console.log(`  üìä Environnement: ${nodeEnv}`);
  
  if (isSupabase) {
    console.log(`  üóÑÔ∏è  Supabase configur√©: ${process.env.SUPABASE_URL}`);
  } else if (nodeEnv === 'development') {
    console.log('  üõ†Ô∏è  Mode d√©veloppement local');
  } else {
    console.log('  üåê Mode production');
  }
}

// Fonction pour v√©rifier la base de donn√©es
function checkDatabase() {
  console.log('\nüóÑÔ∏è  Configuration de la base de donn√©es...');
  
  const hasDatabaseUrl = checkEnvVar('DATABASE_URL', true, 'URL de connexion PostgreSQL');
  
  if (hasDatabaseUrl) {
    const dbUrl = process.env.DATABASE_URL;
    if (dbUrl.includes('supabase')) {
      console.log('  ‚úÖ Configuration Supabase d√©tect√©e');
    } else if (dbUrl.includes('localhost')) {
      console.log('  ‚úÖ Configuration locale d√©tect√©e');
    } else {
      console.log('  ‚úÖ Configuration externe d√©tect√©e');
    }
  }
}

// Fonction pour v√©rifier l'authentification
function checkAuthentication() {
  console.log('\nüîê Configuration de l\'authentification...');
  
  checkEnvVar('SESSION_SECRET', true, 'Secret pour les sessions utilisateur');
  checkEnvVar('GOOGLE_CLIENT_ID', false, 'Client ID Google OAuth');
  checkEnvVar('GOOGLE_CLIENT_SECRET', false, 'Client Secret Google OAuth');
  checkEnvVar('GOOGLE_REDIRECT_URI', false, 'URL de redirection Google OAuth');
}

// Fonction pour v√©rifier les paiements
function checkPayments() {
  console.log('\nüí≥ Configuration des paiements...');
  
  const hasStripeKey = checkEnvVar('STRIPE_SECRET_KEY', true, 'Cl√© secr√®te Stripe');
  checkEnvVar('STRIPE_WEBHOOK_SECRET', false, 'Secret webhook Stripe (√† configurer apr√®s d√©ploiement)');
  
  if (hasStripeKey) {
    const stripeKey = process.env.STRIPE_SECRET_KEY;
    if (stripeKey.startsWith('sk_live_')) {
      console.log('  ‚ö†Ô∏è  Mode PRODUCTION Stripe d√©tect√©');
    } else if (stripeKey.startsWith('sk_test_')) {
      console.log('  ‚úÖ Mode TEST Stripe d√©tect√©');
    }
  }
}

// Fonction pour v√©rifier les services externes
function checkExternalServices() {
  console.log('\nüîó Services externes...');
  
  checkEnvVar('OPENAI_API_KEY', false, 'Cl√© API OpenAI pour le scoring IA');
  checkEnvVar('APOLLO_API_KEY', false, 'Cl√© API Apollo pour la g√©n√©ration de leads');
}

// Fonction pour v√©rifier Supabase
function checkSupabase() {
  console.log('\n‚òÅÔ∏è  Configuration Supabase...');
  
  const hasSupabaseUrl = checkEnvVar('SUPABASE_URL', false, 'URL du projet Supabase');
  checkEnvVar('SUPABASE_ANON_KEY', false, 'Cl√© anonyme Supabase');
  checkEnvVar('SUPABASE_SERVICE_ROLE_KEY', false, 'Cl√© de service Supabase');
  
  if (hasSupabaseUrl) {
    console.log('  ‚úÖ Supabase configur√© pour la base de donn√©es');
  }
}

// Fonction pour afficher les URLs de d√©ploiement
function showDeploymentUrls() {
  console.log('\nüåê URLs de d√©ploiement...');
  console.log('  üìç URL publique: https://your-domain.vercel.app');
  console.log('  üîó URL JavaScript autoris√©e: https://your-domain.vercel.app');
  console.log('  üîÑ URL de redirection Google: https://your-domain.vercel.app/api/oauth/google/callback');
  console.log('  üì° URL webhook Stripe: https://your-domain.vercel.app/api/stripe-webhook');
  console.log('\n  üí° Remplacez "your-domain" par votre nom de projet Vercel');
}

// Fonction pour afficher les prochaines √©tapes
function showNextSteps() {
  console.log('\nüìã Prochaines √©tapes...');
  console.log('  1. Cr√©er les tables: npm run db:push');
  console.log('  2. Tester localement: npm run dev');
  console.log('  3. D√©ployer sur Vercel: vercel');
  console.log('  4. Configurer les webhooks Stripe');
  console.log('  5. Finaliser Google OAuth');
}

// V√©rifications principales
let allGood = true;

try {
  checkEnvironment();
  checkDatabase();
  checkAuthentication();
  checkPayments();
  checkSupabase();
  checkExternalServices();
  
  showDeploymentUrls();
  showNextSteps();
  
  console.log('\nüéØ R√©sum√© de la v√©rification...');
  
  // V√©rifier les variables critiques
  const criticalVars = [
    'DATABASE_URL',
    'SESSION_SECRET',
    'STRIPE_SECRET_KEY'
  ];
  
  const missingCritical = criticalVars.filter(varName => !process.env[varName]);
  
  if (missingCritical.length === 0) {
    console.log('  ‚úÖ Configuration critique compl√®te');
    console.log('  üöÄ Pr√™t pour le d√©ploiement !');
  } else {
    console.log('  ‚ùå Variables critiques manquantes:');
    missingCritical.forEach(varName => {
      console.log(`     - ${varName}`);
    });
    allGood = false;
  }
  
} catch (error) {
  console.error('  ‚ùå Erreur lors de la v√©rification:', error.message);
  allGood = false;
}

console.log('\n' + '='.repeat(50));
if (allGood) {
  console.log('üéâ Configuration valid√©e avec succ√®s !');
} else {
  console.log('‚ö†Ô∏è  Certaines configurations n√©cessitent votre attention.');
}
console.log('='.repeat(50));

process.exit(allGood ? 0 : 1);
